/* soapH.h
   Generated by gSOAP 2.8.45 for generated/prototypes.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_byte(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (soap_read_byte(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_int(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (soap_read_int(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED

inline void soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_double(soap, p, "double", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_double(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_double(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_double(struct soap *soap, double *p)
{
	if (soap_read_double(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__LuaType_DEFINED
#define SOAP_TYPE_ns1__LuaType_DEFINED

inline void soap_default_ns1__LuaType(struct soap *soap, enum ns1__LuaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__LuaType
	*a = SOAP_DEFAULT_ns1__LuaType;
#else
	*a = (enum ns1__LuaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LuaType(struct soap*, const char*, int, const enum ns1__LuaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__LuaType2s(struct soap*, enum ns1__LuaType);
SOAP_FMAC3 enum ns1__LuaType * SOAP_FMAC4 soap_in_ns1__LuaType(struct soap*, const char*, enum ns1__LuaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__LuaType(struct soap*, const char*, enum ns1__LuaType *);

SOAP_FMAC3 enum ns1__LuaType * SOAP_FMAC4 soap_new_ns1__LuaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__LuaType(struct soap*, const enum ns1__LuaType *, const char*, const char*);

inline int soap_write_ns1__LuaType(struct soap *soap, enum ns1__LuaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns1__LuaType(soap, p, "ns1:LuaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__LuaType(struct soap *soap, const char *URL, enum ns1__LuaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns1__LuaType(soap, p, "ns1:LuaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__LuaType(struct soap *soap, const char *URL, enum ns1__LuaType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns1__LuaType(soap, p, "ns1:LuaType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__LuaType * SOAP_FMAC4 soap_get_ns1__LuaType(struct soap*, enum ns1__LuaType *, const char*, const char*);

inline int soap_read_ns1__LuaType(struct soap *soap, enum ns1__LuaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns1__LuaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__LuaType(struct soap *soap, const char *URL, enum ns1__LuaType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__LuaType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__LuaType(struct soap *soap, enum ns1__LuaType *p)
{
	if (soap_read_ns1__LuaType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_std__string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DiagExResponse_DEFINED
#define SOAP_TYPE__ns1__DiagExResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DiagExResponse(struct soap*, const char*, int, const _ns1__DiagExResponse *, const char*);
SOAP_FMAC3 _ns1__DiagExResponse * SOAP_FMAC4 soap_in__ns1__DiagExResponse(struct soap*, const char*, _ns1__DiagExResponse *, const char*);
SOAP_FMAC1 _ns1__DiagExResponse * SOAP_FMAC2 soap_instantiate__ns1__DiagExResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DiagExResponse * soap_new__ns1__DiagExResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DiagExResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__DiagExResponse * soap_new_req__ns1__DiagExResponse(
	struct soap *soap,
	ns1__ArrayOfLuaValue *DiagExResult)
{
	_ns1__DiagExResponse *_p = soap_new__ns1__DiagExResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DiagExResponse::DiagExResult = DiagExResult;
	}
	return _p;
}

inline _ns1__DiagExResponse * soap_new_set__ns1__DiagExResponse(
	struct soap *soap,
	ns1__ArrayOfLuaValue *DiagExResult)
{
	_ns1__DiagExResponse *_p = soap_new__ns1__DiagExResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DiagExResponse::DiagExResult = DiagExResult;
	}
	return _p;
}

inline int soap_write__ns1__DiagExResponse(struct soap *soap, _ns1__DiagExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiagExResponse", p->soap_type() == SOAP_TYPE__ns1__DiagExResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DiagExResponse(struct soap *soap, const char *URL, _ns1__DiagExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiagExResponse", p->soap_type() == SOAP_TYPE__ns1__DiagExResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DiagExResponse(struct soap *soap, const char *URL, _ns1__DiagExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiagExResponse", p->soap_type() == SOAP_TYPE__ns1__DiagExResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DiagExResponse * SOAP_FMAC4 soap_get__ns1__DiagExResponse(struct soap*, _ns1__DiagExResponse *, const char*, const char*);

inline int soap_read__ns1__DiagExResponse(struct soap *soap, _ns1__DiagExResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DiagExResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DiagExResponse(struct soap *soap, const char *URL, _ns1__DiagExResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__DiagExResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DiagExResponse(struct soap *soap, _ns1__DiagExResponse *p)
{
	if (soap_read__ns1__DiagExResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DiagEx_DEFINED
#define SOAP_TYPE__ns1__DiagEx_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DiagEx(struct soap*, const char*, int, const _ns1__DiagEx *, const char*);
SOAP_FMAC3 _ns1__DiagEx * SOAP_FMAC4 soap_in__ns1__DiagEx(struct soap*, const char*, _ns1__DiagEx *, const char*);
SOAP_FMAC1 _ns1__DiagEx * SOAP_FMAC2 soap_instantiate__ns1__DiagEx(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DiagEx * soap_new__ns1__DiagEx(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DiagEx(soap, n, NULL, NULL, NULL);
}

inline _ns1__DiagEx * soap_new_req__ns1__DiagEx(
	struct soap *soap,
	int type)
{
	_ns1__DiagEx *_p = soap_new__ns1__DiagEx(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DiagEx::type = type;
	}
	return _p;
}

inline _ns1__DiagEx * soap_new_set__ns1__DiagEx(
	struct soap *soap,
	int type,
	std::string *jobID)
{
	_ns1__DiagEx *_p = soap_new__ns1__DiagEx(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DiagEx::type = type;
		_p->_ns1__DiagEx::jobID = jobID;
	}
	return _p;
}

inline int soap_write__ns1__DiagEx(struct soap *soap, _ns1__DiagEx const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiagEx", p->soap_type() == SOAP_TYPE__ns1__DiagEx ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DiagEx(struct soap *soap, const char *URL, _ns1__DiagEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiagEx", p->soap_type() == SOAP_TYPE__ns1__DiagEx ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DiagEx(struct soap *soap, const char *URL, _ns1__DiagEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiagEx", p->soap_type() == SOAP_TYPE__ns1__DiagEx ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DiagEx * SOAP_FMAC4 soap_get__ns1__DiagEx(struct soap*, _ns1__DiagEx *, const char*, const char*);

inline int soap_read__ns1__DiagEx(struct soap *soap, _ns1__DiagEx *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DiagEx(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DiagEx(struct soap *soap, const char *URL, _ns1__DiagEx *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__DiagEx(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DiagEx(struct soap *soap, _ns1__DiagEx *p)
{
	if (soap_read__ns1__DiagEx(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DiagResponse_DEFINED
#define SOAP_TYPE__ns1__DiagResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DiagResponse(struct soap*, const char*, int, const _ns1__DiagResponse *, const char*);
SOAP_FMAC3 _ns1__DiagResponse * SOAP_FMAC4 soap_in__ns1__DiagResponse(struct soap*, const char*, _ns1__DiagResponse *, const char*);
SOAP_FMAC1 _ns1__DiagResponse * SOAP_FMAC2 soap_instantiate__ns1__DiagResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DiagResponse * soap_new__ns1__DiagResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DiagResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__DiagResponse * soap_new_req__ns1__DiagResponse(
	struct soap *soap,
	const std::vector<ns1__LuaValue *> & DiagResult)
{
	_ns1__DiagResponse *_p = soap_new__ns1__DiagResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DiagResponse::DiagResult = DiagResult;
	}
	return _p;
}

inline _ns1__DiagResponse * soap_new_set__ns1__DiagResponse(
	struct soap *soap,
	const std::vector<ns1__LuaValue *> & DiagResult)
{
	_ns1__DiagResponse *_p = soap_new__ns1__DiagResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DiagResponse::DiagResult = DiagResult;
	}
	return _p;
}

inline int soap_write__ns1__DiagResponse(struct soap *soap, _ns1__DiagResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiagResponse", p->soap_type() == SOAP_TYPE__ns1__DiagResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DiagResponse(struct soap *soap, const char *URL, _ns1__DiagResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiagResponse", p->soap_type() == SOAP_TYPE__ns1__DiagResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DiagResponse(struct soap *soap, const char *URL, _ns1__DiagResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiagResponse", p->soap_type() == SOAP_TYPE__ns1__DiagResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DiagResponse * SOAP_FMAC4 soap_get__ns1__DiagResponse(struct soap*, _ns1__DiagResponse *, const char*, const char*);

inline int soap_read__ns1__DiagResponse(struct soap *soap, _ns1__DiagResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DiagResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DiagResponse(struct soap *soap, const char *URL, _ns1__DiagResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__DiagResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DiagResponse(struct soap *soap, _ns1__DiagResponse *p)
{
	if (soap_read__ns1__DiagResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__Diag_DEFINED
#define SOAP_TYPE__ns1__Diag_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Diag(struct soap*, const char*, int, const _ns1__Diag *, const char*);
SOAP_FMAC3 _ns1__Diag * SOAP_FMAC4 soap_in__ns1__Diag(struct soap*, const char*, _ns1__Diag *, const char*);
SOAP_FMAC1 _ns1__Diag * SOAP_FMAC2 soap_instantiate__ns1__Diag(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Diag * soap_new__ns1__Diag(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__Diag(soap, n, NULL, NULL, NULL);
}

inline _ns1__Diag * soap_new_req__ns1__Diag(
	struct soap *soap,
	int type)
{
	_ns1__Diag *_p = soap_new__ns1__Diag(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Diag::type = type;
	}
	return _p;
}

inline _ns1__Diag * soap_new_set__ns1__Diag(
	struct soap *soap,
	int type,
	std::string *jobID)
{
	_ns1__Diag *_p = soap_new__ns1__Diag(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Diag::type = type;
		_p->_ns1__Diag::jobID = jobID;
	}
	return _p;
}

inline int soap_write__ns1__Diag(struct soap *soap, _ns1__Diag const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Diag", p->soap_type() == SOAP_TYPE__ns1__Diag ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__Diag(struct soap *soap, const char *URL, _ns1__Diag const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Diag", p->soap_type() == SOAP_TYPE__ns1__Diag ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__Diag(struct soap *soap, const char *URL, _ns1__Diag const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Diag", p->soap_type() == SOAP_TYPE__ns1__Diag ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Diag * SOAP_FMAC4 soap_get__ns1__Diag(struct soap*, _ns1__Diag *, const char*, const char*);

inline int soap_read__ns1__Diag(struct soap *soap, _ns1__Diag *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__Diag(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__Diag(struct soap *soap, const char *URL, _ns1__Diag *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__Diag(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__Diag(struct soap *soap, _ns1__Diag *p)
{
	if (soap_read__ns1__Diag(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CloseAllJobsResponse_DEFINED
#define SOAP_TYPE__ns1__CloseAllJobsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CloseAllJobsResponse(struct soap*, const char*, int, const _ns1__CloseAllJobsResponse *, const char*);
SOAP_FMAC3 _ns1__CloseAllJobsResponse * SOAP_FMAC4 soap_in__ns1__CloseAllJobsResponse(struct soap*, const char*, _ns1__CloseAllJobsResponse *, const char*);
SOAP_FMAC1 _ns1__CloseAllJobsResponse * SOAP_FMAC2 soap_instantiate__ns1__CloseAllJobsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CloseAllJobsResponse * soap_new__ns1__CloseAllJobsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CloseAllJobsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CloseAllJobsResponse * soap_new_req__ns1__CloseAllJobsResponse(
	struct soap *soap,
	int CloseAllJobsResult)
{
	_ns1__CloseAllJobsResponse *_p = soap_new__ns1__CloseAllJobsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CloseAllJobsResponse::CloseAllJobsResult = CloseAllJobsResult;
	}
	return _p;
}

inline _ns1__CloseAllJobsResponse * soap_new_set__ns1__CloseAllJobsResponse(
	struct soap *soap,
	int CloseAllJobsResult)
{
	_ns1__CloseAllJobsResponse *_p = soap_new__ns1__CloseAllJobsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CloseAllJobsResponse::CloseAllJobsResult = CloseAllJobsResult;
	}
	return _p;
}

inline int soap_write__ns1__CloseAllJobsResponse(struct soap *soap, _ns1__CloseAllJobsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseAllJobsResponse", p->soap_type() == SOAP_TYPE__ns1__CloseAllJobsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CloseAllJobsResponse(struct soap *soap, const char *URL, _ns1__CloseAllJobsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseAllJobsResponse", p->soap_type() == SOAP_TYPE__ns1__CloseAllJobsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CloseAllJobsResponse(struct soap *soap, const char *URL, _ns1__CloseAllJobsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseAllJobsResponse", p->soap_type() == SOAP_TYPE__ns1__CloseAllJobsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CloseAllJobsResponse * SOAP_FMAC4 soap_get__ns1__CloseAllJobsResponse(struct soap*, _ns1__CloseAllJobsResponse *, const char*, const char*);

inline int soap_read__ns1__CloseAllJobsResponse(struct soap *soap, _ns1__CloseAllJobsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CloseAllJobsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CloseAllJobsResponse(struct soap *soap, const char *URL, _ns1__CloseAllJobsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CloseAllJobsResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CloseAllJobsResponse(struct soap *soap, _ns1__CloseAllJobsResponse *p)
{
	if (soap_read__ns1__CloseAllJobsResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CloseAllJobs_DEFINED
#define SOAP_TYPE__ns1__CloseAllJobs_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CloseAllJobs(struct soap*, const char*, int, const _ns1__CloseAllJobs *, const char*);
SOAP_FMAC3 _ns1__CloseAllJobs * SOAP_FMAC4 soap_in__ns1__CloseAllJobs(struct soap*, const char*, _ns1__CloseAllJobs *, const char*);
SOAP_FMAC1 _ns1__CloseAllJobs * SOAP_FMAC2 soap_instantiate__ns1__CloseAllJobs(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CloseAllJobs * soap_new__ns1__CloseAllJobs(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CloseAllJobs(soap, n, NULL, NULL, NULL);
}

inline _ns1__CloseAllJobs * soap_new_req__ns1__CloseAllJobs(
	struct soap *soap)
{
	_ns1__CloseAllJobs *_p = soap_new__ns1__CloseAllJobs(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CloseAllJobs * soap_new_set__ns1__CloseAllJobs(
	struct soap *soap)
{
	_ns1__CloseAllJobs *_p = soap_new__ns1__CloseAllJobs(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__CloseAllJobs(struct soap *soap, _ns1__CloseAllJobs const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseAllJobs", p->soap_type() == SOAP_TYPE__ns1__CloseAllJobs ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CloseAllJobs(struct soap *soap, const char *URL, _ns1__CloseAllJobs const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseAllJobs", p->soap_type() == SOAP_TYPE__ns1__CloseAllJobs ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CloseAllJobs(struct soap *soap, const char *URL, _ns1__CloseAllJobs const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseAllJobs", p->soap_type() == SOAP_TYPE__ns1__CloseAllJobs ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CloseAllJobs * SOAP_FMAC4 soap_get__ns1__CloseAllJobs(struct soap*, _ns1__CloseAllJobs *, const char*, const char*);

inline int soap_read__ns1__CloseAllJobs(struct soap *soap, _ns1__CloseAllJobs *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CloseAllJobs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CloseAllJobs(struct soap *soap, const char *URL, _ns1__CloseAllJobs *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CloseAllJobs(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CloseAllJobs(struct soap *soap, _ns1__CloseAllJobs *p)
{
	if (soap_read__ns1__CloseAllJobs(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CloseExpiredJobsResponse_DEFINED
#define SOAP_TYPE__ns1__CloseExpiredJobsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CloseExpiredJobsResponse(struct soap*, const char*, int, const _ns1__CloseExpiredJobsResponse *, const char*);
SOAP_FMAC3 _ns1__CloseExpiredJobsResponse * SOAP_FMAC4 soap_in__ns1__CloseExpiredJobsResponse(struct soap*, const char*, _ns1__CloseExpiredJobsResponse *, const char*);
SOAP_FMAC1 _ns1__CloseExpiredJobsResponse * SOAP_FMAC2 soap_instantiate__ns1__CloseExpiredJobsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CloseExpiredJobsResponse * soap_new__ns1__CloseExpiredJobsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CloseExpiredJobsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CloseExpiredJobsResponse * soap_new_req__ns1__CloseExpiredJobsResponse(
	struct soap *soap,
	int CloseExpiredJobsResult)
{
	_ns1__CloseExpiredJobsResponse *_p = soap_new__ns1__CloseExpiredJobsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CloseExpiredJobsResponse::CloseExpiredJobsResult = CloseExpiredJobsResult;
	}
	return _p;
}

inline _ns1__CloseExpiredJobsResponse * soap_new_set__ns1__CloseExpiredJobsResponse(
	struct soap *soap,
	int CloseExpiredJobsResult)
{
	_ns1__CloseExpiredJobsResponse *_p = soap_new__ns1__CloseExpiredJobsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CloseExpiredJobsResponse::CloseExpiredJobsResult = CloseExpiredJobsResult;
	}
	return _p;
}

inline int soap_write__ns1__CloseExpiredJobsResponse(struct soap *soap, _ns1__CloseExpiredJobsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseExpiredJobsResponse", p->soap_type() == SOAP_TYPE__ns1__CloseExpiredJobsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CloseExpiredJobsResponse(struct soap *soap, const char *URL, _ns1__CloseExpiredJobsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseExpiredJobsResponse", p->soap_type() == SOAP_TYPE__ns1__CloseExpiredJobsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CloseExpiredJobsResponse(struct soap *soap, const char *URL, _ns1__CloseExpiredJobsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseExpiredJobsResponse", p->soap_type() == SOAP_TYPE__ns1__CloseExpiredJobsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CloseExpiredJobsResponse * SOAP_FMAC4 soap_get__ns1__CloseExpiredJobsResponse(struct soap*, _ns1__CloseExpiredJobsResponse *, const char*, const char*);

inline int soap_read__ns1__CloseExpiredJobsResponse(struct soap *soap, _ns1__CloseExpiredJobsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CloseExpiredJobsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CloseExpiredJobsResponse(struct soap *soap, const char *URL, _ns1__CloseExpiredJobsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CloseExpiredJobsResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CloseExpiredJobsResponse(struct soap *soap, _ns1__CloseExpiredJobsResponse *p)
{
	if (soap_read__ns1__CloseExpiredJobsResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CloseExpiredJobs_DEFINED
#define SOAP_TYPE__ns1__CloseExpiredJobs_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CloseExpiredJobs(struct soap*, const char*, int, const _ns1__CloseExpiredJobs *, const char*);
SOAP_FMAC3 _ns1__CloseExpiredJobs * SOAP_FMAC4 soap_in__ns1__CloseExpiredJobs(struct soap*, const char*, _ns1__CloseExpiredJobs *, const char*);
SOAP_FMAC1 _ns1__CloseExpiredJobs * SOAP_FMAC2 soap_instantiate__ns1__CloseExpiredJobs(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CloseExpiredJobs * soap_new__ns1__CloseExpiredJobs(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CloseExpiredJobs(soap, n, NULL, NULL, NULL);
}

inline _ns1__CloseExpiredJobs * soap_new_req__ns1__CloseExpiredJobs(
	struct soap *soap)
{
	_ns1__CloseExpiredJobs *_p = soap_new__ns1__CloseExpiredJobs(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CloseExpiredJobs * soap_new_set__ns1__CloseExpiredJobs(
	struct soap *soap)
{
	_ns1__CloseExpiredJobs *_p = soap_new__ns1__CloseExpiredJobs(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__CloseExpiredJobs(struct soap *soap, _ns1__CloseExpiredJobs const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseExpiredJobs", p->soap_type() == SOAP_TYPE__ns1__CloseExpiredJobs ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CloseExpiredJobs(struct soap *soap, const char *URL, _ns1__CloseExpiredJobs const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseExpiredJobs", p->soap_type() == SOAP_TYPE__ns1__CloseExpiredJobs ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CloseExpiredJobs(struct soap *soap, const char *URL, _ns1__CloseExpiredJobs const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseExpiredJobs", p->soap_type() == SOAP_TYPE__ns1__CloseExpiredJobs ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CloseExpiredJobs * SOAP_FMAC4 soap_get__ns1__CloseExpiredJobs(struct soap*, _ns1__CloseExpiredJobs *, const char*, const char*);

inline int soap_read__ns1__CloseExpiredJobs(struct soap *soap, _ns1__CloseExpiredJobs *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CloseExpiredJobs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CloseExpiredJobs(struct soap *soap, const char *URL, _ns1__CloseExpiredJobs *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CloseExpiredJobs(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CloseExpiredJobs(struct soap *soap, _ns1__CloseExpiredJobs *p)
{
	if (soap_read__ns1__CloseExpiredJobs(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetAllJobsExResponse_DEFINED
#define SOAP_TYPE__ns1__GetAllJobsExResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAllJobsExResponse(struct soap*, const char*, int, const _ns1__GetAllJobsExResponse *, const char*);
SOAP_FMAC3 _ns1__GetAllJobsExResponse * SOAP_FMAC4 soap_in__ns1__GetAllJobsExResponse(struct soap*, const char*, _ns1__GetAllJobsExResponse *, const char*);
SOAP_FMAC1 _ns1__GetAllJobsExResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAllJobsExResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAllJobsExResponse * soap_new__ns1__GetAllJobsExResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetAllJobsExResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetAllJobsExResponse * soap_new_req__ns1__GetAllJobsExResponse(
	struct soap *soap,
	ns1__ArrayOfJob *GetAllJobsExResult)
{
	_ns1__GetAllJobsExResponse *_p = soap_new__ns1__GetAllJobsExResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetAllJobsExResponse::GetAllJobsExResult = GetAllJobsExResult;
	}
	return _p;
}

inline _ns1__GetAllJobsExResponse * soap_new_set__ns1__GetAllJobsExResponse(
	struct soap *soap,
	ns1__ArrayOfJob *GetAllJobsExResult)
{
	_ns1__GetAllJobsExResponse *_p = soap_new__ns1__GetAllJobsExResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetAllJobsExResponse::GetAllJobsExResult = GetAllJobsExResult;
	}
	return _p;
}

inline int soap_write__ns1__GetAllJobsExResponse(struct soap *soap, _ns1__GetAllJobsExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAllJobsExResponse", p->soap_type() == SOAP_TYPE__ns1__GetAllJobsExResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetAllJobsExResponse(struct soap *soap, const char *URL, _ns1__GetAllJobsExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAllJobsExResponse", p->soap_type() == SOAP_TYPE__ns1__GetAllJobsExResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetAllJobsExResponse(struct soap *soap, const char *URL, _ns1__GetAllJobsExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAllJobsExResponse", p->soap_type() == SOAP_TYPE__ns1__GetAllJobsExResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetAllJobsExResponse * SOAP_FMAC4 soap_get__ns1__GetAllJobsExResponse(struct soap*, _ns1__GetAllJobsExResponse *, const char*, const char*);

inline int soap_read__ns1__GetAllJobsExResponse(struct soap *soap, _ns1__GetAllJobsExResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetAllJobsExResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetAllJobsExResponse(struct soap *soap, const char *URL, _ns1__GetAllJobsExResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetAllJobsExResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetAllJobsExResponse(struct soap *soap, _ns1__GetAllJobsExResponse *p)
{
	if (soap_read__ns1__GetAllJobsExResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetAllJobsEx_DEFINED
#define SOAP_TYPE__ns1__GetAllJobsEx_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAllJobsEx(struct soap*, const char*, int, const _ns1__GetAllJobsEx *, const char*);
SOAP_FMAC3 _ns1__GetAllJobsEx * SOAP_FMAC4 soap_in__ns1__GetAllJobsEx(struct soap*, const char*, _ns1__GetAllJobsEx *, const char*);
SOAP_FMAC1 _ns1__GetAllJobsEx * SOAP_FMAC2 soap_instantiate__ns1__GetAllJobsEx(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAllJobsEx * soap_new__ns1__GetAllJobsEx(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetAllJobsEx(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetAllJobsEx * soap_new_req__ns1__GetAllJobsEx(
	struct soap *soap)
{
	_ns1__GetAllJobsEx *_p = soap_new__ns1__GetAllJobsEx(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetAllJobsEx * soap_new_set__ns1__GetAllJobsEx(
	struct soap *soap)
{
	_ns1__GetAllJobsEx *_p = soap_new__ns1__GetAllJobsEx(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__GetAllJobsEx(struct soap *soap, _ns1__GetAllJobsEx const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAllJobsEx", p->soap_type() == SOAP_TYPE__ns1__GetAllJobsEx ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetAllJobsEx(struct soap *soap, const char *URL, _ns1__GetAllJobsEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAllJobsEx", p->soap_type() == SOAP_TYPE__ns1__GetAllJobsEx ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetAllJobsEx(struct soap *soap, const char *URL, _ns1__GetAllJobsEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAllJobsEx", p->soap_type() == SOAP_TYPE__ns1__GetAllJobsEx ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetAllJobsEx * SOAP_FMAC4 soap_get__ns1__GetAllJobsEx(struct soap*, _ns1__GetAllJobsEx *, const char*, const char*);

inline int soap_read__ns1__GetAllJobsEx(struct soap *soap, _ns1__GetAllJobsEx *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetAllJobsEx(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetAllJobsEx(struct soap *soap, const char *URL, _ns1__GetAllJobsEx *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetAllJobsEx(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetAllJobsEx(struct soap *soap, _ns1__GetAllJobsEx *p)
{
	if (soap_read__ns1__GetAllJobsEx(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetAllJobsResponse_DEFINED
#define SOAP_TYPE__ns1__GetAllJobsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAllJobsResponse(struct soap*, const char*, int, const _ns1__GetAllJobsResponse *, const char*);
SOAP_FMAC3 _ns1__GetAllJobsResponse * SOAP_FMAC4 soap_in__ns1__GetAllJobsResponse(struct soap*, const char*, _ns1__GetAllJobsResponse *, const char*);
SOAP_FMAC1 _ns1__GetAllJobsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAllJobsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAllJobsResponse * soap_new__ns1__GetAllJobsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetAllJobsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetAllJobsResponse * soap_new_req__ns1__GetAllJobsResponse(
	struct soap *soap,
	const std::vector<ns1__Job *> & GetAllJobsResult)
{
	_ns1__GetAllJobsResponse *_p = soap_new__ns1__GetAllJobsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetAllJobsResponse::GetAllJobsResult = GetAllJobsResult;
	}
	return _p;
}

inline _ns1__GetAllJobsResponse * soap_new_set__ns1__GetAllJobsResponse(
	struct soap *soap,
	const std::vector<ns1__Job *> & GetAllJobsResult)
{
	_ns1__GetAllJobsResponse *_p = soap_new__ns1__GetAllJobsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetAllJobsResponse::GetAllJobsResult = GetAllJobsResult;
	}
	return _p;
}

inline int soap_write__ns1__GetAllJobsResponse(struct soap *soap, _ns1__GetAllJobsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAllJobsResponse", p->soap_type() == SOAP_TYPE__ns1__GetAllJobsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetAllJobsResponse(struct soap *soap, const char *URL, _ns1__GetAllJobsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAllJobsResponse", p->soap_type() == SOAP_TYPE__ns1__GetAllJobsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetAllJobsResponse(struct soap *soap, const char *URL, _ns1__GetAllJobsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAllJobsResponse", p->soap_type() == SOAP_TYPE__ns1__GetAllJobsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetAllJobsResponse * SOAP_FMAC4 soap_get__ns1__GetAllJobsResponse(struct soap*, _ns1__GetAllJobsResponse *, const char*, const char*);

inline int soap_read__ns1__GetAllJobsResponse(struct soap *soap, _ns1__GetAllJobsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetAllJobsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetAllJobsResponse(struct soap *soap, const char *URL, _ns1__GetAllJobsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetAllJobsResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetAllJobsResponse(struct soap *soap, _ns1__GetAllJobsResponse *p)
{
	if (soap_read__ns1__GetAllJobsResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetAllJobs_DEFINED
#define SOAP_TYPE__ns1__GetAllJobs_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAllJobs(struct soap*, const char*, int, const _ns1__GetAllJobs *, const char*);
SOAP_FMAC3 _ns1__GetAllJobs * SOAP_FMAC4 soap_in__ns1__GetAllJobs(struct soap*, const char*, _ns1__GetAllJobs *, const char*);
SOAP_FMAC1 _ns1__GetAllJobs * SOAP_FMAC2 soap_instantiate__ns1__GetAllJobs(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAllJobs * soap_new__ns1__GetAllJobs(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetAllJobs(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetAllJobs * soap_new_req__ns1__GetAllJobs(
	struct soap *soap)
{
	_ns1__GetAllJobs *_p = soap_new__ns1__GetAllJobs(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetAllJobs * soap_new_set__ns1__GetAllJobs(
	struct soap *soap)
{
	_ns1__GetAllJobs *_p = soap_new__ns1__GetAllJobs(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__GetAllJobs(struct soap *soap, _ns1__GetAllJobs const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAllJobs", p->soap_type() == SOAP_TYPE__ns1__GetAllJobs ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetAllJobs(struct soap *soap, const char *URL, _ns1__GetAllJobs const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAllJobs", p->soap_type() == SOAP_TYPE__ns1__GetAllJobs ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetAllJobs(struct soap *soap, const char *URL, _ns1__GetAllJobs const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAllJobs", p->soap_type() == SOAP_TYPE__ns1__GetAllJobs ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetAllJobs * SOAP_FMAC4 soap_get__ns1__GetAllJobs(struct soap*, _ns1__GetAllJobs *, const char*, const char*);

inline int soap_read__ns1__GetAllJobs(struct soap *soap, _ns1__GetAllJobs *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetAllJobs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetAllJobs(struct soap *soap, const char *URL, _ns1__GetAllJobs *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetAllJobs(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetAllJobs(struct soap *soap, _ns1__GetAllJobs *p)
{
	if (soap_read__ns1__GetAllJobs(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetExpirationResponse_DEFINED
#define SOAP_TYPE__ns1__GetExpirationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetExpirationResponse(struct soap*, const char*, int, const _ns1__GetExpirationResponse *, const char*);
SOAP_FMAC3 _ns1__GetExpirationResponse * SOAP_FMAC4 soap_in__ns1__GetExpirationResponse(struct soap*, const char*, _ns1__GetExpirationResponse *, const char*);
SOAP_FMAC1 _ns1__GetExpirationResponse * SOAP_FMAC2 soap_instantiate__ns1__GetExpirationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetExpirationResponse * soap_new__ns1__GetExpirationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetExpirationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetExpirationResponse * soap_new_req__ns1__GetExpirationResponse(
	struct soap *soap,
	double GetExpirationResult)
{
	_ns1__GetExpirationResponse *_p = soap_new__ns1__GetExpirationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetExpirationResponse::GetExpirationResult = GetExpirationResult;
	}
	return _p;
}

inline _ns1__GetExpirationResponse * soap_new_set__ns1__GetExpirationResponse(
	struct soap *soap,
	double GetExpirationResult)
{
	_ns1__GetExpirationResponse *_p = soap_new__ns1__GetExpirationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetExpirationResponse::GetExpirationResult = GetExpirationResult;
	}
	return _p;
}

inline int soap_write__ns1__GetExpirationResponse(struct soap *soap, _ns1__GetExpirationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetExpirationResponse", p->soap_type() == SOAP_TYPE__ns1__GetExpirationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetExpirationResponse(struct soap *soap, const char *URL, _ns1__GetExpirationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetExpirationResponse", p->soap_type() == SOAP_TYPE__ns1__GetExpirationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetExpirationResponse(struct soap *soap, const char *URL, _ns1__GetExpirationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetExpirationResponse", p->soap_type() == SOAP_TYPE__ns1__GetExpirationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetExpirationResponse * SOAP_FMAC4 soap_get__ns1__GetExpirationResponse(struct soap*, _ns1__GetExpirationResponse *, const char*, const char*);

inline int soap_read__ns1__GetExpirationResponse(struct soap *soap, _ns1__GetExpirationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetExpirationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetExpirationResponse(struct soap *soap, const char *URL, _ns1__GetExpirationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetExpirationResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetExpirationResponse(struct soap *soap, _ns1__GetExpirationResponse *p)
{
	if (soap_read__ns1__GetExpirationResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetExpiration_DEFINED
#define SOAP_TYPE__ns1__GetExpiration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetExpiration(struct soap*, const char*, int, const _ns1__GetExpiration *, const char*);
SOAP_FMAC3 _ns1__GetExpiration * SOAP_FMAC4 soap_in__ns1__GetExpiration(struct soap*, const char*, _ns1__GetExpiration *, const char*);
SOAP_FMAC1 _ns1__GetExpiration * SOAP_FMAC2 soap_instantiate__ns1__GetExpiration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetExpiration * soap_new__ns1__GetExpiration(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetExpiration(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetExpiration * soap_new_req__ns1__GetExpiration(
	struct soap *soap,
	const std::string& jobID)
{
	_ns1__GetExpiration *_p = soap_new__ns1__GetExpiration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetExpiration::jobID = jobID;
	}
	return _p;
}

inline _ns1__GetExpiration * soap_new_set__ns1__GetExpiration(
	struct soap *soap,
	const std::string& jobID)
{
	_ns1__GetExpiration *_p = soap_new__ns1__GetExpiration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetExpiration::jobID = jobID;
	}
	return _p;
}

inline int soap_write__ns1__GetExpiration(struct soap *soap, _ns1__GetExpiration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetExpiration", p->soap_type() == SOAP_TYPE__ns1__GetExpiration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetExpiration(struct soap *soap, const char *URL, _ns1__GetExpiration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetExpiration", p->soap_type() == SOAP_TYPE__ns1__GetExpiration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetExpiration(struct soap *soap, const char *URL, _ns1__GetExpiration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetExpiration", p->soap_type() == SOAP_TYPE__ns1__GetExpiration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetExpiration * SOAP_FMAC4 soap_get__ns1__GetExpiration(struct soap*, _ns1__GetExpiration *, const char*, const char*);

inline int soap_read__ns1__GetExpiration(struct soap *soap, _ns1__GetExpiration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetExpiration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetExpiration(struct soap *soap, const char *URL, _ns1__GetExpiration *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetExpiration(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetExpiration(struct soap *soap, _ns1__GetExpiration *p)
{
	if (soap_read__ns1__GetExpiration(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BatchJobExResponse_DEFINED
#define SOAP_TYPE__ns1__BatchJobExResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BatchJobExResponse(struct soap*, const char*, int, const _ns1__BatchJobExResponse *, const char*);
SOAP_FMAC3 _ns1__BatchJobExResponse * SOAP_FMAC4 soap_in__ns1__BatchJobExResponse(struct soap*, const char*, _ns1__BatchJobExResponse *, const char*);
SOAP_FMAC1 _ns1__BatchJobExResponse * SOAP_FMAC2 soap_instantiate__ns1__BatchJobExResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BatchJobExResponse * soap_new__ns1__BatchJobExResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BatchJobExResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__BatchJobExResponse * soap_new_req__ns1__BatchJobExResponse(
	struct soap *soap,
	ns1__ArrayOfLuaValue *BatchJobExResult)
{
	_ns1__BatchJobExResponse *_p = soap_new__ns1__BatchJobExResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BatchJobExResponse::BatchJobExResult = BatchJobExResult;
	}
	return _p;
}

inline _ns1__BatchJobExResponse * soap_new_set__ns1__BatchJobExResponse(
	struct soap *soap,
	ns1__ArrayOfLuaValue *BatchJobExResult)
{
	_ns1__BatchJobExResponse *_p = soap_new__ns1__BatchJobExResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BatchJobExResponse::BatchJobExResult = BatchJobExResult;
	}
	return _p;
}

inline int soap_write__ns1__BatchJobExResponse(struct soap *soap, _ns1__BatchJobExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BatchJobExResponse", p->soap_type() == SOAP_TYPE__ns1__BatchJobExResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BatchJobExResponse(struct soap *soap, const char *URL, _ns1__BatchJobExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BatchJobExResponse", p->soap_type() == SOAP_TYPE__ns1__BatchJobExResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BatchJobExResponse(struct soap *soap, const char *URL, _ns1__BatchJobExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BatchJobExResponse", p->soap_type() == SOAP_TYPE__ns1__BatchJobExResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BatchJobExResponse * SOAP_FMAC4 soap_get__ns1__BatchJobExResponse(struct soap*, _ns1__BatchJobExResponse *, const char*, const char*);

inline int soap_read__ns1__BatchJobExResponse(struct soap *soap, _ns1__BatchJobExResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BatchJobExResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BatchJobExResponse(struct soap *soap, const char *URL, _ns1__BatchJobExResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__BatchJobExResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__BatchJobExResponse(struct soap *soap, _ns1__BatchJobExResponse *p)
{
	if (soap_read__ns1__BatchJobExResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BatchJobEx_DEFINED
#define SOAP_TYPE__ns1__BatchJobEx_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BatchJobEx(struct soap*, const char*, int, const _ns1__BatchJobEx *, const char*);
SOAP_FMAC3 _ns1__BatchJobEx * SOAP_FMAC4 soap_in__ns1__BatchJobEx(struct soap*, const char*, _ns1__BatchJobEx *, const char*);
SOAP_FMAC1 _ns1__BatchJobEx * SOAP_FMAC2 soap_instantiate__ns1__BatchJobEx(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BatchJobEx * soap_new__ns1__BatchJobEx(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BatchJobEx(soap, n, NULL, NULL, NULL);
}

inline _ns1__BatchJobEx * soap_new_req__ns1__BatchJobEx(
	struct soap *soap,
	ns1__Job *job,
	ns1__ScriptExecution *script)
{
	_ns1__BatchJobEx *_p = soap_new__ns1__BatchJobEx(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BatchJobEx::job = job;
		_p->_ns1__BatchJobEx::script = script;
	}
	return _p;
}

inline _ns1__BatchJobEx * soap_new_set__ns1__BatchJobEx(
	struct soap *soap,
	ns1__Job *job,
	ns1__ScriptExecution *script)
{
	_ns1__BatchJobEx *_p = soap_new__ns1__BatchJobEx(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BatchJobEx::job = job;
		_p->_ns1__BatchJobEx::script = script;
	}
	return _p;
}

inline int soap_write__ns1__BatchJobEx(struct soap *soap, _ns1__BatchJobEx const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BatchJobEx", p->soap_type() == SOAP_TYPE__ns1__BatchJobEx ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BatchJobEx(struct soap *soap, const char *URL, _ns1__BatchJobEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BatchJobEx", p->soap_type() == SOAP_TYPE__ns1__BatchJobEx ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BatchJobEx(struct soap *soap, const char *URL, _ns1__BatchJobEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BatchJobEx", p->soap_type() == SOAP_TYPE__ns1__BatchJobEx ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BatchJobEx * SOAP_FMAC4 soap_get__ns1__BatchJobEx(struct soap*, _ns1__BatchJobEx *, const char*, const char*);

inline int soap_read__ns1__BatchJobEx(struct soap *soap, _ns1__BatchJobEx *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BatchJobEx(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BatchJobEx(struct soap *soap, const char *URL, _ns1__BatchJobEx *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__BatchJobEx(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__BatchJobEx(struct soap *soap, _ns1__BatchJobEx *p)
{
	if (soap_read__ns1__BatchJobEx(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BatchJobResponse_DEFINED
#define SOAP_TYPE__ns1__BatchJobResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BatchJobResponse(struct soap*, const char*, int, const _ns1__BatchJobResponse *, const char*);
SOAP_FMAC3 _ns1__BatchJobResponse * SOAP_FMAC4 soap_in__ns1__BatchJobResponse(struct soap*, const char*, _ns1__BatchJobResponse *, const char*);
SOAP_FMAC1 _ns1__BatchJobResponse * SOAP_FMAC2 soap_instantiate__ns1__BatchJobResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BatchJobResponse * soap_new__ns1__BatchJobResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BatchJobResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__BatchJobResponse * soap_new_req__ns1__BatchJobResponse(
	struct soap *soap,
	const std::vector<ns1__LuaValue *> & BatchJobResult)
{
	_ns1__BatchJobResponse *_p = soap_new__ns1__BatchJobResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BatchJobResponse::BatchJobResult = BatchJobResult;
	}
	return _p;
}

inline _ns1__BatchJobResponse * soap_new_set__ns1__BatchJobResponse(
	struct soap *soap,
	const std::vector<ns1__LuaValue *> & BatchJobResult)
{
	_ns1__BatchJobResponse *_p = soap_new__ns1__BatchJobResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BatchJobResponse::BatchJobResult = BatchJobResult;
	}
	return _p;
}

inline int soap_write__ns1__BatchJobResponse(struct soap *soap, _ns1__BatchJobResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BatchJobResponse", p->soap_type() == SOAP_TYPE__ns1__BatchJobResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BatchJobResponse(struct soap *soap, const char *URL, _ns1__BatchJobResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BatchJobResponse", p->soap_type() == SOAP_TYPE__ns1__BatchJobResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BatchJobResponse(struct soap *soap, const char *URL, _ns1__BatchJobResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BatchJobResponse", p->soap_type() == SOAP_TYPE__ns1__BatchJobResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BatchJobResponse * SOAP_FMAC4 soap_get__ns1__BatchJobResponse(struct soap*, _ns1__BatchJobResponse *, const char*, const char*);

inline int soap_read__ns1__BatchJobResponse(struct soap *soap, _ns1__BatchJobResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BatchJobResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BatchJobResponse(struct soap *soap, const char *URL, _ns1__BatchJobResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__BatchJobResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__BatchJobResponse(struct soap *soap, _ns1__BatchJobResponse *p)
{
	if (soap_read__ns1__BatchJobResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BatchJob_DEFINED
#define SOAP_TYPE__ns1__BatchJob_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BatchJob(struct soap*, const char*, int, const _ns1__BatchJob *, const char*);
SOAP_FMAC3 _ns1__BatchJob * SOAP_FMAC4 soap_in__ns1__BatchJob(struct soap*, const char*, _ns1__BatchJob *, const char*);
SOAP_FMAC1 _ns1__BatchJob * SOAP_FMAC2 soap_instantiate__ns1__BatchJob(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BatchJob * soap_new__ns1__BatchJob(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BatchJob(soap, n, NULL, NULL, NULL);
}

inline _ns1__BatchJob * soap_new_req__ns1__BatchJob(
	struct soap *soap,
	ns1__Job *job,
	ns1__ScriptExecution *script)
{
	_ns1__BatchJob *_p = soap_new__ns1__BatchJob(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BatchJob::job = job;
		_p->_ns1__BatchJob::script = script;
	}
	return _p;
}

inline _ns1__BatchJob * soap_new_set__ns1__BatchJob(
	struct soap *soap,
	ns1__Job *job,
	ns1__ScriptExecution *script)
{
	_ns1__BatchJob *_p = soap_new__ns1__BatchJob(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BatchJob::job = job;
		_p->_ns1__BatchJob::script = script;
	}
	return _p;
}

inline int soap_write__ns1__BatchJob(struct soap *soap, _ns1__BatchJob const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BatchJob", p->soap_type() == SOAP_TYPE__ns1__BatchJob ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BatchJob(struct soap *soap, const char *URL, _ns1__BatchJob const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BatchJob", p->soap_type() == SOAP_TYPE__ns1__BatchJob ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BatchJob(struct soap *soap, const char *URL, _ns1__BatchJob const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BatchJob", p->soap_type() == SOAP_TYPE__ns1__BatchJob ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BatchJob * SOAP_FMAC4 soap_get__ns1__BatchJob(struct soap*, _ns1__BatchJob *, const char*, const char*);

inline int soap_read__ns1__BatchJob(struct soap *soap, _ns1__BatchJob *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BatchJob(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BatchJob(struct soap *soap, const char *URL, _ns1__BatchJob *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__BatchJob(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__BatchJob(struct soap *soap, _ns1__BatchJob *p)
{
	if (soap_read__ns1__BatchJob(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CloseJobResponse_DEFINED
#define SOAP_TYPE__ns1__CloseJobResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CloseJobResponse(struct soap*, const char*, int, const _ns1__CloseJobResponse *, const char*);
SOAP_FMAC3 _ns1__CloseJobResponse * SOAP_FMAC4 soap_in__ns1__CloseJobResponse(struct soap*, const char*, _ns1__CloseJobResponse *, const char*);
SOAP_FMAC1 _ns1__CloseJobResponse * SOAP_FMAC2 soap_instantiate__ns1__CloseJobResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CloseJobResponse * soap_new__ns1__CloseJobResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CloseJobResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CloseJobResponse * soap_new_req__ns1__CloseJobResponse(
	struct soap *soap)
{
	_ns1__CloseJobResponse *_p = soap_new__ns1__CloseJobResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CloseJobResponse * soap_new_set__ns1__CloseJobResponse(
	struct soap *soap)
{
	_ns1__CloseJobResponse *_p = soap_new__ns1__CloseJobResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__CloseJobResponse(struct soap *soap, _ns1__CloseJobResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseJobResponse", p->soap_type() == SOAP_TYPE__ns1__CloseJobResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CloseJobResponse(struct soap *soap, const char *URL, _ns1__CloseJobResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseJobResponse", p->soap_type() == SOAP_TYPE__ns1__CloseJobResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CloseJobResponse(struct soap *soap, const char *URL, _ns1__CloseJobResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseJobResponse", p->soap_type() == SOAP_TYPE__ns1__CloseJobResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CloseJobResponse * SOAP_FMAC4 soap_get__ns1__CloseJobResponse(struct soap*, _ns1__CloseJobResponse *, const char*, const char*);

inline int soap_read__ns1__CloseJobResponse(struct soap *soap, _ns1__CloseJobResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CloseJobResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CloseJobResponse(struct soap *soap, const char *URL, _ns1__CloseJobResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CloseJobResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CloseJobResponse(struct soap *soap, _ns1__CloseJobResponse *p)
{
	if (soap_read__ns1__CloseJobResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CloseJob_DEFINED
#define SOAP_TYPE__ns1__CloseJob_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CloseJob(struct soap*, const char*, int, const _ns1__CloseJob *, const char*);
SOAP_FMAC3 _ns1__CloseJob * SOAP_FMAC4 soap_in__ns1__CloseJob(struct soap*, const char*, _ns1__CloseJob *, const char*);
SOAP_FMAC1 _ns1__CloseJob * SOAP_FMAC2 soap_instantiate__ns1__CloseJob(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CloseJob * soap_new__ns1__CloseJob(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CloseJob(soap, n, NULL, NULL, NULL);
}

inline _ns1__CloseJob * soap_new_req__ns1__CloseJob(
	struct soap *soap,
	const std::string& jobID)
{
	_ns1__CloseJob *_p = soap_new__ns1__CloseJob(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CloseJob::jobID = jobID;
	}
	return _p;
}

inline _ns1__CloseJob * soap_new_set__ns1__CloseJob(
	struct soap *soap,
	const std::string& jobID)
{
	_ns1__CloseJob *_p = soap_new__ns1__CloseJob(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CloseJob::jobID = jobID;
	}
	return _p;
}

inline int soap_write__ns1__CloseJob(struct soap *soap, _ns1__CloseJob const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseJob", p->soap_type() == SOAP_TYPE__ns1__CloseJob ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CloseJob(struct soap *soap, const char *URL, _ns1__CloseJob const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseJob", p->soap_type() == SOAP_TYPE__ns1__CloseJob ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CloseJob(struct soap *soap, const char *URL, _ns1__CloseJob const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CloseJob", p->soap_type() == SOAP_TYPE__ns1__CloseJob ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CloseJob * SOAP_FMAC4 soap_get__ns1__CloseJob(struct soap*, _ns1__CloseJob *, const char*, const char*);

inline int soap_read__ns1__CloseJob(struct soap *soap, _ns1__CloseJob *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CloseJob(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CloseJob(struct soap *soap, const char *URL, _ns1__CloseJob *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CloseJob(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CloseJob(struct soap *soap, _ns1__CloseJob *p)
{
	if (soap_read__ns1__CloseJob(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ExecuteExResponse_DEFINED
#define SOAP_TYPE__ns1__ExecuteExResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ExecuteExResponse(struct soap*, const char*, int, const _ns1__ExecuteExResponse *, const char*);
SOAP_FMAC3 _ns1__ExecuteExResponse * SOAP_FMAC4 soap_in__ns1__ExecuteExResponse(struct soap*, const char*, _ns1__ExecuteExResponse *, const char*);
SOAP_FMAC1 _ns1__ExecuteExResponse * SOAP_FMAC2 soap_instantiate__ns1__ExecuteExResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ExecuteExResponse * soap_new__ns1__ExecuteExResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ExecuteExResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ExecuteExResponse * soap_new_req__ns1__ExecuteExResponse(
	struct soap *soap,
	ns1__ArrayOfLuaValue *ExecuteExResult)
{
	_ns1__ExecuteExResponse *_p = soap_new__ns1__ExecuteExResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ExecuteExResponse::ExecuteExResult = ExecuteExResult;
	}
	return _p;
}

inline _ns1__ExecuteExResponse * soap_new_set__ns1__ExecuteExResponse(
	struct soap *soap,
	ns1__ArrayOfLuaValue *ExecuteExResult)
{
	_ns1__ExecuteExResponse *_p = soap_new__ns1__ExecuteExResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ExecuteExResponse::ExecuteExResult = ExecuteExResult;
	}
	return _p;
}

inline int soap_write__ns1__ExecuteExResponse(struct soap *soap, _ns1__ExecuteExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExecuteExResponse", p->soap_type() == SOAP_TYPE__ns1__ExecuteExResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ExecuteExResponse(struct soap *soap, const char *URL, _ns1__ExecuteExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExecuteExResponse", p->soap_type() == SOAP_TYPE__ns1__ExecuteExResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ExecuteExResponse(struct soap *soap, const char *URL, _ns1__ExecuteExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExecuteExResponse", p->soap_type() == SOAP_TYPE__ns1__ExecuteExResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ExecuteExResponse * SOAP_FMAC4 soap_get__ns1__ExecuteExResponse(struct soap*, _ns1__ExecuteExResponse *, const char*, const char*);

inline int soap_read__ns1__ExecuteExResponse(struct soap *soap, _ns1__ExecuteExResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ExecuteExResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ExecuteExResponse(struct soap *soap, const char *URL, _ns1__ExecuteExResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ExecuteExResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ExecuteExResponse(struct soap *soap, _ns1__ExecuteExResponse *p)
{
	if (soap_read__ns1__ExecuteExResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ExecuteEx_DEFINED
#define SOAP_TYPE__ns1__ExecuteEx_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ExecuteEx(struct soap*, const char*, int, const _ns1__ExecuteEx *, const char*);
SOAP_FMAC3 _ns1__ExecuteEx * SOAP_FMAC4 soap_in__ns1__ExecuteEx(struct soap*, const char*, _ns1__ExecuteEx *, const char*);
SOAP_FMAC1 _ns1__ExecuteEx * SOAP_FMAC2 soap_instantiate__ns1__ExecuteEx(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ExecuteEx * soap_new__ns1__ExecuteEx(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ExecuteEx(soap, n, NULL, NULL, NULL);
}

inline _ns1__ExecuteEx * soap_new_req__ns1__ExecuteEx(
	struct soap *soap,
	const std::string& jobID,
	ns1__ScriptExecution *script)
{
	_ns1__ExecuteEx *_p = soap_new__ns1__ExecuteEx(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ExecuteEx::jobID = jobID;
		_p->_ns1__ExecuteEx::script = script;
	}
	return _p;
}

inline _ns1__ExecuteEx * soap_new_set__ns1__ExecuteEx(
	struct soap *soap,
	const std::string& jobID,
	ns1__ScriptExecution *script)
{
	_ns1__ExecuteEx *_p = soap_new__ns1__ExecuteEx(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ExecuteEx::jobID = jobID;
		_p->_ns1__ExecuteEx::script = script;
	}
	return _p;
}

inline int soap_write__ns1__ExecuteEx(struct soap *soap, _ns1__ExecuteEx const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExecuteEx", p->soap_type() == SOAP_TYPE__ns1__ExecuteEx ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ExecuteEx(struct soap *soap, const char *URL, _ns1__ExecuteEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExecuteEx", p->soap_type() == SOAP_TYPE__ns1__ExecuteEx ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ExecuteEx(struct soap *soap, const char *URL, _ns1__ExecuteEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExecuteEx", p->soap_type() == SOAP_TYPE__ns1__ExecuteEx ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ExecuteEx * SOAP_FMAC4 soap_get__ns1__ExecuteEx(struct soap*, _ns1__ExecuteEx *, const char*, const char*);

inline int soap_read__ns1__ExecuteEx(struct soap *soap, _ns1__ExecuteEx *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ExecuteEx(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ExecuteEx(struct soap *soap, const char *URL, _ns1__ExecuteEx *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ExecuteEx(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ExecuteEx(struct soap *soap, _ns1__ExecuteEx *p)
{
	if (soap_read__ns1__ExecuteEx(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ExecuteResponse_DEFINED
#define SOAP_TYPE__ns1__ExecuteResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ExecuteResponse(struct soap*, const char*, int, const _ns1__ExecuteResponse *, const char*);
SOAP_FMAC3 _ns1__ExecuteResponse * SOAP_FMAC4 soap_in__ns1__ExecuteResponse(struct soap*, const char*, _ns1__ExecuteResponse *, const char*);
SOAP_FMAC1 _ns1__ExecuteResponse * SOAP_FMAC2 soap_instantiate__ns1__ExecuteResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ExecuteResponse * soap_new__ns1__ExecuteResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ExecuteResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ExecuteResponse * soap_new_req__ns1__ExecuteResponse(
	struct soap *soap,
	const std::vector<ns1__LuaValue *> & ExecuteResult)
{
	_ns1__ExecuteResponse *_p = soap_new__ns1__ExecuteResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ExecuteResponse::ExecuteResult = ExecuteResult;
	}
	return _p;
}

inline _ns1__ExecuteResponse * soap_new_set__ns1__ExecuteResponse(
	struct soap *soap,
	const std::vector<ns1__LuaValue *> & ExecuteResult)
{
	_ns1__ExecuteResponse *_p = soap_new__ns1__ExecuteResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ExecuteResponse::ExecuteResult = ExecuteResult;
	}
	return _p;
}

inline int soap_write__ns1__ExecuteResponse(struct soap *soap, _ns1__ExecuteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExecuteResponse", p->soap_type() == SOAP_TYPE__ns1__ExecuteResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ExecuteResponse(struct soap *soap, const char *URL, _ns1__ExecuteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExecuteResponse", p->soap_type() == SOAP_TYPE__ns1__ExecuteResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ExecuteResponse(struct soap *soap, const char *URL, _ns1__ExecuteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExecuteResponse", p->soap_type() == SOAP_TYPE__ns1__ExecuteResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ExecuteResponse * SOAP_FMAC4 soap_get__ns1__ExecuteResponse(struct soap*, _ns1__ExecuteResponse *, const char*, const char*);

inline int soap_read__ns1__ExecuteResponse(struct soap *soap, _ns1__ExecuteResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ExecuteResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ExecuteResponse(struct soap *soap, const char *URL, _ns1__ExecuteResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ExecuteResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ExecuteResponse(struct soap *soap, _ns1__ExecuteResponse *p)
{
	if (soap_read__ns1__ExecuteResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__Execute_DEFINED
#define SOAP_TYPE__ns1__Execute_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Execute(struct soap*, const char*, int, const _ns1__Execute *, const char*);
SOAP_FMAC3 _ns1__Execute * SOAP_FMAC4 soap_in__ns1__Execute(struct soap*, const char*, _ns1__Execute *, const char*);
SOAP_FMAC1 _ns1__Execute * SOAP_FMAC2 soap_instantiate__ns1__Execute(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Execute * soap_new__ns1__Execute(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__Execute(soap, n, NULL, NULL, NULL);
}

inline _ns1__Execute * soap_new_req__ns1__Execute(
	struct soap *soap,
	const std::string& jobID,
	ns1__ScriptExecution *script)
{
	_ns1__Execute *_p = soap_new__ns1__Execute(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Execute::jobID = jobID;
		_p->_ns1__Execute::script = script;
	}
	return _p;
}

inline _ns1__Execute * soap_new_set__ns1__Execute(
	struct soap *soap,
	const std::string& jobID,
	ns1__ScriptExecution *script)
{
	_ns1__Execute *_p = soap_new__ns1__Execute(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Execute::jobID = jobID;
		_p->_ns1__Execute::script = script;
	}
	return _p;
}

inline int soap_write__ns1__Execute(struct soap *soap, _ns1__Execute const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Execute", p->soap_type() == SOAP_TYPE__ns1__Execute ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__Execute(struct soap *soap, const char *URL, _ns1__Execute const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Execute", p->soap_type() == SOAP_TYPE__ns1__Execute ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__Execute(struct soap *soap, const char *URL, _ns1__Execute const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Execute", p->soap_type() == SOAP_TYPE__ns1__Execute ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Execute * SOAP_FMAC4 soap_get__ns1__Execute(struct soap*, _ns1__Execute *, const char*, const char*);

inline int soap_read__ns1__Execute(struct soap *soap, _ns1__Execute *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__Execute(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__Execute(struct soap *soap, const char *URL, _ns1__Execute *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__Execute(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__Execute(struct soap *soap, _ns1__Execute *p)
{
	if (soap_read__ns1__Execute(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RenewLeaseResponse_DEFINED
#define SOAP_TYPE__ns1__RenewLeaseResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RenewLeaseResponse(struct soap*, const char*, int, const _ns1__RenewLeaseResponse *, const char*);
SOAP_FMAC3 _ns1__RenewLeaseResponse * SOAP_FMAC4 soap_in__ns1__RenewLeaseResponse(struct soap*, const char*, _ns1__RenewLeaseResponse *, const char*);
SOAP_FMAC1 _ns1__RenewLeaseResponse * SOAP_FMAC2 soap_instantiate__ns1__RenewLeaseResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RenewLeaseResponse * soap_new__ns1__RenewLeaseResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__RenewLeaseResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__RenewLeaseResponse * soap_new_req__ns1__RenewLeaseResponse(
	struct soap *soap,
	double RenewLeaseResult)
{
	_ns1__RenewLeaseResponse *_p = soap_new__ns1__RenewLeaseResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RenewLeaseResponse::RenewLeaseResult = RenewLeaseResult;
	}
	return _p;
}

inline _ns1__RenewLeaseResponse * soap_new_set__ns1__RenewLeaseResponse(
	struct soap *soap,
	double RenewLeaseResult)
{
	_ns1__RenewLeaseResponse *_p = soap_new__ns1__RenewLeaseResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RenewLeaseResponse::RenewLeaseResult = RenewLeaseResult;
	}
	return _p;
}

inline int soap_write__ns1__RenewLeaseResponse(struct soap *soap, _ns1__RenewLeaseResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RenewLeaseResponse", p->soap_type() == SOAP_TYPE__ns1__RenewLeaseResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__RenewLeaseResponse(struct soap *soap, const char *URL, _ns1__RenewLeaseResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RenewLeaseResponse", p->soap_type() == SOAP_TYPE__ns1__RenewLeaseResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__RenewLeaseResponse(struct soap *soap, const char *URL, _ns1__RenewLeaseResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RenewLeaseResponse", p->soap_type() == SOAP_TYPE__ns1__RenewLeaseResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RenewLeaseResponse * SOAP_FMAC4 soap_get__ns1__RenewLeaseResponse(struct soap*, _ns1__RenewLeaseResponse *, const char*, const char*);

inline int soap_read__ns1__RenewLeaseResponse(struct soap *soap, _ns1__RenewLeaseResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RenewLeaseResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__RenewLeaseResponse(struct soap *soap, const char *URL, _ns1__RenewLeaseResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__RenewLeaseResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__RenewLeaseResponse(struct soap *soap, _ns1__RenewLeaseResponse *p)
{
	if (soap_read__ns1__RenewLeaseResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RenewLease_DEFINED
#define SOAP_TYPE__ns1__RenewLease_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RenewLease(struct soap*, const char*, int, const _ns1__RenewLease *, const char*);
SOAP_FMAC3 _ns1__RenewLease * SOAP_FMAC4 soap_in__ns1__RenewLease(struct soap*, const char*, _ns1__RenewLease *, const char*);
SOAP_FMAC1 _ns1__RenewLease * SOAP_FMAC2 soap_instantiate__ns1__RenewLease(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RenewLease * soap_new__ns1__RenewLease(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__RenewLease(soap, n, NULL, NULL, NULL);
}

inline _ns1__RenewLease * soap_new_req__ns1__RenewLease(
	struct soap *soap,
	const std::string& jobID,
	double expirationInSeconds)
{
	_ns1__RenewLease *_p = soap_new__ns1__RenewLease(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RenewLease::jobID = jobID;
		_p->_ns1__RenewLease::expirationInSeconds = expirationInSeconds;
	}
	return _p;
}

inline _ns1__RenewLease * soap_new_set__ns1__RenewLease(
	struct soap *soap,
	const std::string& jobID,
	double expirationInSeconds)
{
	_ns1__RenewLease *_p = soap_new__ns1__RenewLease(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RenewLease::jobID = jobID;
		_p->_ns1__RenewLease::expirationInSeconds = expirationInSeconds;
	}
	return _p;
}

inline int soap_write__ns1__RenewLease(struct soap *soap, _ns1__RenewLease const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RenewLease", p->soap_type() == SOAP_TYPE__ns1__RenewLease ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__RenewLease(struct soap *soap, const char *URL, _ns1__RenewLease const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RenewLease", p->soap_type() == SOAP_TYPE__ns1__RenewLease ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__RenewLease(struct soap *soap, const char *URL, _ns1__RenewLease const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RenewLease", p->soap_type() == SOAP_TYPE__ns1__RenewLease ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RenewLease * SOAP_FMAC4 soap_get__ns1__RenewLease(struct soap*, _ns1__RenewLease *, const char*, const char*);

inline int soap_read__ns1__RenewLease(struct soap *soap, _ns1__RenewLease *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RenewLease(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__RenewLease(struct soap *soap, const char *URL, _ns1__RenewLease *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__RenewLease(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__RenewLease(struct soap *soap, _ns1__RenewLease *p)
{
	if (soap_read__ns1__RenewLease(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__OpenJobExResponse_DEFINED
#define SOAP_TYPE__ns1__OpenJobExResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OpenJobExResponse(struct soap*, const char*, int, const _ns1__OpenJobExResponse *, const char*);
SOAP_FMAC3 _ns1__OpenJobExResponse * SOAP_FMAC4 soap_in__ns1__OpenJobExResponse(struct soap*, const char*, _ns1__OpenJobExResponse *, const char*);
SOAP_FMAC1 _ns1__OpenJobExResponse * SOAP_FMAC2 soap_instantiate__ns1__OpenJobExResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OpenJobExResponse * soap_new__ns1__OpenJobExResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__OpenJobExResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__OpenJobExResponse * soap_new_req__ns1__OpenJobExResponse(
	struct soap *soap,
	ns1__ArrayOfLuaValue *OpenJobExResult)
{
	_ns1__OpenJobExResponse *_p = soap_new__ns1__OpenJobExResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OpenJobExResponse::OpenJobExResult = OpenJobExResult;
	}
	return _p;
}

inline _ns1__OpenJobExResponse * soap_new_set__ns1__OpenJobExResponse(
	struct soap *soap,
	ns1__ArrayOfLuaValue *OpenJobExResult)
{
	_ns1__OpenJobExResponse *_p = soap_new__ns1__OpenJobExResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OpenJobExResponse::OpenJobExResult = OpenJobExResult;
	}
	return _p;
}

inline int soap_write__ns1__OpenJobExResponse(struct soap *soap, _ns1__OpenJobExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenJobExResponse", p->soap_type() == SOAP_TYPE__ns1__OpenJobExResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OpenJobExResponse(struct soap *soap, const char *URL, _ns1__OpenJobExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenJobExResponse", p->soap_type() == SOAP_TYPE__ns1__OpenJobExResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OpenJobExResponse(struct soap *soap, const char *URL, _ns1__OpenJobExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenJobExResponse", p->soap_type() == SOAP_TYPE__ns1__OpenJobExResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OpenJobExResponse * SOAP_FMAC4 soap_get__ns1__OpenJobExResponse(struct soap*, _ns1__OpenJobExResponse *, const char*, const char*);

inline int soap_read__ns1__OpenJobExResponse(struct soap *soap, _ns1__OpenJobExResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__OpenJobExResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OpenJobExResponse(struct soap *soap, const char *URL, _ns1__OpenJobExResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__OpenJobExResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__OpenJobExResponse(struct soap *soap, _ns1__OpenJobExResponse *p)
{
	if (soap_read__ns1__OpenJobExResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__OpenJobResponse_DEFINED
#define SOAP_TYPE__ns1__OpenJobResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OpenJobResponse(struct soap*, const char*, int, const _ns1__OpenJobResponse *, const char*);
SOAP_FMAC3 _ns1__OpenJobResponse * SOAP_FMAC4 soap_in__ns1__OpenJobResponse(struct soap*, const char*, _ns1__OpenJobResponse *, const char*);
SOAP_FMAC1 _ns1__OpenJobResponse * SOAP_FMAC2 soap_instantiate__ns1__OpenJobResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OpenJobResponse * soap_new__ns1__OpenJobResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__OpenJobResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__OpenJobResponse * soap_new_req__ns1__OpenJobResponse(
	struct soap *soap)
{
	_ns1__OpenJobResponse *_p = soap_new__ns1__OpenJobResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__OpenJobResponse * soap_new_set__ns1__OpenJobResponse(
	struct soap *soap,
	const std::vector<ns1__LuaValue *> & OpenJobResult)
{
	_ns1__OpenJobResponse *_p = soap_new__ns1__OpenJobResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OpenJobResponse::OpenJobResult = OpenJobResult;
	}
	return _p;
}

inline int soap_write__ns1__OpenJobResponse(struct soap *soap, _ns1__OpenJobResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenJobResponse", p->soap_type() == SOAP_TYPE__ns1__OpenJobResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OpenJobResponse(struct soap *soap, const char *URL, _ns1__OpenJobResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenJobResponse", p->soap_type() == SOAP_TYPE__ns1__OpenJobResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OpenJobResponse(struct soap *soap, const char *URL, _ns1__OpenJobResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenJobResponse", p->soap_type() == SOAP_TYPE__ns1__OpenJobResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OpenJobResponse * SOAP_FMAC4 soap_get__ns1__OpenJobResponse(struct soap*, _ns1__OpenJobResponse *, const char*, const char*);

inline int soap_read__ns1__OpenJobResponse(struct soap *soap, _ns1__OpenJobResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__OpenJobResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OpenJobResponse(struct soap *soap, const char *URL, _ns1__OpenJobResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__OpenJobResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__OpenJobResponse(struct soap *soap, _ns1__OpenJobResponse *p)
{
	if (soap_read__ns1__OpenJobResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__OpenJobEx_DEFINED
#define SOAP_TYPE__ns1__OpenJobEx_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OpenJobEx(struct soap*, const char*, int, const _ns1__OpenJobEx *, const char*);
SOAP_FMAC3 _ns1__OpenJobEx * SOAP_FMAC4 soap_in__ns1__OpenJobEx(struct soap*, const char*, _ns1__OpenJobEx *, const char*);
SOAP_FMAC1 _ns1__OpenJobEx * SOAP_FMAC2 soap_instantiate__ns1__OpenJobEx(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OpenJobEx * soap_new__ns1__OpenJobEx(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__OpenJobEx(soap, n, NULL, NULL, NULL);
}

inline _ns1__OpenJobEx * soap_new_req__ns1__OpenJobEx(
	struct soap *soap,
	ns1__Job *job)
{
	_ns1__OpenJobEx *_p = soap_new__ns1__OpenJobEx(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OpenJobEx::job = job;
	}
	return _p;
}

inline _ns1__OpenJobEx * soap_new_set__ns1__OpenJobEx(
	struct soap *soap,
	ns1__Job *job,
	ns1__ScriptExecution *script)
{
	_ns1__OpenJobEx *_p = soap_new__ns1__OpenJobEx(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OpenJobEx::job = job;
		_p->_ns1__OpenJobEx::script = script;
	}
	return _p;
}

inline int soap_write__ns1__OpenJobEx(struct soap *soap, _ns1__OpenJobEx const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenJobEx", p->soap_type() == SOAP_TYPE__ns1__OpenJobEx ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OpenJobEx(struct soap *soap, const char *URL, _ns1__OpenJobEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenJobEx", p->soap_type() == SOAP_TYPE__ns1__OpenJobEx ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OpenJobEx(struct soap *soap, const char *URL, _ns1__OpenJobEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenJobEx", p->soap_type() == SOAP_TYPE__ns1__OpenJobEx ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OpenJobEx * SOAP_FMAC4 soap_get__ns1__OpenJobEx(struct soap*, _ns1__OpenJobEx *, const char*, const char*);

inline int soap_read__ns1__OpenJobEx(struct soap *soap, _ns1__OpenJobEx *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__OpenJobEx(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OpenJobEx(struct soap *soap, const char *URL, _ns1__OpenJobEx *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__OpenJobEx(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__OpenJobEx(struct soap *soap, _ns1__OpenJobEx *p)
{
	if (soap_read__ns1__OpenJobEx(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__OpenJob_DEFINED
#define SOAP_TYPE__ns1__OpenJob_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OpenJob(struct soap*, const char*, int, const _ns1__OpenJob *, const char*);
SOAP_FMAC3 _ns1__OpenJob * SOAP_FMAC4 soap_in__ns1__OpenJob(struct soap*, const char*, _ns1__OpenJob *, const char*);
SOAP_FMAC1 _ns1__OpenJob * SOAP_FMAC2 soap_instantiate__ns1__OpenJob(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OpenJob * soap_new__ns1__OpenJob(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__OpenJob(soap, n, NULL, NULL, NULL);
}

inline _ns1__OpenJob * soap_new_req__ns1__OpenJob(
	struct soap *soap,
	ns1__Job *job)
{
	_ns1__OpenJob *_p = soap_new__ns1__OpenJob(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OpenJob::job = job;
	}
	return _p;
}

inline _ns1__OpenJob * soap_new_set__ns1__OpenJob(
	struct soap *soap,
	ns1__Job *job,
	ns1__ScriptExecution *script)
{
	_ns1__OpenJob *_p = soap_new__ns1__OpenJob(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OpenJob::job = job;
		_p->_ns1__OpenJob::script = script;
	}
	return _p;
}

inline int soap_write__ns1__OpenJob(struct soap *soap, _ns1__OpenJob const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenJob", p->soap_type() == SOAP_TYPE__ns1__OpenJob ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OpenJob(struct soap *soap, const char *URL, _ns1__OpenJob const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenJob", p->soap_type() == SOAP_TYPE__ns1__OpenJob ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OpenJob(struct soap *soap, const char *URL, _ns1__OpenJob const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenJob", p->soap_type() == SOAP_TYPE__ns1__OpenJob ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OpenJob * SOAP_FMAC4 soap_get__ns1__OpenJob(struct soap*, _ns1__OpenJob *, const char*, const char*);

inline int soap_read__ns1__OpenJob(struct soap *soap, _ns1__OpenJob *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__OpenJob(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OpenJob(struct soap *soap, const char *URL, _ns1__OpenJob *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__OpenJob(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__OpenJob(struct soap *soap, _ns1__OpenJob *p)
{
	if (soap_read__ns1__OpenJob(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetStatusResponse_DEFINED
#define SOAP_TYPE__ns1__GetStatusResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetStatusResponse(struct soap*, const char*, int, const _ns1__GetStatusResponse *, const char*);
SOAP_FMAC3 _ns1__GetStatusResponse * SOAP_FMAC4 soap_in__ns1__GetStatusResponse(struct soap*, const char*, _ns1__GetStatusResponse *, const char*);
SOAP_FMAC1 _ns1__GetStatusResponse * SOAP_FMAC2 soap_instantiate__ns1__GetStatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetStatusResponse * soap_new__ns1__GetStatusResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetStatusResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetStatusResponse * soap_new_req__ns1__GetStatusResponse(
	struct soap *soap,
	ns1__Status *GetStatusResult)
{
	_ns1__GetStatusResponse *_p = soap_new__ns1__GetStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetStatusResponse::GetStatusResult = GetStatusResult;
	}
	return _p;
}

inline _ns1__GetStatusResponse * soap_new_set__ns1__GetStatusResponse(
	struct soap *soap,
	ns1__Status *GetStatusResult)
{
	_ns1__GetStatusResponse *_p = soap_new__ns1__GetStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetStatusResponse::GetStatusResult = GetStatusResult;
	}
	return _p;
}

inline int soap_write__ns1__GetStatusResponse(struct soap *soap, _ns1__GetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetStatusResponse", p->soap_type() == SOAP_TYPE__ns1__GetStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetStatusResponse(struct soap *soap, const char *URL, _ns1__GetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetStatusResponse", p->soap_type() == SOAP_TYPE__ns1__GetStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetStatusResponse(struct soap *soap, const char *URL, _ns1__GetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetStatusResponse", p->soap_type() == SOAP_TYPE__ns1__GetStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetStatusResponse * SOAP_FMAC4 soap_get__ns1__GetStatusResponse(struct soap*, _ns1__GetStatusResponse *, const char*, const char*);

inline int soap_read__ns1__GetStatusResponse(struct soap *soap, _ns1__GetStatusResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetStatusResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetStatusResponse(struct soap *soap, const char *URL, _ns1__GetStatusResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetStatusResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetStatusResponse(struct soap *soap, _ns1__GetStatusResponse *p)
{
	if (soap_read__ns1__GetStatusResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetStatus_DEFINED
#define SOAP_TYPE__ns1__GetStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetStatus(struct soap*, const char*, int, const _ns1__GetStatus *, const char*);
SOAP_FMAC3 _ns1__GetStatus * SOAP_FMAC4 soap_in__ns1__GetStatus(struct soap*, const char*, _ns1__GetStatus *, const char*);
SOAP_FMAC1 _ns1__GetStatus * SOAP_FMAC2 soap_instantiate__ns1__GetStatus(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetStatus * soap_new__ns1__GetStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetStatus(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetStatus * soap_new_req__ns1__GetStatus(
	struct soap *soap)
{
	_ns1__GetStatus *_p = soap_new__ns1__GetStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetStatus * soap_new_set__ns1__GetStatus(
	struct soap *soap)
{
	_ns1__GetStatus *_p = soap_new__ns1__GetStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__GetStatus(struct soap *soap, _ns1__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetStatus", p->soap_type() == SOAP_TYPE__ns1__GetStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetStatus(struct soap *soap, const char *URL, _ns1__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetStatus", p->soap_type() == SOAP_TYPE__ns1__GetStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetStatus(struct soap *soap, const char *URL, _ns1__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetStatus", p->soap_type() == SOAP_TYPE__ns1__GetStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetStatus * SOAP_FMAC4 soap_get__ns1__GetStatus(struct soap*, _ns1__GetStatus *, const char*, const char*);

inline int soap_read__ns1__GetStatus(struct soap *soap, _ns1__GetStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetStatus(struct soap *soap, const char *URL, _ns1__GetStatus *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetStatus(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetStatus(struct soap *soap, _ns1__GetStatus *p)
{
	if (soap_read__ns1__GetStatus(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetVersionResponse_DEFINED
#define SOAP_TYPE__ns1__GetVersionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVersionResponse(struct soap*, const char*, int, const _ns1__GetVersionResponse *, const char*);
SOAP_FMAC3 _ns1__GetVersionResponse * SOAP_FMAC4 soap_in__ns1__GetVersionResponse(struct soap*, const char*, _ns1__GetVersionResponse *, const char*);
SOAP_FMAC1 _ns1__GetVersionResponse * SOAP_FMAC2 soap_instantiate__ns1__GetVersionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVersionResponse * soap_new__ns1__GetVersionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetVersionResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetVersionResponse * soap_new_req__ns1__GetVersionResponse(
	struct soap *soap,
	const std::string& GetVersionResult)
{
	_ns1__GetVersionResponse *_p = soap_new__ns1__GetVersionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetVersionResponse::GetVersionResult = GetVersionResult;
	}
	return _p;
}

inline _ns1__GetVersionResponse * soap_new_set__ns1__GetVersionResponse(
	struct soap *soap,
	const std::string& GetVersionResult)
{
	_ns1__GetVersionResponse *_p = soap_new__ns1__GetVersionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetVersionResponse::GetVersionResult = GetVersionResult;
	}
	return _p;
}

inline int soap_write__ns1__GetVersionResponse(struct soap *soap, _ns1__GetVersionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetVersionResponse", p->soap_type() == SOAP_TYPE__ns1__GetVersionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetVersionResponse(struct soap *soap, const char *URL, _ns1__GetVersionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetVersionResponse", p->soap_type() == SOAP_TYPE__ns1__GetVersionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetVersionResponse(struct soap *soap, const char *URL, _ns1__GetVersionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetVersionResponse", p->soap_type() == SOAP_TYPE__ns1__GetVersionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetVersionResponse * SOAP_FMAC4 soap_get__ns1__GetVersionResponse(struct soap*, _ns1__GetVersionResponse *, const char*, const char*);

inline int soap_read__ns1__GetVersionResponse(struct soap *soap, _ns1__GetVersionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetVersionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetVersionResponse(struct soap *soap, const char *URL, _ns1__GetVersionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetVersionResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetVersionResponse(struct soap *soap, _ns1__GetVersionResponse *p)
{
	if (soap_read__ns1__GetVersionResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetVersion_DEFINED
#define SOAP_TYPE__ns1__GetVersion_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVersion(struct soap*, const char*, int, const _ns1__GetVersion *, const char*);
SOAP_FMAC3 _ns1__GetVersion * SOAP_FMAC4 soap_in__ns1__GetVersion(struct soap*, const char*, _ns1__GetVersion *, const char*);
SOAP_FMAC1 _ns1__GetVersion * SOAP_FMAC2 soap_instantiate__ns1__GetVersion(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVersion * soap_new__ns1__GetVersion(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetVersion(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetVersion * soap_new_req__ns1__GetVersion(
	struct soap *soap)
{
	_ns1__GetVersion *_p = soap_new__ns1__GetVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetVersion * soap_new_set__ns1__GetVersion(
	struct soap *soap)
{
	_ns1__GetVersion *_p = soap_new__ns1__GetVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__GetVersion(struct soap *soap, _ns1__GetVersion const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetVersion", p->soap_type() == SOAP_TYPE__ns1__GetVersion ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetVersion(struct soap *soap, const char *URL, _ns1__GetVersion const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetVersion", p->soap_type() == SOAP_TYPE__ns1__GetVersion ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetVersion(struct soap *soap, const char *URL, _ns1__GetVersion const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetVersion", p->soap_type() == SOAP_TYPE__ns1__GetVersion ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetVersion * SOAP_FMAC4 soap_get__ns1__GetVersion(struct soap*, _ns1__GetVersion *, const char*, const char*);

inline int soap_read__ns1__GetVersion(struct soap *soap, _ns1__GetVersion *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetVersion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetVersion(struct soap *soap, const char *URL, _ns1__GetVersion *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetVersion(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetVersion(struct soap *soap, _ns1__GetVersion *p)
{
	if (soap_read__ns1__GetVersion(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__HelloWorldResponse_DEFINED
#define SOAP_TYPE__ns1__HelloWorldResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__HelloWorldResponse(struct soap*, const char*, int, const _ns1__HelloWorldResponse *, const char*);
SOAP_FMAC3 _ns1__HelloWorldResponse * SOAP_FMAC4 soap_in__ns1__HelloWorldResponse(struct soap*, const char*, _ns1__HelloWorldResponse *, const char*);
SOAP_FMAC1 _ns1__HelloWorldResponse * SOAP_FMAC2 soap_instantiate__ns1__HelloWorldResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__HelloWorldResponse * soap_new__ns1__HelloWorldResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__HelloWorldResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__HelloWorldResponse * soap_new_req__ns1__HelloWorldResponse(
	struct soap *soap)
{
	_ns1__HelloWorldResponse *_p = soap_new__ns1__HelloWorldResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__HelloWorldResponse * soap_new_set__ns1__HelloWorldResponse(
	struct soap *soap,
	std::string *HelloWorldResult)
{
	_ns1__HelloWorldResponse *_p = soap_new__ns1__HelloWorldResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__HelloWorldResponse::HelloWorldResult = HelloWorldResult;
	}
	return _p;
}

inline int soap_write__ns1__HelloWorldResponse(struct soap *soap, _ns1__HelloWorldResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HelloWorldResponse", p->soap_type() == SOAP_TYPE__ns1__HelloWorldResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__HelloWorldResponse(struct soap *soap, const char *URL, _ns1__HelloWorldResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HelloWorldResponse", p->soap_type() == SOAP_TYPE__ns1__HelloWorldResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__HelloWorldResponse(struct soap *soap, const char *URL, _ns1__HelloWorldResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HelloWorldResponse", p->soap_type() == SOAP_TYPE__ns1__HelloWorldResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__HelloWorldResponse * SOAP_FMAC4 soap_get__ns1__HelloWorldResponse(struct soap*, _ns1__HelloWorldResponse *, const char*, const char*);

inline int soap_read__ns1__HelloWorldResponse(struct soap *soap, _ns1__HelloWorldResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__HelloWorldResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__HelloWorldResponse(struct soap *soap, const char *URL, _ns1__HelloWorldResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__HelloWorldResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__HelloWorldResponse(struct soap *soap, _ns1__HelloWorldResponse *p)
{
	if (soap_read__ns1__HelloWorldResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__HelloWorld_DEFINED
#define SOAP_TYPE__ns1__HelloWorld_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__HelloWorld(struct soap*, const char*, int, const _ns1__HelloWorld *, const char*);
SOAP_FMAC3 _ns1__HelloWorld * SOAP_FMAC4 soap_in__ns1__HelloWorld(struct soap*, const char*, _ns1__HelloWorld *, const char*);
SOAP_FMAC1 _ns1__HelloWorld * SOAP_FMAC2 soap_instantiate__ns1__HelloWorld(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__HelloWorld * soap_new__ns1__HelloWorld(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__HelloWorld(soap, n, NULL, NULL, NULL);
}

inline _ns1__HelloWorld * soap_new_req__ns1__HelloWorld(
	struct soap *soap)
{
	_ns1__HelloWorld *_p = soap_new__ns1__HelloWorld(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__HelloWorld * soap_new_set__ns1__HelloWorld(
	struct soap *soap)
{
	_ns1__HelloWorld *_p = soap_new__ns1__HelloWorld(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__HelloWorld(struct soap *soap, _ns1__HelloWorld const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HelloWorld", p->soap_type() == SOAP_TYPE__ns1__HelloWorld ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__HelloWorld(struct soap *soap, const char *URL, _ns1__HelloWorld const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HelloWorld", p->soap_type() == SOAP_TYPE__ns1__HelloWorld ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__HelloWorld(struct soap *soap, const char *URL, _ns1__HelloWorld const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HelloWorld", p->soap_type() == SOAP_TYPE__ns1__HelloWorld ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__HelloWorld * SOAP_FMAC4 soap_get__ns1__HelloWorld(struct soap*, _ns1__HelloWorld *, const char*, const char*);

inline int soap_read__ns1__HelloWorld(struct soap *soap, _ns1__HelloWorld *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__HelloWorld(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__HelloWorld(struct soap *soap, const char *URL, _ns1__HelloWorld *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__HelloWorld(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__HelloWorld(struct soap *soap, _ns1__HelloWorld *p)
{
	if (soap_read__ns1__HelloWorld(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__LuaValue_DEFINED
#define SOAP_TYPE_ns1__LuaValue_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LuaValue(struct soap*, const char*, int, const ns1__LuaValue *, const char*);
SOAP_FMAC3 ns1__LuaValue * SOAP_FMAC4 soap_in_ns1__LuaValue(struct soap*, const char*, ns1__LuaValue *, const char*);
SOAP_FMAC1 ns1__LuaValue * SOAP_FMAC2 soap_instantiate_ns1__LuaValue(struct soap*, int, const char*, const char*, size_t*);

inline ns1__LuaValue * soap_new_ns1__LuaValue(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__LuaValue(soap, n, NULL, NULL, NULL);
}

inline ns1__LuaValue * soap_new_req_ns1__LuaValue(
	struct soap *soap,
	enum ns1__LuaType type)
{
	ns1__LuaValue *_p = soap_new_ns1__LuaValue(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LuaValue::type = type;
	}
	return _p;
}

inline ns1__LuaValue * soap_new_set_ns1__LuaValue(
	struct soap *soap,
	enum ns1__LuaType type,
	std::string *value,
	ns1__ArrayOfLuaValue *table)
{
	ns1__LuaValue *_p = soap_new_ns1__LuaValue(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LuaValue::type = type;
		_p->ns1__LuaValue::value = value;
		_p->ns1__LuaValue::table = table;
	}
	return _p;
}

inline int soap_write_ns1__LuaValue(struct soap *soap, ns1__LuaValue const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LuaValue", p->soap_type() == SOAP_TYPE_ns1__LuaValue ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__LuaValue(struct soap *soap, const char *URL, ns1__LuaValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LuaValue", p->soap_type() == SOAP_TYPE_ns1__LuaValue ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__LuaValue(struct soap *soap, const char *URL, ns1__LuaValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LuaValue", p->soap_type() == SOAP_TYPE_ns1__LuaValue ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__LuaValue * SOAP_FMAC4 soap_get_ns1__LuaValue(struct soap*, ns1__LuaValue *, const char*, const char*);

inline int soap_read_ns1__LuaValue(struct soap *soap, ns1__LuaValue *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__LuaValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__LuaValue(struct soap *soap, const char *URL, ns1__LuaValue *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__LuaValue(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__LuaValue(struct soap *soap, ns1__LuaValue *p)
{
	if (soap_read_ns1__LuaValue(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfJob_DEFINED
#define SOAP_TYPE_ns1__ArrayOfJob_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfJob(struct soap*, const char*, int, const ns1__ArrayOfJob *, const char*);
SOAP_FMAC3 ns1__ArrayOfJob * SOAP_FMAC4 soap_in_ns1__ArrayOfJob(struct soap*, const char*, ns1__ArrayOfJob *, const char*);
SOAP_FMAC1 ns1__ArrayOfJob * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfJob(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfJob * soap_new_ns1__ArrayOfJob(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ArrayOfJob(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfJob * soap_new_req_ns1__ArrayOfJob(
	struct soap *soap)
{
	ns1__ArrayOfJob *_p = soap_new_ns1__ArrayOfJob(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfJob * soap_new_set_ns1__ArrayOfJob(
	struct soap *soap,
	const std::vector<ns1__Job *> & Job)
{
	ns1__ArrayOfJob *_p = soap_new_ns1__ArrayOfJob(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfJob::Job = Job;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfJob(struct soap *soap, ns1__ArrayOfJob const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfJob", p->soap_type() == SOAP_TYPE_ns1__ArrayOfJob ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfJob(struct soap *soap, const char *URL, ns1__ArrayOfJob const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfJob", p->soap_type() == SOAP_TYPE_ns1__ArrayOfJob ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfJob(struct soap *soap, const char *URL, ns1__ArrayOfJob const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfJob", p->soap_type() == SOAP_TYPE_ns1__ArrayOfJob ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfJob * SOAP_FMAC4 soap_get_ns1__ArrayOfJob(struct soap*, ns1__ArrayOfJob *, const char*, const char*);

inline int soap_read_ns1__ArrayOfJob(struct soap *soap, ns1__ArrayOfJob *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ArrayOfJob(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfJob(struct soap *soap, const char *URL, ns1__ArrayOfJob *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ArrayOfJob(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ArrayOfJob(struct soap *soap, ns1__ArrayOfJob *p)
{
	if (soap_read_ns1__ArrayOfJob(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfLuaValue_DEFINED
#define SOAP_TYPE_ns1__ArrayOfLuaValue_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfLuaValue(struct soap*, const char*, int, const ns1__ArrayOfLuaValue *, const char*);
SOAP_FMAC3 ns1__ArrayOfLuaValue * SOAP_FMAC4 soap_in_ns1__ArrayOfLuaValue(struct soap*, const char*, ns1__ArrayOfLuaValue *, const char*);
SOAP_FMAC1 ns1__ArrayOfLuaValue * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfLuaValue(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfLuaValue * soap_new_ns1__ArrayOfLuaValue(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ArrayOfLuaValue(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfLuaValue * soap_new_req_ns1__ArrayOfLuaValue(
	struct soap *soap)
{
	ns1__ArrayOfLuaValue *_p = soap_new_ns1__ArrayOfLuaValue(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfLuaValue * soap_new_set_ns1__ArrayOfLuaValue(
	struct soap *soap,
	const std::vector<ns1__LuaValue *> & LuaValue)
{
	ns1__ArrayOfLuaValue *_p = soap_new_ns1__ArrayOfLuaValue(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfLuaValue::LuaValue = LuaValue;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfLuaValue(struct soap *soap, ns1__ArrayOfLuaValue const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfLuaValue", p->soap_type() == SOAP_TYPE_ns1__ArrayOfLuaValue ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfLuaValue(struct soap *soap, const char *URL, ns1__ArrayOfLuaValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfLuaValue", p->soap_type() == SOAP_TYPE_ns1__ArrayOfLuaValue ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfLuaValue(struct soap *soap, const char *URL, ns1__ArrayOfLuaValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfLuaValue", p->soap_type() == SOAP_TYPE_ns1__ArrayOfLuaValue ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfLuaValue * SOAP_FMAC4 soap_get_ns1__ArrayOfLuaValue(struct soap*, ns1__ArrayOfLuaValue *, const char*, const char*);

inline int soap_read_ns1__ArrayOfLuaValue(struct soap *soap, ns1__ArrayOfLuaValue *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ArrayOfLuaValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfLuaValue(struct soap *soap, const char *URL, ns1__ArrayOfLuaValue *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ArrayOfLuaValue(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ArrayOfLuaValue(struct soap *soap, ns1__ArrayOfLuaValue *p)
{
	if (soap_read_ns1__ArrayOfLuaValue(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ScriptExecution_DEFINED
#define SOAP_TYPE_ns1__ScriptExecution_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ScriptExecution(struct soap*, const char*, int, const ns1__ScriptExecution *, const char*);
SOAP_FMAC3 ns1__ScriptExecution * SOAP_FMAC4 soap_in_ns1__ScriptExecution(struct soap*, const char*, ns1__ScriptExecution *, const char*);
SOAP_FMAC1 ns1__ScriptExecution * SOAP_FMAC2 soap_instantiate_ns1__ScriptExecution(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ScriptExecution * soap_new_ns1__ScriptExecution(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ScriptExecution(soap, n, NULL, NULL, NULL);
}

inline ns1__ScriptExecution * soap_new_req_ns1__ScriptExecution(
	struct soap *soap)
{
	ns1__ScriptExecution *_p = soap_new_ns1__ScriptExecution(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ScriptExecution * soap_new_set_ns1__ScriptExecution(
	struct soap *soap,
	std::string *name,
	std::string *script,
	ns1__ArrayOfLuaValue *arguments)
{
	ns1__ScriptExecution *_p = soap_new_ns1__ScriptExecution(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ScriptExecution::name = name;
		_p->ns1__ScriptExecution::script = script;
		_p->ns1__ScriptExecution::arguments = arguments;
	}
	return _p;
}

inline int soap_write_ns1__ScriptExecution(struct soap *soap, ns1__ScriptExecution const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScriptExecution", p->soap_type() == SOAP_TYPE_ns1__ScriptExecution ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ScriptExecution(struct soap *soap, const char *URL, ns1__ScriptExecution const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScriptExecution", p->soap_type() == SOAP_TYPE_ns1__ScriptExecution ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ScriptExecution(struct soap *soap, const char *URL, ns1__ScriptExecution const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScriptExecution", p->soap_type() == SOAP_TYPE_ns1__ScriptExecution ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ScriptExecution * SOAP_FMAC4 soap_get_ns1__ScriptExecution(struct soap*, ns1__ScriptExecution *, const char*, const char*);

inline int soap_read_ns1__ScriptExecution(struct soap *soap, ns1__ScriptExecution *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ScriptExecution(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ScriptExecution(struct soap *soap, const char *URL, ns1__ScriptExecution *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ScriptExecution(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ScriptExecution(struct soap *soap, ns1__ScriptExecution *p)
{
	if (soap_read_ns1__ScriptExecution(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__Job_DEFINED
#define SOAP_TYPE_ns1__Job_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Job(struct soap*, const char*, int, const ns1__Job *, const char*);
SOAP_FMAC3 ns1__Job * SOAP_FMAC4 soap_in_ns1__Job(struct soap*, const char*, ns1__Job *, const char*);
SOAP_FMAC1 ns1__Job * SOAP_FMAC2 soap_instantiate_ns1__Job(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Job * soap_new_ns1__Job(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Job(soap, n, NULL, NULL, NULL);
}

inline ns1__Job * soap_new_req_ns1__Job(
	struct soap *soap,
	const std::string& id,
	double expirationInSeconds,
	int category,
	double cores)
{
	ns1__Job *_p = soap_new_ns1__Job(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Job::id = id;
		_p->ns1__Job::expirationInSeconds = expirationInSeconds;
		_p->ns1__Job::category = category;
		_p->ns1__Job::cores = cores;
	}
	return _p;
}

inline ns1__Job * soap_new_set_ns1__Job(
	struct soap *soap,
	const std::string& id,
	double expirationInSeconds,
	int category,
	double cores)
{
	ns1__Job *_p = soap_new_ns1__Job(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Job::id = id;
		_p->ns1__Job::expirationInSeconds = expirationInSeconds;
		_p->ns1__Job::category = category;
		_p->ns1__Job::cores = cores;
	}
	return _p;
}

inline int soap_write_ns1__Job(struct soap *soap, ns1__Job const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Job", p->soap_type() == SOAP_TYPE_ns1__Job ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Job(struct soap *soap, const char *URL, ns1__Job const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Job", p->soap_type() == SOAP_TYPE_ns1__Job ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Job(struct soap *soap, const char *URL, ns1__Job const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Job", p->soap_type() == SOAP_TYPE_ns1__Job ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Job * SOAP_FMAC4 soap_get_ns1__Job(struct soap*, ns1__Job *, const char*, const char*);

inline int soap_read_ns1__Job(struct soap *soap, ns1__Job *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__Job(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Job(struct soap *soap, const char *URL, ns1__Job *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__Job(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__Job(struct soap *soap, ns1__Job *p)
{
	if (soap_read_ns1__Job(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__Status_DEFINED
#define SOAP_TYPE_ns1__Status_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Status(struct soap*, const char*, int, const ns1__Status *, const char*);
SOAP_FMAC3 ns1__Status * SOAP_FMAC4 soap_in_ns1__Status(struct soap*, const char*, ns1__Status *, const char*);
SOAP_FMAC1 ns1__Status * SOAP_FMAC2 soap_instantiate_ns1__Status(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Status * soap_new_ns1__Status(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Status(soap, n, NULL, NULL, NULL);
}

inline ns1__Status * soap_new_req_ns1__Status(
	struct soap *soap,
	int environmentCount)
{
	ns1__Status *_p = soap_new_ns1__Status(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Status::environmentCount = environmentCount;
	}
	return _p;
}

inline ns1__Status * soap_new_set_ns1__Status(
	struct soap *soap,
	std::string *version,
	int environmentCount)
{
	ns1__Status *_p = soap_new_ns1__Status(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Status::version = version;
		_p->ns1__Status::environmentCount = environmentCount;
	}
	return _p;
}

inline int soap_write_ns1__Status(struct soap *soap, ns1__Status const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Status", p->soap_type() == SOAP_TYPE_ns1__Status ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Status(struct soap *soap, const char *URL, ns1__Status const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Status", p->soap_type() == SOAP_TYPE_ns1__Status ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Status(struct soap *soap, const char *URL, ns1__Status const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Status", p->soap_type() == SOAP_TYPE_ns1__Status ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Status * SOAP_FMAC4 soap_get_ns1__Status(struct soap*, ns1__Status *, const char*, const char*);

inline int soap_read_ns1__Status(struct soap *soap, ns1__Status *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__Status(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Status(struct soap *soap, const char *URL, ns1__Status *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__Status(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__Status(struct soap *soap, ns1__Status *p)
{
	if (soap_read_ns1__Status(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__DiagEx__DEFINED
#define SOAP_TYPE___ns1__DiagEx__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DiagEx_(struct soap*, struct __ns1__DiagEx_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DiagEx_(struct soap*, const struct __ns1__DiagEx_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DiagEx_(struct soap*, const char*, int, const struct __ns1__DiagEx_ *, const char*);
SOAP_FMAC3 struct __ns1__DiagEx_ * SOAP_FMAC4 soap_in___ns1__DiagEx_(struct soap*, const char*, struct __ns1__DiagEx_ *, const char*);
SOAP_FMAC1 struct __ns1__DiagEx_ * SOAP_FMAC2 soap_instantiate___ns1__DiagEx_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DiagEx_ * soap_new___ns1__DiagEx_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DiagEx_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DiagEx_ * soap_new_req___ns1__DiagEx_(
	struct soap *soap)
{
	struct __ns1__DiagEx_ *_p = soap_new___ns1__DiagEx_(soap);
	if (_p)
	{	soap_default___ns1__DiagEx_(soap, _p);
	}
	return _p;
}

inline struct __ns1__DiagEx_ * soap_new_set___ns1__DiagEx_(
	struct soap *soap,
	_ns1__DiagEx *ns1__DiagEx)
{
	struct __ns1__DiagEx_ *_p = soap_new___ns1__DiagEx_(soap);
	if (_p)
	{	soap_default___ns1__DiagEx_(soap, _p);
		_p->ns1__DiagEx = ns1__DiagEx;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DiagEx_(struct soap*, const struct __ns1__DiagEx_ *, const char*, const char*);

inline int soap_write___ns1__DiagEx_(struct soap *soap, struct __ns1__DiagEx_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__DiagEx_(soap, p), 0) || soap_put___ns1__DiagEx_(soap, p, "-ns1:DiagEx", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DiagEx_(struct soap *soap, const char *URL, struct __ns1__DiagEx_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__DiagEx_(soap, p), 0) || soap_put___ns1__DiagEx_(soap, p, "-ns1:DiagEx", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DiagEx_(struct soap *soap, const char *URL, struct __ns1__DiagEx_ const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__DiagEx_(soap, p), 0) || soap_put___ns1__DiagEx_(soap, p, "-ns1:DiagEx", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DiagEx_ * SOAP_FMAC4 soap_get___ns1__DiagEx_(struct soap*, struct __ns1__DiagEx_ *, const char*, const char*);

inline int soap_read___ns1__DiagEx_(struct soap *soap, struct __ns1__DiagEx_ *p)
{
	if (p)
	{	soap_default___ns1__DiagEx_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__DiagEx_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DiagEx_(struct soap *soap, const char *URL, struct __ns1__DiagEx_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__DiagEx_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DiagEx_(struct soap *soap, struct __ns1__DiagEx_ *p)
{
	if (soap_read___ns1__DiagEx_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__Diag__DEFINED
#define SOAP_TYPE___ns1__Diag__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Diag_(struct soap*, struct __ns1__Diag_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Diag_(struct soap*, const struct __ns1__Diag_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Diag_(struct soap*, const char*, int, const struct __ns1__Diag_ *, const char*);
SOAP_FMAC3 struct __ns1__Diag_ * SOAP_FMAC4 soap_in___ns1__Diag_(struct soap*, const char*, struct __ns1__Diag_ *, const char*);
SOAP_FMAC1 struct __ns1__Diag_ * SOAP_FMAC2 soap_instantiate___ns1__Diag_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Diag_ * soap_new___ns1__Diag_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Diag_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Diag_ * soap_new_req___ns1__Diag_(
	struct soap *soap)
{
	struct __ns1__Diag_ *_p = soap_new___ns1__Diag_(soap);
	if (_p)
	{	soap_default___ns1__Diag_(soap, _p);
	}
	return _p;
}

inline struct __ns1__Diag_ * soap_new_set___ns1__Diag_(
	struct soap *soap,
	_ns1__Diag *ns1__Diag)
{
	struct __ns1__Diag_ *_p = soap_new___ns1__Diag_(soap);
	if (_p)
	{	soap_default___ns1__Diag_(soap, _p);
		_p->ns1__Diag = ns1__Diag;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Diag_(struct soap*, const struct __ns1__Diag_ *, const char*, const char*);

inline int soap_write___ns1__Diag_(struct soap *soap, struct __ns1__Diag_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__Diag_(soap, p), 0) || soap_put___ns1__Diag_(soap, p, "-ns1:Diag", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Diag_(struct soap *soap, const char *URL, struct __ns1__Diag_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__Diag_(soap, p), 0) || soap_put___ns1__Diag_(soap, p, "-ns1:Diag", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Diag_(struct soap *soap, const char *URL, struct __ns1__Diag_ const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__Diag_(soap, p), 0) || soap_put___ns1__Diag_(soap, p, "-ns1:Diag", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Diag_ * SOAP_FMAC4 soap_get___ns1__Diag_(struct soap*, struct __ns1__Diag_ *, const char*, const char*);

inline int soap_read___ns1__Diag_(struct soap *soap, struct __ns1__Diag_ *p)
{
	if (p)
	{	soap_default___ns1__Diag_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__Diag_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Diag_(struct soap *soap, const char *URL, struct __ns1__Diag_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__Diag_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__Diag_(struct soap *soap, struct __ns1__Diag_ *p)
{
	if (soap_read___ns1__Diag_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CloseAllJobs__DEFINED
#define SOAP_TYPE___ns1__CloseAllJobs__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CloseAllJobs_(struct soap*, struct __ns1__CloseAllJobs_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CloseAllJobs_(struct soap*, const struct __ns1__CloseAllJobs_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CloseAllJobs_(struct soap*, const char*, int, const struct __ns1__CloseAllJobs_ *, const char*);
SOAP_FMAC3 struct __ns1__CloseAllJobs_ * SOAP_FMAC4 soap_in___ns1__CloseAllJobs_(struct soap*, const char*, struct __ns1__CloseAllJobs_ *, const char*);
SOAP_FMAC1 struct __ns1__CloseAllJobs_ * SOAP_FMAC2 soap_instantiate___ns1__CloseAllJobs_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CloseAllJobs_ * soap_new___ns1__CloseAllJobs_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CloseAllJobs_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CloseAllJobs_ * soap_new_req___ns1__CloseAllJobs_(
	struct soap *soap)
{
	struct __ns1__CloseAllJobs_ *_p = soap_new___ns1__CloseAllJobs_(soap);
	if (_p)
	{	soap_default___ns1__CloseAllJobs_(soap, _p);
	}
	return _p;
}

inline struct __ns1__CloseAllJobs_ * soap_new_set___ns1__CloseAllJobs_(
	struct soap *soap,
	_ns1__CloseAllJobs *ns1__CloseAllJobs)
{
	struct __ns1__CloseAllJobs_ *_p = soap_new___ns1__CloseAllJobs_(soap);
	if (_p)
	{	soap_default___ns1__CloseAllJobs_(soap, _p);
		_p->ns1__CloseAllJobs = ns1__CloseAllJobs;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CloseAllJobs_(struct soap*, const struct __ns1__CloseAllJobs_ *, const char*, const char*);

inline int soap_write___ns1__CloseAllJobs_(struct soap *soap, struct __ns1__CloseAllJobs_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CloseAllJobs_(soap, p), 0) || soap_put___ns1__CloseAllJobs_(soap, p, "-ns1:CloseAllJobs", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CloseAllJobs_(struct soap *soap, const char *URL, struct __ns1__CloseAllJobs_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__CloseAllJobs_(soap, p), 0) || soap_put___ns1__CloseAllJobs_(soap, p, "-ns1:CloseAllJobs", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CloseAllJobs_(struct soap *soap, const char *URL, struct __ns1__CloseAllJobs_ const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__CloseAllJobs_(soap, p), 0) || soap_put___ns1__CloseAllJobs_(soap, p, "-ns1:CloseAllJobs", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CloseAllJobs_ * SOAP_FMAC4 soap_get___ns1__CloseAllJobs_(struct soap*, struct __ns1__CloseAllJobs_ *, const char*, const char*);

inline int soap_read___ns1__CloseAllJobs_(struct soap *soap, struct __ns1__CloseAllJobs_ *p)
{
	if (p)
	{	soap_default___ns1__CloseAllJobs_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CloseAllJobs_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CloseAllJobs_(struct soap *soap, const char *URL, struct __ns1__CloseAllJobs_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CloseAllJobs_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CloseAllJobs_(struct soap *soap, struct __ns1__CloseAllJobs_ *p)
{
	if (soap_read___ns1__CloseAllJobs_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CloseExpiredJobs__DEFINED
#define SOAP_TYPE___ns1__CloseExpiredJobs__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CloseExpiredJobs_(struct soap*, struct __ns1__CloseExpiredJobs_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CloseExpiredJobs_(struct soap*, const struct __ns1__CloseExpiredJobs_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CloseExpiredJobs_(struct soap*, const char*, int, const struct __ns1__CloseExpiredJobs_ *, const char*);
SOAP_FMAC3 struct __ns1__CloseExpiredJobs_ * SOAP_FMAC4 soap_in___ns1__CloseExpiredJobs_(struct soap*, const char*, struct __ns1__CloseExpiredJobs_ *, const char*);
SOAP_FMAC1 struct __ns1__CloseExpiredJobs_ * SOAP_FMAC2 soap_instantiate___ns1__CloseExpiredJobs_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CloseExpiredJobs_ * soap_new___ns1__CloseExpiredJobs_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CloseExpiredJobs_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CloseExpiredJobs_ * soap_new_req___ns1__CloseExpiredJobs_(
	struct soap *soap)
{
	struct __ns1__CloseExpiredJobs_ *_p = soap_new___ns1__CloseExpiredJobs_(soap);
	if (_p)
	{	soap_default___ns1__CloseExpiredJobs_(soap, _p);
	}
	return _p;
}

inline struct __ns1__CloseExpiredJobs_ * soap_new_set___ns1__CloseExpiredJobs_(
	struct soap *soap,
	_ns1__CloseExpiredJobs *ns1__CloseExpiredJobs)
{
	struct __ns1__CloseExpiredJobs_ *_p = soap_new___ns1__CloseExpiredJobs_(soap);
	if (_p)
	{	soap_default___ns1__CloseExpiredJobs_(soap, _p);
		_p->ns1__CloseExpiredJobs = ns1__CloseExpiredJobs;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CloseExpiredJobs_(struct soap*, const struct __ns1__CloseExpiredJobs_ *, const char*, const char*);

inline int soap_write___ns1__CloseExpiredJobs_(struct soap *soap, struct __ns1__CloseExpiredJobs_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CloseExpiredJobs_(soap, p), 0) || soap_put___ns1__CloseExpiredJobs_(soap, p, "-ns1:CloseExpiredJobs", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CloseExpiredJobs_(struct soap *soap, const char *URL, struct __ns1__CloseExpiredJobs_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__CloseExpiredJobs_(soap, p), 0) || soap_put___ns1__CloseExpiredJobs_(soap, p, "-ns1:CloseExpiredJobs", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CloseExpiredJobs_(struct soap *soap, const char *URL, struct __ns1__CloseExpiredJobs_ const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__CloseExpiredJobs_(soap, p), 0) || soap_put___ns1__CloseExpiredJobs_(soap, p, "-ns1:CloseExpiredJobs", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CloseExpiredJobs_ * SOAP_FMAC4 soap_get___ns1__CloseExpiredJobs_(struct soap*, struct __ns1__CloseExpiredJobs_ *, const char*, const char*);

inline int soap_read___ns1__CloseExpiredJobs_(struct soap *soap, struct __ns1__CloseExpiredJobs_ *p)
{
	if (p)
	{	soap_default___ns1__CloseExpiredJobs_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CloseExpiredJobs_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CloseExpiredJobs_(struct soap *soap, const char *URL, struct __ns1__CloseExpiredJobs_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CloseExpiredJobs_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CloseExpiredJobs_(struct soap *soap, struct __ns1__CloseExpiredJobs_ *p)
{
	if (soap_read___ns1__CloseExpiredJobs_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetAllJobsEx__DEFINED
#define SOAP_TYPE___ns1__GetAllJobsEx__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAllJobsEx_(struct soap*, struct __ns1__GetAllJobsEx_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAllJobsEx_(struct soap*, const struct __ns1__GetAllJobsEx_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAllJobsEx_(struct soap*, const char*, int, const struct __ns1__GetAllJobsEx_ *, const char*);
SOAP_FMAC3 struct __ns1__GetAllJobsEx_ * SOAP_FMAC4 soap_in___ns1__GetAllJobsEx_(struct soap*, const char*, struct __ns1__GetAllJobsEx_ *, const char*);
SOAP_FMAC1 struct __ns1__GetAllJobsEx_ * SOAP_FMAC2 soap_instantiate___ns1__GetAllJobsEx_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAllJobsEx_ * soap_new___ns1__GetAllJobsEx_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetAllJobsEx_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetAllJobsEx_ * soap_new_req___ns1__GetAllJobsEx_(
	struct soap *soap)
{
	struct __ns1__GetAllJobsEx_ *_p = soap_new___ns1__GetAllJobsEx_(soap);
	if (_p)
	{	soap_default___ns1__GetAllJobsEx_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetAllJobsEx_ * soap_new_set___ns1__GetAllJobsEx_(
	struct soap *soap,
	_ns1__GetAllJobsEx *ns1__GetAllJobsEx)
{
	struct __ns1__GetAllJobsEx_ *_p = soap_new___ns1__GetAllJobsEx_(soap);
	if (_p)
	{	soap_default___ns1__GetAllJobsEx_(soap, _p);
		_p->ns1__GetAllJobsEx = ns1__GetAllJobsEx;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAllJobsEx_(struct soap*, const struct __ns1__GetAllJobsEx_ *, const char*, const char*);

inline int soap_write___ns1__GetAllJobsEx_(struct soap *soap, struct __ns1__GetAllJobsEx_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetAllJobsEx_(soap, p), 0) || soap_put___ns1__GetAllJobsEx_(soap, p, "-ns1:GetAllJobsEx", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetAllJobsEx_(struct soap *soap, const char *URL, struct __ns1__GetAllJobsEx_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetAllJobsEx_(soap, p), 0) || soap_put___ns1__GetAllJobsEx_(soap, p, "-ns1:GetAllJobsEx", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetAllJobsEx_(struct soap *soap, const char *URL, struct __ns1__GetAllJobsEx_ const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetAllJobsEx_(soap, p), 0) || soap_put___ns1__GetAllJobsEx_(soap, p, "-ns1:GetAllJobsEx", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetAllJobsEx_ * SOAP_FMAC4 soap_get___ns1__GetAllJobsEx_(struct soap*, struct __ns1__GetAllJobsEx_ *, const char*, const char*);

inline int soap_read___ns1__GetAllJobsEx_(struct soap *soap, struct __ns1__GetAllJobsEx_ *p)
{
	if (p)
	{	soap_default___ns1__GetAllJobsEx_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetAllJobsEx_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetAllJobsEx_(struct soap *soap, const char *URL, struct __ns1__GetAllJobsEx_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetAllJobsEx_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetAllJobsEx_(struct soap *soap, struct __ns1__GetAllJobsEx_ *p)
{
	if (soap_read___ns1__GetAllJobsEx_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetAllJobs__DEFINED
#define SOAP_TYPE___ns1__GetAllJobs__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAllJobs_(struct soap*, struct __ns1__GetAllJobs_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAllJobs_(struct soap*, const struct __ns1__GetAllJobs_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAllJobs_(struct soap*, const char*, int, const struct __ns1__GetAllJobs_ *, const char*);
SOAP_FMAC3 struct __ns1__GetAllJobs_ * SOAP_FMAC4 soap_in___ns1__GetAllJobs_(struct soap*, const char*, struct __ns1__GetAllJobs_ *, const char*);
SOAP_FMAC1 struct __ns1__GetAllJobs_ * SOAP_FMAC2 soap_instantiate___ns1__GetAllJobs_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAllJobs_ * soap_new___ns1__GetAllJobs_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetAllJobs_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetAllJobs_ * soap_new_req___ns1__GetAllJobs_(
	struct soap *soap)
{
	struct __ns1__GetAllJobs_ *_p = soap_new___ns1__GetAllJobs_(soap);
	if (_p)
	{	soap_default___ns1__GetAllJobs_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetAllJobs_ * soap_new_set___ns1__GetAllJobs_(
	struct soap *soap,
	_ns1__GetAllJobs *ns1__GetAllJobs)
{
	struct __ns1__GetAllJobs_ *_p = soap_new___ns1__GetAllJobs_(soap);
	if (_p)
	{	soap_default___ns1__GetAllJobs_(soap, _p);
		_p->ns1__GetAllJobs = ns1__GetAllJobs;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAllJobs_(struct soap*, const struct __ns1__GetAllJobs_ *, const char*, const char*);

inline int soap_write___ns1__GetAllJobs_(struct soap *soap, struct __ns1__GetAllJobs_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetAllJobs_(soap, p), 0) || soap_put___ns1__GetAllJobs_(soap, p, "-ns1:GetAllJobs", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetAllJobs_(struct soap *soap, const char *URL, struct __ns1__GetAllJobs_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetAllJobs_(soap, p), 0) || soap_put___ns1__GetAllJobs_(soap, p, "-ns1:GetAllJobs", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetAllJobs_(struct soap *soap, const char *URL, struct __ns1__GetAllJobs_ const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetAllJobs_(soap, p), 0) || soap_put___ns1__GetAllJobs_(soap, p, "-ns1:GetAllJobs", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetAllJobs_ * SOAP_FMAC4 soap_get___ns1__GetAllJobs_(struct soap*, struct __ns1__GetAllJobs_ *, const char*, const char*);

inline int soap_read___ns1__GetAllJobs_(struct soap *soap, struct __ns1__GetAllJobs_ *p)
{
	if (p)
	{	soap_default___ns1__GetAllJobs_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetAllJobs_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetAllJobs_(struct soap *soap, const char *URL, struct __ns1__GetAllJobs_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetAllJobs_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetAllJobs_(struct soap *soap, struct __ns1__GetAllJobs_ *p)
{
	if (soap_read___ns1__GetAllJobs_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetExpiration__DEFINED
#define SOAP_TYPE___ns1__GetExpiration__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetExpiration_(struct soap*, struct __ns1__GetExpiration_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetExpiration_(struct soap*, const struct __ns1__GetExpiration_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetExpiration_(struct soap*, const char*, int, const struct __ns1__GetExpiration_ *, const char*);
SOAP_FMAC3 struct __ns1__GetExpiration_ * SOAP_FMAC4 soap_in___ns1__GetExpiration_(struct soap*, const char*, struct __ns1__GetExpiration_ *, const char*);
SOAP_FMAC1 struct __ns1__GetExpiration_ * SOAP_FMAC2 soap_instantiate___ns1__GetExpiration_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetExpiration_ * soap_new___ns1__GetExpiration_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetExpiration_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetExpiration_ * soap_new_req___ns1__GetExpiration_(
	struct soap *soap)
{
	struct __ns1__GetExpiration_ *_p = soap_new___ns1__GetExpiration_(soap);
	if (_p)
	{	soap_default___ns1__GetExpiration_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetExpiration_ * soap_new_set___ns1__GetExpiration_(
	struct soap *soap,
	_ns1__GetExpiration *ns1__GetExpiration)
{
	struct __ns1__GetExpiration_ *_p = soap_new___ns1__GetExpiration_(soap);
	if (_p)
	{	soap_default___ns1__GetExpiration_(soap, _p);
		_p->ns1__GetExpiration = ns1__GetExpiration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetExpiration_(struct soap*, const struct __ns1__GetExpiration_ *, const char*, const char*);

inline int soap_write___ns1__GetExpiration_(struct soap *soap, struct __ns1__GetExpiration_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetExpiration_(soap, p), 0) || soap_put___ns1__GetExpiration_(soap, p, "-ns1:GetExpiration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetExpiration_(struct soap *soap, const char *URL, struct __ns1__GetExpiration_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetExpiration_(soap, p), 0) || soap_put___ns1__GetExpiration_(soap, p, "-ns1:GetExpiration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetExpiration_(struct soap *soap, const char *URL, struct __ns1__GetExpiration_ const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetExpiration_(soap, p), 0) || soap_put___ns1__GetExpiration_(soap, p, "-ns1:GetExpiration", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetExpiration_ * SOAP_FMAC4 soap_get___ns1__GetExpiration_(struct soap*, struct __ns1__GetExpiration_ *, const char*, const char*);

inline int soap_read___ns1__GetExpiration_(struct soap *soap, struct __ns1__GetExpiration_ *p)
{
	if (p)
	{	soap_default___ns1__GetExpiration_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetExpiration_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetExpiration_(struct soap *soap, const char *URL, struct __ns1__GetExpiration_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetExpiration_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetExpiration_(struct soap *soap, struct __ns1__GetExpiration_ *p)
{
	if (soap_read___ns1__GetExpiration_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BatchJobEx__DEFINED
#define SOAP_TYPE___ns1__BatchJobEx__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BatchJobEx_(struct soap*, struct __ns1__BatchJobEx_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BatchJobEx_(struct soap*, const struct __ns1__BatchJobEx_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BatchJobEx_(struct soap*, const char*, int, const struct __ns1__BatchJobEx_ *, const char*);
SOAP_FMAC3 struct __ns1__BatchJobEx_ * SOAP_FMAC4 soap_in___ns1__BatchJobEx_(struct soap*, const char*, struct __ns1__BatchJobEx_ *, const char*);
SOAP_FMAC1 struct __ns1__BatchJobEx_ * SOAP_FMAC2 soap_instantiate___ns1__BatchJobEx_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BatchJobEx_ * soap_new___ns1__BatchJobEx_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BatchJobEx_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BatchJobEx_ * soap_new_req___ns1__BatchJobEx_(
	struct soap *soap)
{
	struct __ns1__BatchJobEx_ *_p = soap_new___ns1__BatchJobEx_(soap);
	if (_p)
	{	soap_default___ns1__BatchJobEx_(soap, _p);
	}
	return _p;
}

inline struct __ns1__BatchJobEx_ * soap_new_set___ns1__BatchJobEx_(
	struct soap *soap,
	_ns1__BatchJobEx *ns1__BatchJobEx)
{
	struct __ns1__BatchJobEx_ *_p = soap_new___ns1__BatchJobEx_(soap);
	if (_p)
	{	soap_default___ns1__BatchJobEx_(soap, _p);
		_p->ns1__BatchJobEx = ns1__BatchJobEx;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BatchJobEx_(struct soap*, const struct __ns1__BatchJobEx_ *, const char*, const char*);

inline int soap_write___ns1__BatchJobEx_(struct soap *soap, struct __ns1__BatchJobEx_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BatchJobEx_(soap, p), 0) || soap_put___ns1__BatchJobEx_(soap, p, "-ns1:BatchJobEx", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BatchJobEx_(struct soap *soap, const char *URL, struct __ns1__BatchJobEx_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__BatchJobEx_(soap, p), 0) || soap_put___ns1__BatchJobEx_(soap, p, "-ns1:BatchJobEx", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BatchJobEx_(struct soap *soap, const char *URL, struct __ns1__BatchJobEx_ const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__BatchJobEx_(soap, p), 0) || soap_put___ns1__BatchJobEx_(soap, p, "-ns1:BatchJobEx", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BatchJobEx_ * SOAP_FMAC4 soap_get___ns1__BatchJobEx_(struct soap*, struct __ns1__BatchJobEx_ *, const char*, const char*);

inline int soap_read___ns1__BatchJobEx_(struct soap *soap, struct __ns1__BatchJobEx_ *p)
{
	if (p)
	{	soap_default___ns1__BatchJobEx_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BatchJobEx_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BatchJobEx_(struct soap *soap, const char *URL, struct __ns1__BatchJobEx_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BatchJobEx_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BatchJobEx_(struct soap *soap, struct __ns1__BatchJobEx_ *p)
{
	if (soap_read___ns1__BatchJobEx_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BatchJob__DEFINED
#define SOAP_TYPE___ns1__BatchJob__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BatchJob_(struct soap*, struct __ns1__BatchJob_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BatchJob_(struct soap*, const struct __ns1__BatchJob_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BatchJob_(struct soap*, const char*, int, const struct __ns1__BatchJob_ *, const char*);
SOAP_FMAC3 struct __ns1__BatchJob_ * SOAP_FMAC4 soap_in___ns1__BatchJob_(struct soap*, const char*, struct __ns1__BatchJob_ *, const char*);
SOAP_FMAC1 struct __ns1__BatchJob_ * SOAP_FMAC2 soap_instantiate___ns1__BatchJob_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BatchJob_ * soap_new___ns1__BatchJob_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BatchJob_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BatchJob_ * soap_new_req___ns1__BatchJob_(
	struct soap *soap)
{
	struct __ns1__BatchJob_ *_p = soap_new___ns1__BatchJob_(soap);
	if (_p)
	{	soap_default___ns1__BatchJob_(soap, _p);
	}
	return _p;
}

inline struct __ns1__BatchJob_ * soap_new_set___ns1__BatchJob_(
	struct soap *soap,
	_ns1__BatchJob *ns1__BatchJob)
{
	struct __ns1__BatchJob_ *_p = soap_new___ns1__BatchJob_(soap);
	if (_p)
	{	soap_default___ns1__BatchJob_(soap, _p);
		_p->ns1__BatchJob = ns1__BatchJob;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BatchJob_(struct soap*, const struct __ns1__BatchJob_ *, const char*, const char*);

inline int soap_write___ns1__BatchJob_(struct soap *soap, struct __ns1__BatchJob_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BatchJob_(soap, p), 0) || soap_put___ns1__BatchJob_(soap, p, "-ns1:BatchJob", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BatchJob_(struct soap *soap, const char *URL, struct __ns1__BatchJob_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__BatchJob_(soap, p), 0) || soap_put___ns1__BatchJob_(soap, p, "-ns1:BatchJob", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BatchJob_(struct soap *soap, const char *URL, struct __ns1__BatchJob_ const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__BatchJob_(soap, p), 0) || soap_put___ns1__BatchJob_(soap, p, "-ns1:BatchJob", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BatchJob_ * SOAP_FMAC4 soap_get___ns1__BatchJob_(struct soap*, struct __ns1__BatchJob_ *, const char*, const char*);

inline int soap_read___ns1__BatchJob_(struct soap *soap, struct __ns1__BatchJob_ *p)
{
	if (p)
	{	soap_default___ns1__BatchJob_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BatchJob_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BatchJob_(struct soap *soap, const char *URL, struct __ns1__BatchJob_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BatchJob_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BatchJob_(struct soap *soap, struct __ns1__BatchJob_ *p)
{
	if (soap_read___ns1__BatchJob_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CloseJob__DEFINED
#define SOAP_TYPE___ns1__CloseJob__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CloseJob_(struct soap*, struct __ns1__CloseJob_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CloseJob_(struct soap*, const struct __ns1__CloseJob_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CloseJob_(struct soap*, const char*, int, const struct __ns1__CloseJob_ *, const char*);
SOAP_FMAC3 struct __ns1__CloseJob_ * SOAP_FMAC4 soap_in___ns1__CloseJob_(struct soap*, const char*, struct __ns1__CloseJob_ *, const char*);
SOAP_FMAC1 struct __ns1__CloseJob_ * SOAP_FMAC2 soap_instantiate___ns1__CloseJob_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CloseJob_ * soap_new___ns1__CloseJob_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CloseJob_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CloseJob_ * soap_new_req___ns1__CloseJob_(
	struct soap *soap)
{
	struct __ns1__CloseJob_ *_p = soap_new___ns1__CloseJob_(soap);
	if (_p)
	{	soap_default___ns1__CloseJob_(soap, _p);
	}
	return _p;
}

inline struct __ns1__CloseJob_ * soap_new_set___ns1__CloseJob_(
	struct soap *soap,
	_ns1__CloseJob *ns1__CloseJob)
{
	struct __ns1__CloseJob_ *_p = soap_new___ns1__CloseJob_(soap);
	if (_p)
	{	soap_default___ns1__CloseJob_(soap, _p);
		_p->ns1__CloseJob = ns1__CloseJob;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CloseJob_(struct soap*, const struct __ns1__CloseJob_ *, const char*, const char*);

inline int soap_write___ns1__CloseJob_(struct soap *soap, struct __ns1__CloseJob_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CloseJob_(soap, p), 0) || soap_put___ns1__CloseJob_(soap, p, "-ns1:CloseJob", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CloseJob_(struct soap *soap, const char *URL, struct __ns1__CloseJob_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__CloseJob_(soap, p), 0) || soap_put___ns1__CloseJob_(soap, p, "-ns1:CloseJob", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CloseJob_(struct soap *soap, const char *URL, struct __ns1__CloseJob_ const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__CloseJob_(soap, p), 0) || soap_put___ns1__CloseJob_(soap, p, "-ns1:CloseJob", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CloseJob_ * SOAP_FMAC4 soap_get___ns1__CloseJob_(struct soap*, struct __ns1__CloseJob_ *, const char*, const char*);

inline int soap_read___ns1__CloseJob_(struct soap *soap, struct __ns1__CloseJob_ *p)
{
	if (p)
	{	soap_default___ns1__CloseJob_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CloseJob_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CloseJob_(struct soap *soap, const char *URL, struct __ns1__CloseJob_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CloseJob_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CloseJob_(struct soap *soap, struct __ns1__CloseJob_ *p)
{
	if (soap_read___ns1__CloseJob_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ExecuteEx__DEFINED
#define SOAP_TYPE___ns1__ExecuteEx__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ExecuteEx_(struct soap*, struct __ns1__ExecuteEx_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ExecuteEx_(struct soap*, const struct __ns1__ExecuteEx_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ExecuteEx_(struct soap*, const char*, int, const struct __ns1__ExecuteEx_ *, const char*);
SOAP_FMAC3 struct __ns1__ExecuteEx_ * SOAP_FMAC4 soap_in___ns1__ExecuteEx_(struct soap*, const char*, struct __ns1__ExecuteEx_ *, const char*);
SOAP_FMAC1 struct __ns1__ExecuteEx_ * SOAP_FMAC2 soap_instantiate___ns1__ExecuteEx_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ExecuteEx_ * soap_new___ns1__ExecuteEx_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ExecuteEx_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ExecuteEx_ * soap_new_req___ns1__ExecuteEx_(
	struct soap *soap)
{
	struct __ns1__ExecuteEx_ *_p = soap_new___ns1__ExecuteEx_(soap);
	if (_p)
	{	soap_default___ns1__ExecuteEx_(soap, _p);
	}
	return _p;
}

inline struct __ns1__ExecuteEx_ * soap_new_set___ns1__ExecuteEx_(
	struct soap *soap,
	_ns1__ExecuteEx *ns1__ExecuteEx)
{
	struct __ns1__ExecuteEx_ *_p = soap_new___ns1__ExecuteEx_(soap);
	if (_p)
	{	soap_default___ns1__ExecuteEx_(soap, _p);
		_p->ns1__ExecuteEx = ns1__ExecuteEx;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ExecuteEx_(struct soap*, const struct __ns1__ExecuteEx_ *, const char*, const char*);

inline int soap_write___ns1__ExecuteEx_(struct soap *soap, struct __ns1__ExecuteEx_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ExecuteEx_(soap, p), 0) || soap_put___ns1__ExecuteEx_(soap, p, "-ns1:ExecuteEx", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ExecuteEx_(struct soap *soap, const char *URL, struct __ns1__ExecuteEx_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__ExecuteEx_(soap, p), 0) || soap_put___ns1__ExecuteEx_(soap, p, "-ns1:ExecuteEx", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ExecuteEx_(struct soap *soap, const char *URL, struct __ns1__ExecuteEx_ const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__ExecuteEx_(soap, p), 0) || soap_put___ns1__ExecuteEx_(soap, p, "-ns1:ExecuteEx", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ExecuteEx_ * SOAP_FMAC4 soap_get___ns1__ExecuteEx_(struct soap*, struct __ns1__ExecuteEx_ *, const char*, const char*);

inline int soap_read___ns1__ExecuteEx_(struct soap *soap, struct __ns1__ExecuteEx_ *p)
{
	if (p)
	{	soap_default___ns1__ExecuteEx_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ExecuteEx_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ExecuteEx_(struct soap *soap, const char *URL, struct __ns1__ExecuteEx_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ExecuteEx_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ExecuteEx_(struct soap *soap, struct __ns1__ExecuteEx_ *p)
{
	if (soap_read___ns1__ExecuteEx_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__Execute__DEFINED
#define SOAP_TYPE___ns1__Execute__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Execute_(struct soap*, struct __ns1__Execute_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Execute_(struct soap*, const struct __ns1__Execute_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Execute_(struct soap*, const char*, int, const struct __ns1__Execute_ *, const char*);
SOAP_FMAC3 struct __ns1__Execute_ * SOAP_FMAC4 soap_in___ns1__Execute_(struct soap*, const char*, struct __ns1__Execute_ *, const char*);
SOAP_FMAC1 struct __ns1__Execute_ * SOAP_FMAC2 soap_instantiate___ns1__Execute_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Execute_ * soap_new___ns1__Execute_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Execute_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Execute_ * soap_new_req___ns1__Execute_(
	struct soap *soap)
{
	struct __ns1__Execute_ *_p = soap_new___ns1__Execute_(soap);
	if (_p)
	{	soap_default___ns1__Execute_(soap, _p);
	}
	return _p;
}

inline struct __ns1__Execute_ * soap_new_set___ns1__Execute_(
	struct soap *soap,
	_ns1__Execute *ns1__Execute)
{
	struct __ns1__Execute_ *_p = soap_new___ns1__Execute_(soap);
	if (_p)
	{	soap_default___ns1__Execute_(soap, _p);
		_p->ns1__Execute = ns1__Execute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Execute_(struct soap*, const struct __ns1__Execute_ *, const char*, const char*);

inline int soap_write___ns1__Execute_(struct soap *soap, struct __ns1__Execute_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__Execute_(soap, p), 0) || soap_put___ns1__Execute_(soap, p, "-ns1:Execute", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Execute_(struct soap *soap, const char *URL, struct __ns1__Execute_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__Execute_(soap, p), 0) || soap_put___ns1__Execute_(soap, p, "-ns1:Execute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Execute_(struct soap *soap, const char *URL, struct __ns1__Execute_ const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__Execute_(soap, p), 0) || soap_put___ns1__Execute_(soap, p, "-ns1:Execute", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Execute_ * SOAP_FMAC4 soap_get___ns1__Execute_(struct soap*, struct __ns1__Execute_ *, const char*, const char*);

inline int soap_read___ns1__Execute_(struct soap *soap, struct __ns1__Execute_ *p)
{
	if (p)
	{	soap_default___ns1__Execute_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__Execute_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Execute_(struct soap *soap, const char *URL, struct __ns1__Execute_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__Execute_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__Execute_(struct soap *soap, struct __ns1__Execute_ *p)
{
	if (soap_read___ns1__Execute_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__RenewLease__DEFINED
#define SOAP_TYPE___ns1__RenewLease__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RenewLease_(struct soap*, struct __ns1__RenewLease_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RenewLease_(struct soap*, const struct __ns1__RenewLease_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RenewLease_(struct soap*, const char*, int, const struct __ns1__RenewLease_ *, const char*);
SOAP_FMAC3 struct __ns1__RenewLease_ * SOAP_FMAC4 soap_in___ns1__RenewLease_(struct soap*, const char*, struct __ns1__RenewLease_ *, const char*);
SOAP_FMAC1 struct __ns1__RenewLease_ * SOAP_FMAC2 soap_instantiate___ns1__RenewLease_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RenewLease_ * soap_new___ns1__RenewLease_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__RenewLease_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__RenewLease_ * soap_new_req___ns1__RenewLease_(
	struct soap *soap)
{
	struct __ns1__RenewLease_ *_p = soap_new___ns1__RenewLease_(soap);
	if (_p)
	{	soap_default___ns1__RenewLease_(soap, _p);
	}
	return _p;
}

inline struct __ns1__RenewLease_ * soap_new_set___ns1__RenewLease_(
	struct soap *soap,
	_ns1__RenewLease *ns1__RenewLease)
{
	struct __ns1__RenewLease_ *_p = soap_new___ns1__RenewLease_(soap);
	if (_p)
	{	soap_default___ns1__RenewLease_(soap, _p);
		_p->ns1__RenewLease = ns1__RenewLease;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RenewLease_(struct soap*, const struct __ns1__RenewLease_ *, const char*, const char*);

inline int soap_write___ns1__RenewLease_(struct soap *soap, struct __ns1__RenewLease_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__RenewLease_(soap, p), 0) || soap_put___ns1__RenewLease_(soap, p, "-ns1:RenewLease", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__RenewLease_(struct soap *soap, const char *URL, struct __ns1__RenewLease_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__RenewLease_(soap, p), 0) || soap_put___ns1__RenewLease_(soap, p, "-ns1:RenewLease", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__RenewLease_(struct soap *soap, const char *URL, struct __ns1__RenewLease_ const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__RenewLease_(soap, p), 0) || soap_put___ns1__RenewLease_(soap, p, "-ns1:RenewLease", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__RenewLease_ * SOAP_FMAC4 soap_get___ns1__RenewLease_(struct soap*, struct __ns1__RenewLease_ *, const char*, const char*);

inline int soap_read___ns1__RenewLease_(struct soap *soap, struct __ns1__RenewLease_ *p)
{
	if (p)
	{	soap_default___ns1__RenewLease_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__RenewLease_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__RenewLease_(struct soap *soap, const char *URL, struct __ns1__RenewLease_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__RenewLease_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__RenewLease_(struct soap *soap, struct __ns1__RenewLease_ *p)
{
	if (soap_read___ns1__RenewLease_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__OpenJobEx__DEFINED
#define SOAP_TYPE___ns1__OpenJobEx__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OpenJobEx_(struct soap*, struct __ns1__OpenJobEx_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OpenJobEx_(struct soap*, const struct __ns1__OpenJobEx_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OpenJobEx_(struct soap*, const char*, int, const struct __ns1__OpenJobEx_ *, const char*);
SOAP_FMAC3 struct __ns1__OpenJobEx_ * SOAP_FMAC4 soap_in___ns1__OpenJobEx_(struct soap*, const char*, struct __ns1__OpenJobEx_ *, const char*);
SOAP_FMAC1 struct __ns1__OpenJobEx_ * SOAP_FMAC2 soap_instantiate___ns1__OpenJobEx_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OpenJobEx_ * soap_new___ns1__OpenJobEx_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__OpenJobEx_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__OpenJobEx_ * soap_new_req___ns1__OpenJobEx_(
	struct soap *soap)
{
	struct __ns1__OpenJobEx_ *_p = soap_new___ns1__OpenJobEx_(soap);
	if (_p)
	{	soap_default___ns1__OpenJobEx_(soap, _p);
	}
	return _p;
}

inline struct __ns1__OpenJobEx_ * soap_new_set___ns1__OpenJobEx_(
	struct soap *soap,
	_ns1__OpenJobEx *ns1__OpenJobEx)
{
	struct __ns1__OpenJobEx_ *_p = soap_new___ns1__OpenJobEx_(soap);
	if (_p)
	{	soap_default___ns1__OpenJobEx_(soap, _p);
		_p->ns1__OpenJobEx = ns1__OpenJobEx;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OpenJobEx_(struct soap*, const struct __ns1__OpenJobEx_ *, const char*, const char*);

inline int soap_write___ns1__OpenJobEx_(struct soap *soap, struct __ns1__OpenJobEx_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__OpenJobEx_(soap, p), 0) || soap_put___ns1__OpenJobEx_(soap, p, "-ns1:OpenJobEx", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__OpenJobEx_(struct soap *soap, const char *URL, struct __ns1__OpenJobEx_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__OpenJobEx_(soap, p), 0) || soap_put___ns1__OpenJobEx_(soap, p, "-ns1:OpenJobEx", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__OpenJobEx_(struct soap *soap, const char *URL, struct __ns1__OpenJobEx_ const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__OpenJobEx_(soap, p), 0) || soap_put___ns1__OpenJobEx_(soap, p, "-ns1:OpenJobEx", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__OpenJobEx_ * SOAP_FMAC4 soap_get___ns1__OpenJobEx_(struct soap*, struct __ns1__OpenJobEx_ *, const char*, const char*);

inline int soap_read___ns1__OpenJobEx_(struct soap *soap, struct __ns1__OpenJobEx_ *p)
{
	if (p)
	{	soap_default___ns1__OpenJobEx_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__OpenJobEx_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__OpenJobEx_(struct soap *soap, const char *URL, struct __ns1__OpenJobEx_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__OpenJobEx_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__OpenJobEx_(struct soap *soap, struct __ns1__OpenJobEx_ *p)
{
	if (soap_read___ns1__OpenJobEx_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__OpenJob__DEFINED
#define SOAP_TYPE___ns1__OpenJob__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OpenJob_(struct soap*, struct __ns1__OpenJob_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OpenJob_(struct soap*, const struct __ns1__OpenJob_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OpenJob_(struct soap*, const char*, int, const struct __ns1__OpenJob_ *, const char*);
SOAP_FMAC3 struct __ns1__OpenJob_ * SOAP_FMAC4 soap_in___ns1__OpenJob_(struct soap*, const char*, struct __ns1__OpenJob_ *, const char*);
SOAP_FMAC1 struct __ns1__OpenJob_ * SOAP_FMAC2 soap_instantiate___ns1__OpenJob_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OpenJob_ * soap_new___ns1__OpenJob_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__OpenJob_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__OpenJob_ * soap_new_req___ns1__OpenJob_(
	struct soap *soap)
{
	struct __ns1__OpenJob_ *_p = soap_new___ns1__OpenJob_(soap);
	if (_p)
	{	soap_default___ns1__OpenJob_(soap, _p);
	}
	return _p;
}

inline struct __ns1__OpenJob_ * soap_new_set___ns1__OpenJob_(
	struct soap *soap,
	_ns1__OpenJob *ns1__OpenJob)
{
	struct __ns1__OpenJob_ *_p = soap_new___ns1__OpenJob_(soap);
	if (_p)
	{	soap_default___ns1__OpenJob_(soap, _p);
		_p->ns1__OpenJob = ns1__OpenJob;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OpenJob_(struct soap*, const struct __ns1__OpenJob_ *, const char*, const char*);

inline int soap_write___ns1__OpenJob_(struct soap *soap, struct __ns1__OpenJob_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__OpenJob_(soap, p), 0) || soap_put___ns1__OpenJob_(soap, p, "-ns1:OpenJob", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__OpenJob_(struct soap *soap, const char *URL, struct __ns1__OpenJob_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__OpenJob_(soap, p), 0) || soap_put___ns1__OpenJob_(soap, p, "-ns1:OpenJob", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__OpenJob_(struct soap *soap, const char *URL, struct __ns1__OpenJob_ const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__OpenJob_(soap, p), 0) || soap_put___ns1__OpenJob_(soap, p, "-ns1:OpenJob", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__OpenJob_ * SOAP_FMAC4 soap_get___ns1__OpenJob_(struct soap*, struct __ns1__OpenJob_ *, const char*, const char*);

inline int soap_read___ns1__OpenJob_(struct soap *soap, struct __ns1__OpenJob_ *p)
{
	if (p)
	{	soap_default___ns1__OpenJob_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__OpenJob_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__OpenJob_(struct soap *soap, const char *URL, struct __ns1__OpenJob_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__OpenJob_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__OpenJob_(struct soap *soap, struct __ns1__OpenJob_ *p)
{
	if (soap_read___ns1__OpenJob_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetStatus__DEFINED
#define SOAP_TYPE___ns1__GetStatus__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetStatus_(struct soap*, struct __ns1__GetStatus_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetStatus_(struct soap*, const struct __ns1__GetStatus_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetStatus_(struct soap*, const char*, int, const struct __ns1__GetStatus_ *, const char*);
SOAP_FMAC3 struct __ns1__GetStatus_ * SOAP_FMAC4 soap_in___ns1__GetStatus_(struct soap*, const char*, struct __ns1__GetStatus_ *, const char*);
SOAP_FMAC1 struct __ns1__GetStatus_ * SOAP_FMAC2 soap_instantiate___ns1__GetStatus_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetStatus_ * soap_new___ns1__GetStatus_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetStatus_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetStatus_ * soap_new_req___ns1__GetStatus_(
	struct soap *soap)
{
	struct __ns1__GetStatus_ *_p = soap_new___ns1__GetStatus_(soap);
	if (_p)
	{	soap_default___ns1__GetStatus_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetStatus_ * soap_new_set___ns1__GetStatus_(
	struct soap *soap,
	_ns1__GetStatus *ns1__GetStatus)
{
	struct __ns1__GetStatus_ *_p = soap_new___ns1__GetStatus_(soap);
	if (_p)
	{	soap_default___ns1__GetStatus_(soap, _p);
		_p->ns1__GetStatus = ns1__GetStatus;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetStatus_(struct soap*, const struct __ns1__GetStatus_ *, const char*, const char*);

inline int soap_write___ns1__GetStatus_(struct soap *soap, struct __ns1__GetStatus_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetStatus_(soap, p), 0) || soap_put___ns1__GetStatus_(soap, p, "-ns1:GetStatus", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetStatus_(struct soap *soap, const char *URL, struct __ns1__GetStatus_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetStatus_(soap, p), 0) || soap_put___ns1__GetStatus_(soap, p, "-ns1:GetStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetStatus_(struct soap *soap, const char *URL, struct __ns1__GetStatus_ const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetStatus_(soap, p), 0) || soap_put___ns1__GetStatus_(soap, p, "-ns1:GetStatus", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetStatus_ * SOAP_FMAC4 soap_get___ns1__GetStatus_(struct soap*, struct __ns1__GetStatus_ *, const char*, const char*);

inline int soap_read___ns1__GetStatus_(struct soap *soap, struct __ns1__GetStatus_ *p)
{
	if (p)
	{	soap_default___ns1__GetStatus_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetStatus_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetStatus_(struct soap *soap, const char *URL, struct __ns1__GetStatus_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetStatus_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetStatus_(struct soap *soap, struct __ns1__GetStatus_ *p)
{
	if (soap_read___ns1__GetStatus_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetVersion__DEFINED
#define SOAP_TYPE___ns1__GetVersion__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVersion_(struct soap*, struct __ns1__GetVersion_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVersion_(struct soap*, const struct __ns1__GetVersion_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVersion_(struct soap*, const char*, int, const struct __ns1__GetVersion_ *, const char*);
SOAP_FMAC3 struct __ns1__GetVersion_ * SOAP_FMAC4 soap_in___ns1__GetVersion_(struct soap*, const char*, struct __ns1__GetVersion_ *, const char*);
SOAP_FMAC1 struct __ns1__GetVersion_ * SOAP_FMAC2 soap_instantiate___ns1__GetVersion_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetVersion_ * soap_new___ns1__GetVersion_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetVersion_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetVersion_ * soap_new_req___ns1__GetVersion_(
	struct soap *soap)
{
	struct __ns1__GetVersion_ *_p = soap_new___ns1__GetVersion_(soap);
	if (_p)
	{	soap_default___ns1__GetVersion_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetVersion_ * soap_new_set___ns1__GetVersion_(
	struct soap *soap,
	_ns1__GetVersion *ns1__GetVersion)
{
	struct __ns1__GetVersion_ *_p = soap_new___ns1__GetVersion_(soap);
	if (_p)
	{	soap_default___ns1__GetVersion_(soap, _p);
		_p->ns1__GetVersion = ns1__GetVersion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVersion_(struct soap*, const struct __ns1__GetVersion_ *, const char*, const char*);

inline int soap_write___ns1__GetVersion_(struct soap *soap, struct __ns1__GetVersion_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetVersion_(soap, p), 0) || soap_put___ns1__GetVersion_(soap, p, "-ns1:GetVersion", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetVersion_(struct soap *soap, const char *URL, struct __ns1__GetVersion_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetVersion_(soap, p), 0) || soap_put___ns1__GetVersion_(soap, p, "-ns1:GetVersion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetVersion_(struct soap *soap, const char *URL, struct __ns1__GetVersion_ const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetVersion_(soap, p), 0) || soap_put___ns1__GetVersion_(soap, p, "-ns1:GetVersion", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetVersion_ * SOAP_FMAC4 soap_get___ns1__GetVersion_(struct soap*, struct __ns1__GetVersion_ *, const char*, const char*);

inline int soap_read___ns1__GetVersion_(struct soap *soap, struct __ns1__GetVersion_ *p)
{
	if (p)
	{	soap_default___ns1__GetVersion_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetVersion_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetVersion_(struct soap *soap, const char *URL, struct __ns1__GetVersion_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetVersion_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetVersion_(struct soap *soap, struct __ns1__GetVersion_ *p)
{
	if (soap_read___ns1__GetVersion_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__HelloWorld__DEFINED
#define SOAP_TYPE___ns1__HelloWorld__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__HelloWorld_(struct soap*, struct __ns1__HelloWorld_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__HelloWorld_(struct soap*, const struct __ns1__HelloWorld_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__HelloWorld_(struct soap*, const char*, int, const struct __ns1__HelloWorld_ *, const char*);
SOAP_FMAC3 struct __ns1__HelloWorld_ * SOAP_FMAC4 soap_in___ns1__HelloWorld_(struct soap*, const char*, struct __ns1__HelloWorld_ *, const char*);
SOAP_FMAC1 struct __ns1__HelloWorld_ * SOAP_FMAC2 soap_instantiate___ns1__HelloWorld_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__HelloWorld_ * soap_new___ns1__HelloWorld_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__HelloWorld_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__HelloWorld_ * soap_new_req___ns1__HelloWorld_(
	struct soap *soap)
{
	struct __ns1__HelloWorld_ *_p = soap_new___ns1__HelloWorld_(soap);
	if (_p)
	{	soap_default___ns1__HelloWorld_(soap, _p);
	}
	return _p;
}

inline struct __ns1__HelloWorld_ * soap_new_set___ns1__HelloWorld_(
	struct soap *soap,
	_ns1__HelloWorld *ns1__HelloWorld)
{
	struct __ns1__HelloWorld_ *_p = soap_new___ns1__HelloWorld_(soap);
	if (_p)
	{	soap_default___ns1__HelloWorld_(soap, _p);
		_p->ns1__HelloWorld = ns1__HelloWorld;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__HelloWorld_(struct soap*, const struct __ns1__HelloWorld_ *, const char*, const char*);

inline int soap_write___ns1__HelloWorld_(struct soap *soap, struct __ns1__HelloWorld_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__HelloWorld_(soap, p), 0) || soap_put___ns1__HelloWorld_(soap, p, "-ns1:HelloWorld", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__HelloWorld_(struct soap *soap, const char *URL, struct __ns1__HelloWorld_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__HelloWorld_(soap, p), 0) || soap_put___ns1__HelloWorld_(soap, p, "-ns1:HelloWorld", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__HelloWorld_(struct soap *soap, const char *URL, struct __ns1__HelloWorld_ const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__HelloWorld_(soap, p), 0) || soap_put___ns1__HelloWorld_(soap, p, "-ns1:HelloWorld", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__HelloWorld_ * SOAP_FMAC4 soap_get___ns1__HelloWorld_(struct soap*, struct __ns1__HelloWorld_ *, const char*, const char*);

inline int soap_read___ns1__HelloWorld_(struct soap *soap, struct __ns1__HelloWorld_ *p)
{
	if (p)
	{	soap_default___ns1__HelloWorld_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__HelloWorld_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__HelloWorld_(struct soap *soap, const char *URL, struct __ns1__HelloWorld_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__HelloWorld_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__HelloWorld_(struct soap *soap, struct __ns1__HelloWorld_ *p)
{
	if (soap_read___ns1__HelloWorld_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DiagEx_DEFINED
#define SOAP_TYPE___ns1__DiagEx_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DiagEx(struct soap*, struct __ns1__DiagEx *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DiagEx(struct soap*, const struct __ns1__DiagEx *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DiagEx(struct soap*, const char*, int, const struct __ns1__DiagEx *, const char*);
SOAP_FMAC3 struct __ns1__DiagEx * SOAP_FMAC4 soap_in___ns1__DiagEx(struct soap*, const char*, struct __ns1__DiagEx *, const char*);
SOAP_FMAC1 struct __ns1__DiagEx * SOAP_FMAC2 soap_instantiate___ns1__DiagEx(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DiagEx * soap_new___ns1__DiagEx(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DiagEx(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DiagEx * soap_new_req___ns1__DiagEx(
	struct soap *soap)
{
	struct __ns1__DiagEx *_p = soap_new___ns1__DiagEx(soap);
	if (_p)
	{	soap_default___ns1__DiagEx(soap, _p);
	}
	return _p;
}

inline struct __ns1__DiagEx * soap_new_set___ns1__DiagEx(
	struct soap *soap,
	_ns1__DiagEx *ns1__DiagEx)
{
	struct __ns1__DiagEx *_p = soap_new___ns1__DiagEx(soap);
	if (_p)
	{	soap_default___ns1__DiagEx(soap, _p);
		_p->ns1__DiagEx = ns1__DiagEx;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DiagEx(struct soap*, const struct __ns1__DiagEx *, const char*, const char*);

inline int soap_write___ns1__DiagEx(struct soap *soap, struct __ns1__DiagEx const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__DiagEx(soap, p), 0) || soap_put___ns1__DiagEx(soap, p, "-ns1:DiagEx", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DiagEx(struct soap *soap, const char *URL, struct __ns1__DiagEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__DiagEx(soap, p), 0) || soap_put___ns1__DiagEx(soap, p, "-ns1:DiagEx", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DiagEx(struct soap *soap, const char *URL, struct __ns1__DiagEx const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__DiagEx(soap, p), 0) || soap_put___ns1__DiagEx(soap, p, "-ns1:DiagEx", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DiagEx * SOAP_FMAC4 soap_get___ns1__DiagEx(struct soap*, struct __ns1__DiagEx *, const char*, const char*);

inline int soap_read___ns1__DiagEx(struct soap *soap, struct __ns1__DiagEx *p)
{
	if (p)
	{	soap_default___ns1__DiagEx(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__DiagEx(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DiagEx(struct soap *soap, const char *URL, struct __ns1__DiagEx *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__DiagEx(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DiagEx(struct soap *soap, struct __ns1__DiagEx *p)
{
	if (soap_read___ns1__DiagEx(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__Diag_DEFINED
#define SOAP_TYPE___ns1__Diag_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Diag(struct soap*, struct __ns1__Diag *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Diag(struct soap*, const struct __ns1__Diag *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Diag(struct soap*, const char*, int, const struct __ns1__Diag *, const char*);
SOAP_FMAC3 struct __ns1__Diag * SOAP_FMAC4 soap_in___ns1__Diag(struct soap*, const char*, struct __ns1__Diag *, const char*);
SOAP_FMAC1 struct __ns1__Diag * SOAP_FMAC2 soap_instantiate___ns1__Diag(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Diag * soap_new___ns1__Diag(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Diag(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Diag * soap_new_req___ns1__Diag(
	struct soap *soap)
{
	struct __ns1__Diag *_p = soap_new___ns1__Diag(soap);
	if (_p)
	{	soap_default___ns1__Diag(soap, _p);
	}
	return _p;
}

inline struct __ns1__Diag * soap_new_set___ns1__Diag(
	struct soap *soap,
	_ns1__Diag *ns1__Diag)
{
	struct __ns1__Diag *_p = soap_new___ns1__Diag(soap);
	if (_p)
	{	soap_default___ns1__Diag(soap, _p);
		_p->ns1__Diag = ns1__Diag;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Diag(struct soap*, const struct __ns1__Diag *, const char*, const char*);

inline int soap_write___ns1__Diag(struct soap *soap, struct __ns1__Diag const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__Diag(soap, p), 0) || soap_put___ns1__Diag(soap, p, "-ns1:Diag", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Diag(struct soap *soap, const char *URL, struct __ns1__Diag const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__Diag(soap, p), 0) || soap_put___ns1__Diag(soap, p, "-ns1:Diag", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Diag(struct soap *soap, const char *URL, struct __ns1__Diag const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__Diag(soap, p), 0) || soap_put___ns1__Diag(soap, p, "-ns1:Diag", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Diag * SOAP_FMAC4 soap_get___ns1__Diag(struct soap*, struct __ns1__Diag *, const char*, const char*);

inline int soap_read___ns1__Diag(struct soap *soap, struct __ns1__Diag *p)
{
	if (p)
	{	soap_default___ns1__Diag(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__Diag(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Diag(struct soap *soap, const char *URL, struct __ns1__Diag *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__Diag(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__Diag(struct soap *soap, struct __ns1__Diag *p)
{
	if (soap_read___ns1__Diag(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CloseAllJobs_DEFINED
#define SOAP_TYPE___ns1__CloseAllJobs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CloseAllJobs(struct soap*, struct __ns1__CloseAllJobs *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CloseAllJobs(struct soap*, const struct __ns1__CloseAllJobs *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CloseAllJobs(struct soap*, const char*, int, const struct __ns1__CloseAllJobs *, const char*);
SOAP_FMAC3 struct __ns1__CloseAllJobs * SOAP_FMAC4 soap_in___ns1__CloseAllJobs(struct soap*, const char*, struct __ns1__CloseAllJobs *, const char*);
SOAP_FMAC1 struct __ns1__CloseAllJobs * SOAP_FMAC2 soap_instantiate___ns1__CloseAllJobs(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CloseAllJobs * soap_new___ns1__CloseAllJobs(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CloseAllJobs(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CloseAllJobs * soap_new_req___ns1__CloseAllJobs(
	struct soap *soap)
{
	struct __ns1__CloseAllJobs *_p = soap_new___ns1__CloseAllJobs(soap);
	if (_p)
	{	soap_default___ns1__CloseAllJobs(soap, _p);
	}
	return _p;
}

inline struct __ns1__CloseAllJobs * soap_new_set___ns1__CloseAllJobs(
	struct soap *soap,
	_ns1__CloseAllJobs *ns1__CloseAllJobs)
{
	struct __ns1__CloseAllJobs *_p = soap_new___ns1__CloseAllJobs(soap);
	if (_p)
	{	soap_default___ns1__CloseAllJobs(soap, _p);
		_p->ns1__CloseAllJobs = ns1__CloseAllJobs;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CloseAllJobs(struct soap*, const struct __ns1__CloseAllJobs *, const char*, const char*);

inline int soap_write___ns1__CloseAllJobs(struct soap *soap, struct __ns1__CloseAllJobs const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CloseAllJobs(soap, p), 0) || soap_put___ns1__CloseAllJobs(soap, p, "-ns1:CloseAllJobs", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CloseAllJobs(struct soap *soap, const char *URL, struct __ns1__CloseAllJobs const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__CloseAllJobs(soap, p), 0) || soap_put___ns1__CloseAllJobs(soap, p, "-ns1:CloseAllJobs", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CloseAllJobs(struct soap *soap, const char *URL, struct __ns1__CloseAllJobs const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__CloseAllJobs(soap, p), 0) || soap_put___ns1__CloseAllJobs(soap, p, "-ns1:CloseAllJobs", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CloseAllJobs * SOAP_FMAC4 soap_get___ns1__CloseAllJobs(struct soap*, struct __ns1__CloseAllJobs *, const char*, const char*);

inline int soap_read___ns1__CloseAllJobs(struct soap *soap, struct __ns1__CloseAllJobs *p)
{
	if (p)
	{	soap_default___ns1__CloseAllJobs(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CloseAllJobs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CloseAllJobs(struct soap *soap, const char *URL, struct __ns1__CloseAllJobs *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CloseAllJobs(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CloseAllJobs(struct soap *soap, struct __ns1__CloseAllJobs *p)
{
	if (soap_read___ns1__CloseAllJobs(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CloseExpiredJobs_DEFINED
#define SOAP_TYPE___ns1__CloseExpiredJobs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CloseExpiredJobs(struct soap*, struct __ns1__CloseExpiredJobs *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CloseExpiredJobs(struct soap*, const struct __ns1__CloseExpiredJobs *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CloseExpiredJobs(struct soap*, const char*, int, const struct __ns1__CloseExpiredJobs *, const char*);
SOAP_FMAC3 struct __ns1__CloseExpiredJobs * SOAP_FMAC4 soap_in___ns1__CloseExpiredJobs(struct soap*, const char*, struct __ns1__CloseExpiredJobs *, const char*);
SOAP_FMAC1 struct __ns1__CloseExpiredJobs * SOAP_FMAC2 soap_instantiate___ns1__CloseExpiredJobs(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CloseExpiredJobs * soap_new___ns1__CloseExpiredJobs(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CloseExpiredJobs(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CloseExpiredJobs * soap_new_req___ns1__CloseExpiredJobs(
	struct soap *soap)
{
	struct __ns1__CloseExpiredJobs *_p = soap_new___ns1__CloseExpiredJobs(soap);
	if (_p)
	{	soap_default___ns1__CloseExpiredJobs(soap, _p);
	}
	return _p;
}

inline struct __ns1__CloseExpiredJobs * soap_new_set___ns1__CloseExpiredJobs(
	struct soap *soap,
	_ns1__CloseExpiredJobs *ns1__CloseExpiredJobs)
{
	struct __ns1__CloseExpiredJobs *_p = soap_new___ns1__CloseExpiredJobs(soap);
	if (_p)
	{	soap_default___ns1__CloseExpiredJobs(soap, _p);
		_p->ns1__CloseExpiredJobs = ns1__CloseExpiredJobs;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CloseExpiredJobs(struct soap*, const struct __ns1__CloseExpiredJobs *, const char*, const char*);

inline int soap_write___ns1__CloseExpiredJobs(struct soap *soap, struct __ns1__CloseExpiredJobs const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CloseExpiredJobs(soap, p), 0) || soap_put___ns1__CloseExpiredJobs(soap, p, "-ns1:CloseExpiredJobs", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CloseExpiredJobs(struct soap *soap, const char *URL, struct __ns1__CloseExpiredJobs const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__CloseExpiredJobs(soap, p), 0) || soap_put___ns1__CloseExpiredJobs(soap, p, "-ns1:CloseExpiredJobs", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CloseExpiredJobs(struct soap *soap, const char *URL, struct __ns1__CloseExpiredJobs const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__CloseExpiredJobs(soap, p), 0) || soap_put___ns1__CloseExpiredJobs(soap, p, "-ns1:CloseExpiredJobs", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CloseExpiredJobs * SOAP_FMAC4 soap_get___ns1__CloseExpiredJobs(struct soap*, struct __ns1__CloseExpiredJobs *, const char*, const char*);

inline int soap_read___ns1__CloseExpiredJobs(struct soap *soap, struct __ns1__CloseExpiredJobs *p)
{
	if (p)
	{	soap_default___ns1__CloseExpiredJobs(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CloseExpiredJobs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CloseExpiredJobs(struct soap *soap, const char *URL, struct __ns1__CloseExpiredJobs *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CloseExpiredJobs(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CloseExpiredJobs(struct soap *soap, struct __ns1__CloseExpiredJobs *p)
{
	if (soap_read___ns1__CloseExpiredJobs(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetAllJobsEx_DEFINED
#define SOAP_TYPE___ns1__GetAllJobsEx_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAllJobsEx(struct soap*, struct __ns1__GetAllJobsEx *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAllJobsEx(struct soap*, const struct __ns1__GetAllJobsEx *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAllJobsEx(struct soap*, const char*, int, const struct __ns1__GetAllJobsEx *, const char*);
SOAP_FMAC3 struct __ns1__GetAllJobsEx * SOAP_FMAC4 soap_in___ns1__GetAllJobsEx(struct soap*, const char*, struct __ns1__GetAllJobsEx *, const char*);
SOAP_FMAC1 struct __ns1__GetAllJobsEx * SOAP_FMAC2 soap_instantiate___ns1__GetAllJobsEx(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAllJobsEx * soap_new___ns1__GetAllJobsEx(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetAllJobsEx(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetAllJobsEx * soap_new_req___ns1__GetAllJobsEx(
	struct soap *soap)
{
	struct __ns1__GetAllJobsEx *_p = soap_new___ns1__GetAllJobsEx(soap);
	if (_p)
	{	soap_default___ns1__GetAllJobsEx(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetAllJobsEx * soap_new_set___ns1__GetAllJobsEx(
	struct soap *soap,
	_ns1__GetAllJobsEx *ns1__GetAllJobsEx)
{
	struct __ns1__GetAllJobsEx *_p = soap_new___ns1__GetAllJobsEx(soap);
	if (_p)
	{	soap_default___ns1__GetAllJobsEx(soap, _p);
		_p->ns1__GetAllJobsEx = ns1__GetAllJobsEx;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAllJobsEx(struct soap*, const struct __ns1__GetAllJobsEx *, const char*, const char*);

inline int soap_write___ns1__GetAllJobsEx(struct soap *soap, struct __ns1__GetAllJobsEx const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetAllJobsEx(soap, p), 0) || soap_put___ns1__GetAllJobsEx(soap, p, "-ns1:GetAllJobsEx", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetAllJobsEx(struct soap *soap, const char *URL, struct __ns1__GetAllJobsEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetAllJobsEx(soap, p), 0) || soap_put___ns1__GetAllJobsEx(soap, p, "-ns1:GetAllJobsEx", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetAllJobsEx(struct soap *soap, const char *URL, struct __ns1__GetAllJobsEx const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetAllJobsEx(soap, p), 0) || soap_put___ns1__GetAllJobsEx(soap, p, "-ns1:GetAllJobsEx", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetAllJobsEx * SOAP_FMAC4 soap_get___ns1__GetAllJobsEx(struct soap*, struct __ns1__GetAllJobsEx *, const char*, const char*);

inline int soap_read___ns1__GetAllJobsEx(struct soap *soap, struct __ns1__GetAllJobsEx *p)
{
	if (p)
	{	soap_default___ns1__GetAllJobsEx(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetAllJobsEx(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetAllJobsEx(struct soap *soap, const char *URL, struct __ns1__GetAllJobsEx *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetAllJobsEx(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetAllJobsEx(struct soap *soap, struct __ns1__GetAllJobsEx *p)
{
	if (soap_read___ns1__GetAllJobsEx(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetAllJobs_DEFINED
#define SOAP_TYPE___ns1__GetAllJobs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAllJobs(struct soap*, struct __ns1__GetAllJobs *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAllJobs(struct soap*, const struct __ns1__GetAllJobs *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAllJobs(struct soap*, const char*, int, const struct __ns1__GetAllJobs *, const char*);
SOAP_FMAC3 struct __ns1__GetAllJobs * SOAP_FMAC4 soap_in___ns1__GetAllJobs(struct soap*, const char*, struct __ns1__GetAllJobs *, const char*);
SOAP_FMAC1 struct __ns1__GetAllJobs * SOAP_FMAC2 soap_instantiate___ns1__GetAllJobs(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAllJobs * soap_new___ns1__GetAllJobs(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetAllJobs(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetAllJobs * soap_new_req___ns1__GetAllJobs(
	struct soap *soap)
{
	struct __ns1__GetAllJobs *_p = soap_new___ns1__GetAllJobs(soap);
	if (_p)
	{	soap_default___ns1__GetAllJobs(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetAllJobs * soap_new_set___ns1__GetAllJobs(
	struct soap *soap,
	_ns1__GetAllJobs *ns1__GetAllJobs)
{
	struct __ns1__GetAllJobs *_p = soap_new___ns1__GetAllJobs(soap);
	if (_p)
	{	soap_default___ns1__GetAllJobs(soap, _p);
		_p->ns1__GetAllJobs = ns1__GetAllJobs;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAllJobs(struct soap*, const struct __ns1__GetAllJobs *, const char*, const char*);

inline int soap_write___ns1__GetAllJobs(struct soap *soap, struct __ns1__GetAllJobs const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetAllJobs(soap, p), 0) || soap_put___ns1__GetAllJobs(soap, p, "-ns1:GetAllJobs", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetAllJobs(struct soap *soap, const char *URL, struct __ns1__GetAllJobs const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetAllJobs(soap, p), 0) || soap_put___ns1__GetAllJobs(soap, p, "-ns1:GetAllJobs", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetAllJobs(struct soap *soap, const char *URL, struct __ns1__GetAllJobs const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetAllJobs(soap, p), 0) || soap_put___ns1__GetAllJobs(soap, p, "-ns1:GetAllJobs", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetAllJobs * SOAP_FMAC4 soap_get___ns1__GetAllJobs(struct soap*, struct __ns1__GetAllJobs *, const char*, const char*);

inline int soap_read___ns1__GetAllJobs(struct soap *soap, struct __ns1__GetAllJobs *p)
{
	if (p)
	{	soap_default___ns1__GetAllJobs(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetAllJobs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetAllJobs(struct soap *soap, const char *URL, struct __ns1__GetAllJobs *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetAllJobs(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetAllJobs(struct soap *soap, struct __ns1__GetAllJobs *p)
{
	if (soap_read___ns1__GetAllJobs(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetExpiration_DEFINED
#define SOAP_TYPE___ns1__GetExpiration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetExpiration(struct soap*, struct __ns1__GetExpiration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetExpiration(struct soap*, const struct __ns1__GetExpiration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetExpiration(struct soap*, const char*, int, const struct __ns1__GetExpiration *, const char*);
SOAP_FMAC3 struct __ns1__GetExpiration * SOAP_FMAC4 soap_in___ns1__GetExpiration(struct soap*, const char*, struct __ns1__GetExpiration *, const char*);
SOAP_FMAC1 struct __ns1__GetExpiration * SOAP_FMAC2 soap_instantiate___ns1__GetExpiration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetExpiration * soap_new___ns1__GetExpiration(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetExpiration(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetExpiration * soap_new_req___ns1__GetExpiration(
	struct soap *soap)
{
	struct __ns1__GetExpiration *_p = soap_new___ns1__GetExpiration(soap);
	if (_p)
	{	soap_default___ns1__GetExpiration(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetExpiration * soap_new_set___ns1__GetExpiration(
	struct soap *soap,
	_ns1__GetExpiration *ns1__GetExpiration)
{
	struct __ns1__GetExpiration *_p = soap_new___ns1__GetExpiration(soap);
	if (_p)
	{	soap_default___ns1__GetExpiration(soap, _p);
		_p->ns1__GetExpiration = ns1__GetExpiration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetExpiration(struct soap*, const struct __ns1__GetExpiration *, const char*, const char*);

inline int soap_write___ns1__GetExpiration(struct soap *soap, struct __ns1__GetExpiration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetExpiration(soap, p), 0) || soap_put___ns1__GetExpiration(soap, p, "-ns1:GetExpiration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetExpiration(struct soap *soap, const char *URL, struct __ns1__GetExpiration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetExpiration(soap, p), 0) || soap_put___ns1__GetExpiration(soap, p, "-ns1:GetExpiration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetExpiration(struct soap *soap, const char *URL, struct __ns1__GetExpiration const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetExpiration(soap, p), 0) || soap_put___ns1__GetExpiration(soap, p, "-ns1:GetExpiration", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetExpiration * SOAP_FMAC4 soap_get___ns1__GetExpiration(struct soap*, struct __ns1__GetExpiration *, const char*, const char*);

inline int soap_read___ns1__GetExpiration(struct soap *soap, struct __ns1__GetExpiration *p)
{
	if (p)
	{	soap_default___ns1__GetExpiration(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetExpiration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetExpiration(struct soap *soap, const char *URL, struct __ns1__GetExpiration *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetExpiration(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetExpiration(struct soap *soap, struct __ns1__GetExpiration *p)
{
	if (soap_read___ns1__GetExpiration(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BatchJobEx_DEFINED
#define SOAP_TYPE___ns1__BatchJobEx_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BatchJobEx(struct soap*, struct __ns1__BatchJobEx *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BatchJobEx(struct soap*, const struct __ns1__BatchJobEx *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BatchJobEx(struct soap*, const char*, int, const struct __ns1__BatchJobEx *, const char*);
SOAP_FMAC3 struct __ns1__BatchJobEx * SOAP_FMAC4 soap_in___ns1__BatchJobEx(struct soap*, const char*, struct __ns1__BatchJobEx *, const char*);
SOAP_FMAC1 struct __ns1__BatchJobEx * SOAP_FMAC2 soap_instantiate___ns1__BatchJobEx(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BatchJobEx * soap_new___ns1__BatchJobEx(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BatchJobEx(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BatchJobEx * soap_new_req___ns1__BatchJobEx(
	struct soap *soap)
{
	struct __ns1__BatchJobEx *_p = soap_new___ns1__BatchJobEx(soap);
	if (_p)
	{	soap_default___ns1__BatchJobEx(soap, _p);
	}
	return _p;
}

inline struct __ns1__BatchJobEx * soap_new_set___ns1__BatchJobEx(
	struct soap *soap,
	_ns1__BatchJobEx *ns1__BatchJobEx)
{
	struct __ns1__BatchJobEx *_p = soap_new___ns1__BatchJobEx(soap);
	if (_p)
	{	soap_default___ns1__BatchJobEx(soap, _p);
		_p->ns1__BatchJobEx = ns1__BatchJobEx;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BatchJobEx(struct soap*, const struct __ns1__BatchJobEx *, const char*, const char*);

inline int soap_write___ns1__BatchJobEx(struct soap *soap, struct __ns1__BatchJobEx const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BatchJobEx(soap, p), 0) || soap_put___ns1__BatchJobEx(soap, p, "-ns1:BatchJobEx", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BatchJobEx(struct soap *soap, const char *URL, struct __ns1__BatchJobEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__BatchJobEx(soap, p), 0) || soap_put___ns1__BatchJobEx(soap, p, "-ns1:BatchJobEx", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BatchJobEx(struct soap *soap, const char *URL, struct __ns1__BatchJobEx const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__BatchJobEx(soap, p), 0) || soap_put___ns1__BatchJobEx(soap, p, "-ns1:BatchJobEx", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BatchJobEx * SOAP_FMAC4 soap_get___ns1__BatchJobEx(struct soap*, struct __ns1__BatchJobEx *, const char*, const char*);

inline int soap_read___ns1__BatchJobEx(struct soap *soap, struct __ns1__BatchJobEx *p)
{
	if (p)
	{	soap_default___ns1__BatchJobEx(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BatchJobEx(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BatchJobEx(struct soap *soap, const char *URL, struct __ns1__BatchJobEx *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BatchJobEx(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BatchJobEx(struct soap *soap, struct __ns1__BatchJobEx *p)
{
	if (soap_read___ns1__BatchJobEx(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BatchJob_DEFINED
#define SOAP_TYPE___ns1__BatchJob_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BatchJob(struct soap*, struct __ns1__BatchJob *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BatchJob(struct soap*, const struct __ns1__BatchJob *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BatchJob(struct soap*, const char*, int, const struct __ns1__BatchJob *, const char*);
SOAP_FMAC3 struct __ns1__BatchJob * SOAP_FMAC4 soap_in___ns1__BatchJob(struct soap*, const char*, struct __ns1__BatchJob *, const char*);
SOAP_FMAC1 struct __ns1__BatchJob * SOAP_FMAC2 soap_instantiate___ns1__BatchJob(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BatchJob * soap_new___ns1__BatchJob(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BatchJob(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BatchJob * soap_new_req___ns1__BatchJob(
	struct soap *soap)
{
	struct __ns1__BatchJob *_p = soap_new___ns1__BatchJob(soap);
	if (_p)
	{	soap_default___ns1__BatchJob(soap, _p);
	}
	return _p;
}

inline struct __ns1__BatchJob * soap_new_set___ns1__BatchJob(
	struct soap *soap,
	_ns1__BatchJob *ns1__BatchJob)
{
	struct __ns1__BatchJob *_p = soap_new___ns1__BatchJob(soap);
	if (_p)
	{	soap_default___ns1__BatchJob(soap, _p);
		_p->ns1__BatchJob = ns1__BatchJob;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BatchJob(struct soap*, const struct __ns1__BatchJob *, const char*, const char*);

inline int soap_write___ns1__BatchJob(struct soap *soap, struct __ns1__BatchJob const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BatchJob(soap, p), 0) || soap_put___ns1__BatchJob(soap, p, "-ns1:BatchJob", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BatchJob(struct soap *soap, const char *URL, struct __ns1__BatchJob const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__BatchJob(soap, p), 0) || soap_put___ns1__BatchJob(soap, p, "-ns1:BatchJob", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BatchJob(struct soap *soap, const char *URL, struct __ns1__BatchJob const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__BatchJob(soap, p), 0) || soap_put___ns1__BatchJob(soap, p, "-ns1:BatchJob", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BatchJob * SOAP_FMAC4 soap_get___ns1__BatchJob(struct soap*, struct __ns1__BatchJob *, const char*, const char*);

inline int soap_read___ns1__BatchJob(struct soap *soap, struct __ns1__BatchJob *p)
{
	if (p)
	{	soap_default___ns1__BatchJob(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BatchJob(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BatchJob(struct soap *soap, const char *URL, struct __ns1__BatchJob *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BatchJob(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BatchJob(struct soap *soap, struct __ns1__BatchJob *p)
{
	if (soap_read___ns1__BatchJob(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CloseJob_DEFINED
#define SOAP_TYPE___ns1__CloseJob_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CloseJob(struct soap*, struct __ns1__CloseJob *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CloseJob(struct soap*, const struct __ns1__CloseJob *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CloseJob(struct soap*, const char*, int, const struct __ns1__CloseJob *, const char*);
SOAP_FMAC3 struct __ns1__CloseJob * SOAP_FMAC4 soap_in___ns1__CloseJob(struct soap*, const char*, struct __ns1__CloseJob *, const char*);
SOAP_FMAC1 struct __ns1__CloseJob * SOAP_FMAC2 soap_instantiate___ns1__CloseJob(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CloseJob * soap_new___ns1__CloseJob(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CloseJob(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CloseJob * soap_new_req___ns1__CloseJob(
	struct soap *soap)
{
	struct __ns1__CloseJob *_p = soap_new___ns1__CloseJob(soap);
	if (_p)
	{	soap_default___ns1__CloseJob(soap, _p);
	}
	return _p;
}

inline struct __ns1__CloseJob * soap_new_set___ns1__CloseJob(
	struct soap *soap,
	_ns1__CloseJob *ns1__CloseJob)
{
	struct __ns1__CloseJob *_p = soap_new___ns1__CloseJob(soap);
	if (_p)
	{	soap_default___ns1__CloseJob(soap, _p);
		_p->ns1__CloseJob = ns1__CloseJob;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CloseJob(struct soap*, const struct __ns1__CloseJob *, const char*, const char*);

inline int soap_write___ns1__CloseJob(struct soap *soap, struct __ns1__CloseJob const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CloseJob(soap, p), 0) || soap_put___ns1__CloseJob(soap, p, "-ns1:CloseJob", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CloseJob(struct soap *soap, const char *URL, struct __ns1__CloseJob const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__CloseJob(soap, p), 0) || soap_put___ns1__CloseJob(soap, p, "-ns1:CloseJob", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CloseJob(struct soap *soap, const char *URL, struct __ns1__CloseJob const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__CloseJob(soap, p), 0) || soap_put___ns1__CloseJob(soap, p, "-ns1:CloseJob", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CloseJob * SOAP_FMAC4 soap_get___ns1__CloseJob(struct soap*, struct __ns1__CloseJob *, const char*, const char*);

inline int soap_read___ns1__CloseJob(struct soap *soap, struct __ns1__CloseJob *p)
{
	if (p)
	{	soap_default___ns1__CloseJob(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CloseJob(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CloseJob(struct soap *soap, const char *URL, struct __ns1__CloseJob *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CloseJob(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CloseJob(struct soap *soap, struct __ns1__CloseJob *p)
{
	if (soap_read___ns1__CloseJob(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ExecuteEx_DEFINED
#define SOAP_TYPE___ns1__ExecuteEx_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ExecuteEx(struct soap*, struct __ns1__ExecuteEx *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ExecuteEx(struct soap*, const struct __ns1__ExecuteEx *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ExecuteEx(struct soap*, const char*, int, const struct __ns1__ExecuteEx *, const char*);
SOAP_FMAC3 struct __ns1__ExecuteEx * SOAP_FMAC4 soap_in___ns1__ExecuteEx(struct soap*, const char*, struct __ns1__ExecuteEx *, const char*);
SOAP_FMAC1 struct __ns1__ExecuteEx * SOAP_FMAC2 soap_instantiate___ns1__ExecuteEx(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ExecuteEx * soap_new___ns1__ExecuteEx(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ExecuteEx(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ExecuteEx * soap_new_req___ns1__ExecuteEx(
	struct soap *soap)
{
	struct __ns1__ExecuteEx *_p = soap_new___ns1__ExecuteEx(soap);
	if (_p)
	{	soap_default___ns1__ExecuteEx(soap, _p);
	}
	return _p;
}

inline struct __ns1__ExecuteEx * soap_new_set___ns1__ExecuteEx(
	struct soap *soap,
	_ns1__ExecuteEx *ns1__ExecuteEx)
{
	struct __ns1__ExecuteEx *_p = soap_new___ns1__ExecuteEx(soap);
	if (_p)
	{	soap_default___ns1__ExecuteEx(soap, _p);
		_p->ns1__ExecuteEx = ns1__ExecuteEx;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ExecuteEx(struct soap*, const struct __ns1__ExecuteEx *, const char*, const char*);

inline int soap_write___ns1__ExecuteEx(struct soap *soap, struct __ns1__ExecuteEx const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ExecuteEx(soap, p), 0) || soap_put___ns1__ExecuteEx(soap, p, "-ns1:ExecuteEx", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ExecuteEx(struct soap *soap, const char *URL, struct __ns1__ExecuteEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__ExecuteEx(soap, p), 0) || soap_put___ns1__ExecuteEx(soap, p, "-ns1:ExecuteEx", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ExecuteEx(struct soap *soap, const char *URL, struct __ns1__ExecuteEx const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__ExecuteEx(soap, p), 0) || soap_put___ns1__ExecuteEx(soap, p, "-ns1:ExecuteEx", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ExecuteEx * SOAP_FMAC4 soap_get___ns1__ExecuteEx(struct soap*, struct __ns1__ExecuteEx *, const char*, const char*);

inline int soap_read___ns1__ExecuteEx(struct soap *soap, struct __ns1__ExecuteEx *p)
{
	if (p)
	{	soap_default___ns1__ExecuteEx(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ExecuteEx(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ExecuteEx(struct soap *soap, const char *URL, struct __ns1__ExecuteEx *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ExecuteEx(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ExecuteEx(struct soap *soap, struct __ns1__ExecuteEx *p)
{
	if (soap_read___ns1__ExecuteEx(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__Execute_DEFINED
#define SOAP_TYPE___ns1__Execute_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Execute(struct soap*, struct __ns1__Execute *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Execute(struct soap*, const struct __ns1__Execute *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Execute(struct soap*, const char*, int, const struct __ns1__Execute *, const char*);
SOAP_FMAC3 struct __ns1__Execute * SOAP_FMAC4 soap_in___ns1__Execute(struct soap*, const char*, struct __ns1__Execute *, const char*);
SOAP_FMAC1 struct __ns1__Execute * SOAP_FMAC2 soap_instantiate___ns1__Execute(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Execute * soap_new___ns1__Execute(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Execute(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Execute * soap_new_req___ns1__Execute(
	struct soap *soap)
{
	struct __ns1__Execute *_p = soap_new___ns1__Execute(soap);
	if (_p)
	{	soap_default___ns1__Execute(soap, _p);
	}
	return _p;
}

inline struct __ns1__Execute * soap_new_set___ns1__Execute(
	struct soap *soap,
	_ns1__Execute *ns1__Execute)
{
	struct __ns1__Execute *_p = soap_new___ns1__Execute(soap);
	if (_p)
	{	soap_default___ns1__Execute(soap, _p);
		_p->ns1__Execute = ns1__Execute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Execute(struct soap*, const struct __ns1__Execute *, const char*, const char*);

inline int soap_write___ns1__Execute(struct soap *soap, struct __ns1__Execute const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__Execute(soap, p), 0) || soap_put___ns1__Execute(soap, p, "-ns1:Execute", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Execute(struct soap *soap, const char *URL, struct __ns1__Execute const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__Execute(soap, p), 0) || soap_put___ns1__Execute(soap, p, "-ns1:Execute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Execute(struct soap *soap, const char *URL, struct __ns1__Execute const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__Execute(soap, p), 0) || soap_put___ns1__Execute(soap, p, "-ns1:Execute", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Execute * SOAP_FMAC4 soap_get___ns1__Execute(struct soap*, struct __ns1__Execute *, const char*, const char*);

inline int soap_read___ns1__Execute(struct soap *soap, struct __ns1__Execute *p)
{
	if (p)
	{	soap_default___ns1__Execute(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__Execute(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Execute(struct soap *soap, const char *URL, struct __ns1__Execute *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__Execute(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__Execute(struct soap *soap, struct __ns1__Execute *p)
{
	if (soap_read___ns1__Execute(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__RenewLease_DEFINED
#define SOAP_TYPE___ns1__RenewLease_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RenewLease(struct soap*, struct __ns1__RenewLease *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RenewLease(struct soap*, const struct __ns1__RenewLease *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RenewLease(struct soap*, const char*, int, const struct __ns1__RenewLease *, const char*);
SOAP_FMAC3 struct __ns1__RenewLease * SOAP_FMAC4 soap_in___ns1__RenewLease(struct soap*, const char*, struct __ns1__RenewLease *, const char*);
SOAP_FMAC1 struct __ns1__RenewLease * SOAP_FMAC2 soap_instantiate___ns1__RenewLease(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RenewLease * soap_new___ns1__RenewLease(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__RenewLease(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__RenewLease * soap_new_req___ns1__RenewLease(
	struct soap *soap)
{
	struct __ns1__RenewLease *_p = soap_new___ns1__RenewLease(soap);
	if (_p)
	{	soap_default___ns1__RenewLease(soap, _p);
	}
	return _p;
}

inline struct __ns1__RenewLease * soap_new_set___ns1__RenewLease(
	struct soap *soap,
	_ns1__RenewLease *ns1__RenewLease)
{
	struct __ns1__RenewLease *_p = soap_new___ns1__RenewLease(soap);
	if (_p)
	{	soap_default___ns1__RenewLease(soap, _p);
		_p->ns1__RenewLease = ns1__RenewLease;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RenewLease(struct soap*, const struct __ns1__RenewLease *, const char*, const char*);

inline int soap_write___ns1__RenewLease(struct soap *soap, struct __ns1__RenewLease const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__RenewLease(soap, p), 0) || soap_put___ns1__RenewLease(soap, p, "-ns1:RenewLease", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__RenewLease(struct soap *soap, const char *URL, struct __ns1__RenewLease const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__RenewLease(soap, p), 0) || soap_put___ns1__RenewLease(soap, p, "-ns1:RenewLease", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__RenewLease(struct soap *soap, const char *URL, struct __ns1__RenewLease const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__RenewLease(soap, p), 0) || soap_put___ns1__RenewLease(soap, p, "-ns1:RenewLease", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__RenewLease * SOAP_FMAC4 soap_get___ns1__RenewLease(struct soap*, struct __ns1__RenewLease *, const char*, const char*);

inline int soap_read___ns1__RenewLease(struct soap *soap, struct __ns1__RenewLease *p)
{
	if (p)
	{	soap_default___ns1__RenewLease(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__RenewLease(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__RenewLease(struct soap *soap, const char *URL, struct __ns1__RenewLease *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__RenewLease(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__RenewLease(struct soap *soap, struct __ns1__RenewLease *p)
{
	if (soap_read___ns1__RenewLease(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__OpenJobEx_DEFINED
#define SOAP_TYPE___ns1__OpenJobEx_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OpenJobEx(struct soap*, struct __ns1__OpenJobEx *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OpenJobEx(struct soap*, const struct __ns1__OpenJobEx *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OpenJobEx(struct soap*, const char*, int, const struct __ns1__OpenJobEx *, const char*);
SOAP_FMAC3 struct __ns1__OpenJobEx * SOAP_FMAC4 soap_in___ns1__OpenJobEx(struct soap*, const char*, struct __ns1__OpenJobEx *, const char*);
SOAP_FMAC1 struct __ns1__OpenJobEx * SOAP_FMAC2 soap_instantiate___ns1__OpenJobEx(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OpenJobEx * soap_new___ns1__OpenJobEx(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__OpenJobEx(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__OpenJobEx * soap_new_req___ns1__OpenJobEx(
	struct soap *soap)
{
	struct __ns1__OpenJobEx *_p = soap_new___ns1__OpenJobEx(soap);
	if (_p)
	{	soap_default___ns1__OpenJobEx(soap, _p);
	}
	return _p;
}

inline struct __ns1__OpenJobEx * soap_new_set___ns1__OpenJobEx(
	struct soap *soap,
	_ns1__OpenJobEx *ns1__OpenJobEx)
{
	struct __ns1__OpenJobEx *_p = soap_new___ns1__OpenJobEx(soap);
	if (_p)
	{	soap_default___ns1__OpenJobEx(soap, _p);
		_p->ns1__OpenJobEx = ns1__OpenJobEx;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OpenJobEx(struct soap*, const struct __ns1__OpenJobEx *, const char*, const char*);

inline int soap_write___ns1__OpenJobEx(struct soap *soap, struct __ns1__OpenJobEx const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__OpenJobEx(soap, p), 0) || soap_put___ns1__OpenJobEx(soap, p, "-ns1:OpenJobEx", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__OpenJobEx(struct soap *soap, const char *URL, struct __ns1__OpenJobEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__OpenJobEx(soap, p), 0) || soap_put___ns1__OpenJobEx(soap, p, "-ns1:OpenJobEx", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__OpenJobEx(struct soap *soap, const char *URL, struct __ns1__OpenJobEx const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__OpenJobEx(soap, p), 0) || soap_put___ns1__OpenJobEx(soap, p, "-ns1:OpenJobEx", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__OpenJobEx * SOAP_FMAC4 soap_get___ns1__OpenJobEx(struct soap*, struct __ns1__OpenJobEx *, const char*, const char*);

inline int soap_read___ns1__OpenJobEx(struct soap *soap, struct __ns1__OpenJobEx *p)
{
	if (p)
	{	soap_default___ns1__OpenJobEx(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__OpenJobEx(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__OpenJobEx(struct soap *soap, const char *URL, struct __ns1__OpenJobEx *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__OpenJobEx(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__OpenJobEx(struct soap *soap, struct __ns1__OpenJobEx *p)
{
	if (soap_read___ns1__OpenJobEx(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__OpenJob_DEFINED
#define SOAP_TYPE___ns1__OpenJob_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OpenJob(struct soap*, struct __ns1__OpenJob *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OpenJob(struct soap*, const struct __ns1__OpenJob *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OpenJob(struct soap*, const char*, int, const struct __ns1__OpenJob *, const char*);
SOAP_FMAC3 struct __ns1__OpenJob * SOAP_FMAC4 soap_in___ns1__OpenJob(struct soap*, const char*, struct __ns1__OpenJob *, const char*);
SOAP_FMAC1 struct __ns1__OpenJob * SOAP_FMAC2 soap_instantiate___ns1__OpenJob(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OpenJob * soap_new___ns1__OpenJob(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__OpenJob(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__OpenJob * soap_new_req___ns1__OpenJob(
	struct soap *soap)
{
	struct __ns1__OpenJob *_p = soap_new___ns1__OpenJob(soap);
	if (_p)
	{	soap_default___ns1__OpenJob(soap, _p);
	}
	return _p;
}

inline struct __ns1__OpenJob * soap_new_set___ns1__OpenJob(
	struct soap *soap,
	_ns1__OpenJob *ns1__OpenJob)
{
	struct __ns1__OpenJob *_p = soap_new___ns1__OpenJob(soap);
	if (_p)
	{	soap_default___ns1__OpenJob(soap, _p);
		_p->ns1__OpenJob = ns1__OpenJob;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OpenJob(struct soap*, const struct __ns1__OpenJob *, const char*, const char*);

inline int soap_write___ns1__OpenJob(struct soap *soap, struct __ns1__OpenJob const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__OpenJob(soap, p), 0) || soap_put___ns1__OpenJob(soap, p, "-ns1:OpenJob", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__OpenJob(struct soap *soap, const char *URL, struct __ns1__OpenJob const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__OpenJob(soap, p), 0) || soap_put___ns1__OpenJob(soap, p, "-ns1:OpenJob", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__OpenJob(struct soap *soap, const char *URL, struct __ns1__OpenJob const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__OpenJob(soap, p), 0) || soap_put___ns1__OpenJob(soap, p, "-ns1:OpenJob", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__OpenJob * SOAP_FMAC4 soap_get___ns1__OpenJob(struct soap*, struct __ns1__OpenJob *, const char*, const char*);

inline int soap_read___ns1__OpenJob(struct soap *soap, struct __ns1__OpenJob *p)
{
	if (p)
	{	soap_default___ns1__OpenJob(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__OpenJob(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__OpenJob(struct soap *soap, const char *URL, struct __ns1__OpenJob *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__OpenJob(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__OpenJob(struct soap *soap, struct __ns1__OpenJob *p)
{
	if (soap_read___ns1__OpenJob(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetStatus_DEFINED
#define SOAP_TYPE___ns1__GetStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetStatus(struct soap*, struct __ns1__GetStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetStatus(struct soap*, const struct __ns1__GetStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetStatus(struct soap*, const char*, int, const struct __ns1__GetStatus *, const char*);
SOAP_FMAC3 struct __ns1__GetStatus * SOAP_FMAC4 soap_in___ns1__GetStatus(struct soap*, const char*, struct __ns1__GetStatus *, const char*);
SOAP_FMAC1 struct __ns1__GetStatus * SOAP_FMAC2 soap_instantiate___ns1__GetStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetStatus * soap_new___ns1__GetStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetStatus(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetStatus * soap_new_req___ns1__GetStatus(
	struct soap *soap)
{
	struct __ns1__GetStatus *_p = soap_new___ns1__GetStatus(soap);
	if (_p)
	{	soap_default___ns1__GetStatus(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetStatus * soap_new_set___ns1__GetStatus(
	struct soap *soap,
	_ns1__GetStatus *ns1__GetStatus)
{
	struct __ns1__GetStatus *_p = soap_new___ns1__GetStatus(soap);
	if (_p)
	{	soap_default___ns1__GetStatus(soap, _p);
		_p->ns1__GetStatus = ns1__GetStatus;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetStatus(struct soap*, const struct __ns1__GetStatus *, const char*, const char*);

inline int soap_write___ns1__GetStatus(struct soap *soap, struct __ns1__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetStatus(soap, p), 0) || soap_put___ns1__GetStatus(soap, p, "-ns1:GetStatus", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetStatus(struct soap *soap, const char *URL, struct __ns1__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetStatus(soap, p), 0) || soap_put___ns1__GetStatus(soap, p, "-ns1:GetStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetStatus(struct soap *soap, const char *URL, struct __ns1__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetStatus(soap, p), 0) || soap_put___ns1__GetStatus(soap, p, "-ns1:GetStatus", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetStatus * SOAP_FMAC4 soap_get___ns1__GetStatus(struct soap*, struct __ns1__GetStatus *, const char*, const char*);

inline int soap_read___ns1__GetStatus(struct soap *soap, struct __ns1__GetStatus *p)
{
	if (p)
	{	soap_default___ns1__GetStatus(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetStatus(struct soap *soap, const char *URL, struct __ns1__GetStatus *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetStatus(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetStatus(struct soap *soap, struct __ns1__GetStatus *p)
{
	if (soap_read___ns1__GetStatus(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetVersion_DEFINED
#define SOAP_TYPE___ns1__GetVersion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVersion(struct soap*, struct __ns1__GetVersion *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVersion(struct soap*, const struct __ns1__GetVersion *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVersion(struct soap*, const char*, int, const struct __ns1__GetVersion *, const char*);
SOAP_FMAC3 struct __ns1__GetVersion * SOAP_FMAC4 soap_in___ns1__GetVersion(struct soap*, const char*, struct __ns1__GetVersion *, const char*);
SOAP_FMAC1 struct __ns1__GetVersion * SOAP_FMAC2 soap_instantiate___ns1__GetVersion(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetVersion * soap_new___ns1__GetVersion(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetVersion(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetVersion * soap_new_req___ns1__GetVersion(
	struct soap *soap)
{
	struct __ns1__GetVersion *_p = soap_new___ns1__GetVersion(soap);
	if (_p)
	{	soap_default___ns1__GetVersion(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetVersion * soap_new_set___ns1__GetVersion(
	struct soap *soap,
	_ns1__GetVersion *ns1__GetVersion)
{
	struct __ns1__GetVersion *_p = soap_new___ns1__GetVersion(soap);
	if (_p)
	{	soap_default___ns1__GetVersion(soap, _p);
		_p->ns1__GetVersion = ns1__GetVersion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVersion(struct soap*, const struct __ns1__GetVersion *, const char*, const char*);

inline int soap_write___ns1__GetVersion(struct soap *soap, struct __ns1__GetVersion const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetVersion(soap, p), 0) || soap_put___ns1__GetVersion(soap, p, "-ns1:GetVersion", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetVersion(struct soap *soap, const char *URL, struct __ns1__GetVersion const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetVersion(soap, p), 0) || soap_put___ns1__GetVersion(soap, p, "-ns1:GetVersion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetVersion(struct soap *soap, const char *URL, struct __ns1__GetVersion const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetVersion(soap, p), 0) || soap_put___ns1__GetVersion(soap, p, "-ns1:GetVersion", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetVersion * SOAP_FMAC4 soap_get___ns1__GetVersion(struct soap*, struct __ns1__GetVersion *, const char*, const char*);

inline int soap_read___ns1__GetVersion(struct soap *soap, struct __ns1__GetVersion *p)
{
	if (p)
	{	soap_default___ns1__GetVersion(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetVersion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetVersion(struct soap *soap, const char *URL, struct __ns1__GetVersion *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetVersion(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetVersion(struct soap *soap, struct __ns1__GetVersion *p)
{
	if (soap_read___ns1__GetVersion(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__HelloWorld_DEFINED
#define SOAP_TYPE___ns1__HelloWorld_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__HelloWorld(struct soap*, struct __ns1__HelloWorld *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__HelloWorld(struct soap*, const struct __ns1__HelloWorld *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__HelloWorld(struct soap*, const char*, int, const struct __ns1__HelloWorld *, const char*);
SOAP_FMAC3 struct __ns1__HelloWorld * SOAP_FMAC4 soap_in___ns1__HelloWorld(struct soap*, const char*, struct __ns1__HelloWorld *, const char*);
SOAP_FMAC1 struct __ns1__HelloWorld * SOAP_FMAC2 soap_instantiate___ns1__HelloWorld(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__HelloWorld * soap_new___ns1__HelloWorld(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__HelloWorld(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__HelloWorld * soap_new_req___ns1__HelloWorld(
	struct soap *soap)
{
	struct __ns1__HelloWorld *_p = soap_new___ns1__HelloWorld(soap);
	if (_p)
	{	soap_default___ns1__HelloWorld(soap, _p);
	}
	return _p;
}

inline struct __ns1__HelloWorld * soap_new_set___ns1__HelloWorld(
	struct soap *soap,
	_ns1__HelloWorld *ns1__HelloWorld)
{
	struct __ns1__HelloWorld *_p = soap_new___ns1__HelloWorld(soap);
	if (_p)
	{	soap_default___ns1__HelloWorld(soap, _p);
		_p->ns1__HelloWorld = ns1__HelloWorld;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__HelloWorld(struct soap*, const struct __ns1__HelloWorld *, const char*, const char*);

inline int soap_write___ns1__HelloWorld(struct soap *soap, struct __ns1__HelloWorld const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__HelloWorld(soap, p), 0) || soap_put___ns1__HelloWorld(soap, p, "-ns1:HelloWorld", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__HelloWorld(struct soap *soap, const char *URL, struct __ns1__HelloWorld const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__HelloWorld(soap, p), 0) || soap_put___ns1__HelloWorld(soap, p, "-ns1:HelloWorld", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__HelloWorld(struct soap *soap, const char *URL, struct __ns1__HelloWorld const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__HelloWorld(soap, p), 0) || soap_put___ns1__HelloWorld(soap, p, "-ns1:HelloWorld", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__HelloWorld * SOAP_FMAC4 soap_get___ns1__HelloWorld(struct soap*, struct __ns1__HelloWorld *, const char*, const char*);

inline int soap_read___ns1__HelloWorld(struct soap *soap, struct __ns1__HelloWorld *p)
{
	if (p)
	{	soap_default___ns1__HelloWorld(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__HelloWorld(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__HelloWorld(struct soap *soap, const char *URL, struct __ns1__HelloWorld *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__HelloWorld(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__HelloWorld(struct soap *soap, struct __ns1__HelloWorld *p)
{
	if (soap_read___ns1__HelloWorld(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DiagEx_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DiagEx_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DiagEx(struct soap*, _ns1__DiagEx *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DiagEx(struct soap*, const char *, int, _ns1__DiagEx *const*, const char *);
SOAP_FMAC3 _ns1__DiagEx ** SOAP_FMAC4 soap_in_PointerTo_ns1__DiagEx(struct soap*, const char*, _ns1__DiagEx **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DiagEx(struct soap*, _ns1__DiagEx *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DiagEx ** SOAP_FMAC4 soap_get_PointerTo_ns1__DiagEx(struct soap*, _ns1__DiagEx **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__Diag_DEFINED
#define SOAP_TYPE_PointerTo_ns1__Diag_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Diag(struct soap*, _ns1__Diag *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Diag(struct soap*, const char *, int, _ns1__Diag *const*, const char *);
SOAP_FMAC3 _ns1__Diag ** SOAP_FMAC4 soap_in_PointerTo_ns1__Diag(struct soap*, const char*, _ns1__Diag **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Diag(struct soap*, _ns1__Diag *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Diag ** SOAP_FMAC4 soap_get_PointerTo_ns1__Diag(struct soap*, _ns1__Diag **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CloseAllJobs_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CloseAllJobs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CloseAllJobs(struct soap*, _ns1__CloseAllJobs *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CloseAllJobs(struct soap*, const char *, int, _ns1__CloseAllJobs *const*, const char *);
SOAP_FMAC3 _ns1__CloseAllJobs ** SOAP_FMAC4 soap_in_PointerTo_ns1__CloseAllJobs(struct soap*, const char*, _ns1__CloseAllJobs **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CloseAllJobs(struct soap*, _ns1__CloseAllJobs *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CloseAllJobs ** SOAP_FMAC4 soap_get_PointerTo_ns1__CloseAllJobs(struct soap*, _ns1__CloseAllJobs **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CloseExpiredJobs_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CloseExpiredJobs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CloseExpiredJobs(struct soap*, _ns1__CloseExpiredJobs *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CloseExpiredJobs(struct soap*, const char *, int, _ns1__CloseExpiredJobs *const*, const char *);
SOAP_FMAC3 _ns1__CloseExpiredJobs ** SOAP_FMAC4 soap_in_PointerTo_ns1__CloseExpiredJobs(struct soap*, const char*, _ns1__CloseExpiredJobs **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CloseExpiredJobs(struct soap*, _ns1__CloseExpiredJobs *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CloseExpiredJobs ** SOAP_FMAC4 soap_get_PointerTo_ns1__CloseExpiredJobs(struct soap*, _ns1__CloseExpiredJobs **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetAllJobsEx_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetAllJobsEx_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAllJobsEx(struct soap*, _ns1__GetAllJobsEx *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAllJobsEx(struct soap*, const char *, int, _ns1__GetAllJobsEx *const*, const char *);
SOAP_FMAC3 _ns1__GetAllJobsEx ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAllJobsEx(struct soap*, const char*, _ns1__GetAllJobsEx **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAllJobsEx(struct soap*, _ns1__GetAllJobsEx *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetAllJobsEx ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAllJobsEx(struct soap*, _ns1__GetAllJobsEx **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetAllJobs_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetAllJobs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAllJobs(struct soap*, _ns1__GetAllJobs *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAllJobs(struct soap*, const char *, int, _ns1__GetAllJobs *const*, const char *);
SOAP_FMAC3 _ns1__GetAllJobs ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAllJobs(struct soap*, const char*, _ns1__GetAllJobs **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAllJobs(struct soap*, _ns1__GetAllJobs *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetAllJobs ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAllJobs(struct soap*, _ns1__GetAllJobs **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetExpiration_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetExpiration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetExpiration(struct soap*, _ns1__GetExpiration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetExpiration(struct soap*, const char *, int, _ns1__GetExpiration *const*, const char *);
SOAP_FMAC3 _ns1__GetExpiration ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetExpiration(struct soap*, const char*, _ns1__GetExpiration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetExpiration(struct soap*, _ns1__GetExpiration *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetExpiration ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetExpiration(struct soap*, _ns1__GetExpiration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__BatchJobEx_DEFINED
#define SOAP_TYPE_PointerTo_ns1__BatchJobEx_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BatchJobEx(struct soap*, _ns1__BatchJobEx *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BatchJobEx(struct soap*, const char *, int, _ns1__BatchJobEx *const*, const char *);
SOAP_FMAC3 _ns1__BatchJobEx ** SOAP_FMAC4 soap_in_PointerTo_ns1__BatchJobEx(struct soap*, const char*, _ns1__BatchJobEx **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BatchJobEx(struct soap*, _ns1__BatchJobEx *const*, const char*, const char*);
SOAP_FMAC3 _ns1__BatchJobEx ** SOAP_FMAC4 soap_get_PointerTo_ns1__BatchJobEx(struct soap*, _ns1__BatchJobEx **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__BatchJob_DEFINED
#define SOAP_TYPE_PointerTo_ns1__BatchJob_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BatchJob(struct soap*, _ns1__BatchJob *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BatchJob(struct soap*, const char *, int, _ns1__BatchJob *const*, const char *);
SOAP_FMAC3 _ns1__BatchJob ** SOAP_FMAC4 soap_in_PointerTo_ns1__BatchJob(struct soap*, const char*, _ns1__BatchJob **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BatchJob(struct soap*, _ns1__BatchJob *const*, const char*, const char*);
SOAP_FMAC3 _ns1__BatchJob ** SOAP_FMAC4 soap_get_PointerTo_ns1__BatchJob(struct soap*, _ns1__BatchJob **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CloseJob_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CloseJob_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CloseJob(struct soap*, _ns1__CloseJob *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CloseJob(struct soap*, const char *, int, _ns1__CloseJob *const*, const char *);
SOAP_FMAC3 _ns1__CloseJob ** SOAP_FMAC4 soap_in_PointerTo_ns1__CloseJob(struct soap*, const char*, _ns1__CloseJob **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CloseJob(struct soap*, _ns1__CloseJob *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CloseJob ** SOAP_FMAC4 soap_get_PointerTo_ns1__CloseJob(struct soap*, _ns1__CloseJob **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ExecuteEx_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ExecuteEx_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ExecuteEx(struct soap*, _ns1__ExecuteEx *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ExecuteEx(struct soap*, const char *, int, _ns1__ExecuteEx *const*, const char *);
SOAP_FMAC3 _ns1__ExecuteEx ** SOAP_FMAC4 soap_in_PointerTo_ns1__ExecuteEx(struct soap*, const char*, _ns1__ExecuteEx **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ExecuteEx(struct soap*, _ns1__ExecuteEx *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ExecuteEx ** SOAP_FMAC4 soap_get_PointerTo_ns1__ExecuteEx(struct soap*, _ns1__ExecuteEx **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__Execute_DEFINED
#define SOAP_TYPE_PointerTo_ns1__Execute_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Execute(struct soap*, _ns1__Execute *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Execute(struct soap*, const char *, int, _ns1__Execute *const*, const char *);
SOAP_FMAC3 _ns1__Execute ** SOAP_FMAC4 soap_in_PointerTo_ns1__Execute(struct soap*, const char*, _ns1__Execute **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Execute(struct soap*, _ns1__Execute *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Execute ** SOAP_FMAC4 soap_get_PointerTo_ns1__Execute(struct soap*, _ns1__Execute **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__RenewLease_DEFINED
#define SOAP_TYPE_PointerTo_ns1__RenewLease_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RenewLease(struct soap*, _ns1__RenewLease *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RenewLease(struct soap*, const char *, int, _ns1__RenewLease *const*, const char *);
SOAP_FMAC3 _ns1__RenewLease ** SOAP_FMAC4 soap_in_PointerTo_ns1__RenewLease(struct soap*, const char*, _ns1__RenewLease **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RenewLease(struct soap*, _ns1__RenewLease *const*, const char*, const char*);
SOAP_FMAC3 _ns1__RenewLease ** SOAP_FMAC4 soap_get_PointerTo_ns1__RenewLease(struct soap*, _ns1__RenewLease **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__OpenJobEx_DEFINED
#define SOAP_TYPE_PointerTo_ns1__OpenJobEx_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OpenJobEx(struct soap*, _ns1__OpenJobEx *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OpenJobEx(struct soap*, const char *, int, _ns1__OpenJobEx *const*, const char *);
SOAP_FMAC3 _ns1__OpenJobEx ** SOAP_FMAC4 soap_in_PointerTo_ns1__OpenJobEx(struct soap*, const char*, _ns1__OpenJobEx **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OpenJobEx(struct soap*, _ns1__OpenJobEx *const*, const char*, const char*);
SOAP_FMAC3 _ns1__OpenJobEx ** SOAP_FMAC4 soap_get_PointerTo_ns1__OpenJobEx(struct soap*, _ns1__OpenJobEx **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__OpenJob_DEFINED
#define SOAP_TYPE_PointerTo_ns1__OpenJob_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OpenJob(struct soap*, _ns1__OpenJob *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OpenJob(struct soap*, const char *, int, _ns1__OpenJob *const*, const char *);
SOAP_FMAC3 _ns1__OpenJob ** SOAP_FMAC4 soap_in_PointerTo_ns1__OpenJob(struct soap*, const char*, _ns1__OpenJob **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OpenJob(struct soap*, _ns1__OpenJob *const*, const char*, const char*);
SOAP_FMAC3 _ns1__OpenJob ** SOAP_FMAC4 soap_get_PointerTo_ns1__OpenJob(struct soap*, _ns1__OpenJob **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetStatus_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetStatus(struct soap*, _ns1__GetStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetStatus(struct soap*, const char *, int, _ns1__GetStatus *const*, const char *);
SOAP_FMAC3 _ns1__GetStatus ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetStatus(struct soap*, const char*, _ns1__GetStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetStatus(struct soap*, _ns1__GetStatus *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetStatus ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetStatus(struct soap*, _ns1__GetStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetVersion_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetVersion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetVersion(struct soap*, _ns1__GetVersion *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetVersion(struct soap*, const char *, int, _ns1__GetVersion *const*, const char *);
SOAP_FMAC3 _ns1__GetVersion ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetVersion(struct soap*, const char*, _ns1__GetVersion **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetVersion(struct soap*, _ns1__GetVersion *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetVersion ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetVersion(struct soap*, _ns1__GetVersion **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__HelloWorld_DEFINED
#define SOAP_TYPE_PointerTo_ns1__HelloWorld_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__HelloWorld(struct soap*, _ns1__HelloWorld *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__HelloWorld(struct soap*, const char *, int, _ns1__HelloWorld *const*, const char *);
SOAP_FMAC3 _ns1__HelloWorld ** SOAP_FMAC4 soap_in_PointerTo_ns1__HelloWorld(struct soap*, const char*, _ns1__HelloWorld **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__HelloWorld(struct soap*, _ns1__HelloWorld *const*, const char*, const char*);
SOAP_FMAC3 _ns1__HelloWorld ** SOAP_FMAC4 soap_get_PointerTo_ns1__HelloWorld(struct soap*, _ns1__HelloWorld **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ArrayOfJob_DEFINED
#define SOAP_TYPE_PointerTons1__ArrayOfJob_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfJob(struct soap*, ns1__ArrayOfJob *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfJob(struct soap*, const char *, int, ns1__ArrayOfJob *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfJob ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfJob(struct soap*, const char*, ns1__ArrayOfJob **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfJob(struct soap*, ns1__ArrayOfJob *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfJob ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfJob(struct soap*, ns1__ArrayOfJob **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ScriptExecution_DEFINED
#define SOAP_TYPE_PointerTons1__ScriptExecution_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ScriptExecution(struct soap*, ns1__ScriptExecution *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ScriptExecution(struct soap*, const char *, int, ns1__ScriptExecution *const*, const char *);
SOAP_FMAC3 ns1__ScriptExecution ** SOAP_FMAC4 soap_in_PointerTons1__ScriptExecution(struct soap*, const char*, ns1__ScriptExecution **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ScriptExecution(struct soap*, ns1__ScriptExecution *const*, const char*, const char*);
SOAP_FMAC3 ns1__ScriptExecution ** SOAP_FMAC4 soap_get_PointerTons1__ScriptExecution(struct soap*, ns1__ScriptExecution **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Status_DEFINED
#define SOAP_TYPE_PointerTons1__Status_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Status(struct soap*, ns1__Status *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Status(struct soap*, const char *, int, ns1__Status *const*, const char *);
SOAP_FMAC3 ns1__Status ** SOAP_FMAC4 soap_in_PointerTons1__Status(struct soap*, const char*, ns1__Status **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Status(struct soap*, ns1__Status *const*, const char*, const char*);
SOAP_FMAC3 ns1__Status ** SOAP_FMAC4 soap_get_PointerTons1__Status(struct soap*, ns1__Status **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Job_DEFINED
#define SOAP_TYPE_PointerTons1__Job_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Job(struct soap*, ns1__Job *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Job(struct soap*, const char *, int, ns1__Job *const*, const char *);
SOAP_FMAC3 ns1__Job ** SOAP_FMAC4 soap_in_PointerTons1__Job(struct soap*, const char*, ns1__Job **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Job(struct soap*, ns1__Job *const*, const char*, const char*);
SOAP_FMAC3 ns1__Job ** SOAP_FMAC4 soap_get_PointerTons1__Job(struct soap*, ns1__Job **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__LuaValue_DEFINED
#define SOAP_TYPE_PointerTons1__LuaValue_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__LuaValue(struct soap*, ns1__LuaValue *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__LuaValue(struct soap*, const char *, int, ns1__LuaValue *const*, const char *);
SOAP_FMAC3 ns1__LuaValue ** SOAP_FMAC4 soap_in_PointerTons1__LuaValue(struct soap*, const char*, ns1__LuaValue **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__LuaValue(struct soap*, ns1__LuaValue *const*, const char*, const char*);
SOAP_FMAC3 ns1__LuaValue ** SOAP_FMAC4 soap_get_PointerTons1__LuaValue(struct soap*, ns1__LuaValue **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ArrayOfLuaValue_DEFINED
#define SOAP_TYPE_PointerTons1__ArrayOfLuaValue_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfLuaValue(struct soap*, ns1__ArrayOfLuaValue *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfLuaValue(struct soap*, const char *, int, ns1__ArrayOfLuaValue *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfLuaValue ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfLuaValue(struct soap*, const char*, ns1__ArrayOfLuaValue **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfLuaValue(struct soap*, ns1__ArrayOfLuaValue *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfLuaValue ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfLuaValue(struct soap*, ns1__ArrayOfLuaValue **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new__QName(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__QName(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (soap_read__QName(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (soap_read_string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__Job_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__Job_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__Job(struct soap*, std::vector<ns1__Job *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__Job(struct soap*, const std::vector<ns1__Job *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__Job(struct soap*, const char*, int, const std::vector<ns1__Job *> *, const char*);
SOAP_FMAC3 std::vector<ns1__Job *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__Job(struct soap*, const char*, std::vector<ns1__Job *> *, const char*);
SOAP_FMAC1 std::vector<ns1__Job *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__Job(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__Job *>  * soap_new_std__vectorTemplateOfPointerTons1__Job(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__Job(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__LuaValue_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__LuaValue_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__LuaValue(struct soap*, std::vector<ns1__LuaValue *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__LuaValue(struct soap*, const std::vector<ns1__LuaValue *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__LuaValue(struct soap*, const char*, int, const std::vector<ns1__LuaValue *> *, const char*);
SOAP_FMAC3 std::vector<ns1__LuaValue *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__LuaValue(struct soap*, const char*, std::vector<ns1__LuaValue *> *, const char*);
SOAP_FMAC1 std::vector<ns1__LuaValue *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__LuaValue(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__LuaValue *>  * soap_new_std__vectorTemplateOfPointerTons1__LuaValue(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__LuaValue(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
