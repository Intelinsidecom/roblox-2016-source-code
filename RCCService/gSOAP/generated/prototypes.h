/* generated/prototypes.h
   Generated by wsdl2h 2.8.45 from RCCService.wsdl and typemap.dat
   2025-04-21 08:43:55 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on generated/prototypes.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stl.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://roblox.com/                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

#import "stl.h"	// enable STL containers when used (option -s removes STL dependency)

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://roblox.com/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://roblox.com/"
//gsoap ns1   schema namespace:	http://roblox.com/
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns1__Status.
class ns1__Status;

//  Forward declaration of class ns1__Job.
class ns1__Job;

//  Forward declaration of class ns1__ScriptExecution.
class ns1__ScriptExecution;

//  Forward declaration of class ns1__ArrayOfLuaValue.
class ns1__ArrayOfLuaValue;

//  Forward declaration of class ns1__ArrayOfJob.
class ns1__ArrayOfJob;

//  Forward declaration of class ns1__LuaValue.
class ns1__LuaValue;

//  Forward declaration of class _ns1__HelloWorld.
class _ns1__HelloWorld;

//  Forward declaration of class _ns1__HelloWorldResponse.
class _ns1__HelloWorldResponse;

//  Forward declaration of class _ns1__GetVersion.
class _ns1__GetVersion;

//  Forward declaration of class _ns1__GetVersionResponse.
class _ns1__GetVersionResponse;

//  Forward declaration of class _ns1__GetStatus.
class _ns1__GetStatus;

//  Forward declaration of class _ns1__GetStatusResponse.
class _ns1__GetStatusResponse;

//  Forward declaration of class _ns1__OpenJob.
class _ns1__OpenJob;

//  Forward declaration of class _ns1__OpenJobEx.
class _ns1__OpenJobEx;

//  Forward declaration of class _ns1__OpenJobResponse.
class _ns1__OpenJobResponse;

//  Forward declaration of class _ns1__OpenJobExResponse.
class _ns1__OpenJobExResponse;

//  Forward declaration of class _ns1__RenewLease.
class _ns1__RenewLease;

//  Forward declaration of class _ns1__RenewLeaseResponse.
class _ns1__RenewLeaseResponse;

//  Forward declaration of class _ns1__Execute.
class _ns1__Execute;

//  Forward declaration of class _ns1__ExecuteResponse.
class _ns1__ExecuteResponse;

//  Forward declaration of class _ns1__ExecuteEx.
class _ns1__ExecuteEx;

//  Forward declaration of class _ns1__ExecuteExResponse.
class _ns1__ExecuteExResponse;

//  Forward declaration of class _ns1__CloseJob.
class _ns1__CloseJob;

//  Forward declaration of class _ns1__CloseJobResponse.
class _ns1__CloseJobResponse;

//  Forward declaration of class _ns1__BatchJob.
class _ns1__BatchJob;

//  Forward declaration of class _ns1__BatchJobResponse.
class _ns1__BatchJobResponse;

//  Forward declaration of class _ns1__BatchJobEx.
class _ns1__BatchJobEx;

//  Forward declaration of class _ns1__BatchJobExResponse.
class _ns1__BatchJobExResponse;

//  Forward declaration of class _ns1__GetExpiration.
class _ns1__GetExpiration;

//  Forward declaration of class _ns1__GetExpirationResponse.
class _ns1__GetExpirationResponse;

//  Forward declaration of class _ns1__GetAllJobs.
class _ns1__GetAllJobs;

//  Forward declaration of class _ns1__GetAllJobsResponse.
class _ns1__GetAllJobsResponse;

//  Forward declaration of class _ns1__GetAllJobsEx.
class _ns1__GetAllJobsEx;

//  Forward declaration of class _ns1__GetAllJobsExResponse.
class _ns1__GetAllJobsExResponse;

//  Forward declaration of class _ns1__CloseExpiredJobs.
class _ns1__CloseExpiredJobs;

//  Forward declaration of class _ns1__CloseExpiredJobsResponse.
class _ns1__CloseExpiredJobsResponse;

//  Forward declaration of class _ns1__CloseAllJobs.
class _ns1__CloseAllJobs;

//  Forward declaration of class _ns1__CloseAllJobsResponse.
class _ns1__CloseAllJobsResponse;

//  Forward declaration of class _ns1__Diag.
class _ns1__Diag;

//  Forward declaration of class _ns1__DiagResponse.
class _ns1__DiagResponse;

//  Forward declaration of class _ns1__DiagEx.
class _ns1__DiagEx;

//  Forward declaration of class _ns1__DiagExResponse.
class _ns1__DiagExResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://roblox.com/                                                       *
 *                                                                            *
\******************************************************************************/

/// @brief "http://roblox.com/":LuaType is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns1__LuaType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__LuaType
{
	ns1__LuaType__LUA_USCORETNIL,	///< xs:string value="LUA_TNIL"
	ns1__LuaType__LUA_USCORETBOOLEAN,	///< xs:string value="LUA_TBOOLEAN"
	ns1__LuaType__LUA_USCORETNUMBER,	///< xs:string value="LUA_TNUMBER"
	ns1__LuaType__LUA_USCORETSTRING,	///< xs:string value="LUA_TSTRING"
	ns1__LuaType__LUA_USCORETTABLE,	///< xs:string value="LUA_TTABLE"
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://roblox.com/                                                       *
 *                                                                            *
\******************************************************************************/

/// @brief "http://roblox.com/":Status is a complexType.
///
/// class ns1__Status operations:
/// - ns1__Status* soap_new_ns1__Status(soap*) allocate and default initialize
/// - ns1__Status* soap_new_ns1__Status(soap*, int num) allocate array and default initialize values
/// - ns1__Status* soap_new_req_ns1__Status(soap*, ...) allocate, set required members
/// - ns1__Status* soap_new_set_ns1__Status(soap*, ...) allocate, set all public members
/// - ns1__Status::soap_default(soap*) default initialize members
/// - int soap_read_ns1__Status(soap*, ns1__Status*) deserialize from a stream
/// - int soap_write_ns1__Status(soap*, ns1__Status*) serialize to a stream
/// - ns1__Status* ns1__Status::soap_dup(soap*) returns deep copy of ns1__Status, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Status::soap_del() deep deletes ns1__Status data members, use only after ns1__Status::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__Status
{ public:
/// Element "version" of XSD type xs:string.
    std::string*                         version                        0;	///< Optional element.
/// Element "environmentCount" of XSD type xs:int.
    int                                  environmentCount               1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://roblox.com/":Job is a complexType.
///
/// class ns1__Job operations:
/// - ns1__Job* soap_new_ns1__Job(soap*) allocate and default initialize
/// - ns1__Job* soap_new_ns1__Job(soap*, int num) allocate array and default initialize values
/// - ns1__Job* soap_new_req_ns1__Job(soap*, ...) allocate, set required members
/// - ns1__Job* soap_new_set_ns1__Job(soap*, ...) allocate, set all public members
/// - ns1__Job::soap_default(soap*) default initialize members
/// - int soap_read_ns1__Job(soap*, ns1__Job*) deserialize from a stream
/// - int soap_write_ns1__Job(soap*, ns1__Job*) serialize to a stream
/// - ns1__Job* ns1__Job::soap_dup(soap*) returns deep copy of ns1__Job, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Job::soap_del() deep deletes ns1__Job data members, use only after ns1__Job::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__Job
{ public:
/// Element "id" of XSD type xs:string.
    std::string                          id                             1;	///< Required element.
/// Element "expirationInSeconds" of XSD type xs:double.
    double                               expirationInSeconds            1;	///< Required element.
/// Element "category" of XSD type xs:int.
    int                                  category                       1;	///< Required element.
/// Element "cores" of XSD type xs:double.
    double                               cores                          1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://roblox.com/":ScriptExecution is a complexType.
///
/// class ns1__ScriptExecution operations:
/// - ns1__ScriptExecution* soap_new_ns1__ScriptExecution(soap*) allocate and default initialize
/// - ns1__ScriptExecution* soap_new_ns1__ScriptExecution(soap*, int num) allocate array and default initialize values
/// - ns1__ScriptExecution* soap_new_req_ns1__ScriptExecution(soap*, ...) allocate, set required members
/// - ns1__ScriptExecution* soap_new_set_ns1__ScriptExecution(soap*, ...) allocate, set all public members
/// - ns1__ScriptExecution::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ScriptExecution(soap*, ns1__ScriptExecution*) deserialize from a stream
/// - int soap_write_ns1__ScriptExecution(soap*, ns1__ScriptExecution*) serialize to a stream
/// - ns1__ScriptExecution* ns1__ScriptExecution::soap_dup(soap*) returns deep copy of ns1__ScriptExecution, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ScriptExecution::soap_del() deep deletes ns1__ScriptExecution data members, use only after ns1__ScriptExecution::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ScriptExecution
{ public:
/// Element "name" of XSD type xs:string.
    std::string*                         name                           0;	///< Optional element.
/// Element "script" of XSD type xs:string.
    std::string*                         script                         0;	///< Optional element.
/// Element "arguments" of XSD type "http://roblox.com/":ArrayOfLuaValue.
    ns1__ArrayOfLuaValue*                arguments                      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://roblox.com/":ArrayOfLuaValue is a complexType.
///
/// class ns1__ArrayOfLuaValue operations:
/// - ns1__ArrayOfLuaValue* soap_new_ns1__ArrayOfLuaValue(soap*) allocate and default initialize
/// - ns1__ArrayOfLuaValue* soap_new_ns1__ArrayOfLuaValue(soap*, int num) allocate array and default initialize values
/// - ns1__ArrayOfLuaValue* soap_new_req_ns1__ArrayOfLuaValue(soap*, ...) allocate, set required members
/// - ns1__ArrayOfLuaValue* soap_new_set_ns1__ArrayOfLuaValue(soap*, ...) allocate, set all public members
/// - ns1__ArrayOfLuaValue::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ArrayOfLuaValue(soap*, ns1__ArrayOfLuaValue*) deserialize from a stream
/// - int soap_write_ns1__ArrayOfLuaValue(soap*, ns1__ArrayOfLuaValue*) serialize to a stream
/// - ns1__ArrayOfLuaValue* ns1__ArrayOfLuaValue::soap_dup(soap*) returns deep copy of ns1__ArrayOfLuaValue, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ArrayOfLuaValue::soap_del() deep deletes ns1__ArrayOfLuaValue data members, use only after ns1__ArrayOfLuaValue::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ArrayOfLuaValue
{ public:
/// Vector of ns1__LuaValue* of length 0..unbounded.
    std::vector<ns1__LuaValue*         > LuaValue                       0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://roblox.com/":ArrayOfJob is a complexType.
///
/// class ns1__ArrayOfJob operations:
/// - ns1__ArrayOfJob* soap_new_ns1__ArrayOfJob(soap*) allocate and default initialize
/// - ns1__ArrayOfJob* soap_new_ns1__ArrayOfJob(soap*, int num) allocate array and default initialize values
/// - ns1__ArrayOfJob* soap_new_req_ns1__ArrayOfJob(soap*, ...) allocate, set required members
/// - ns1__ArrayOfJob* soap_new_set_ns1__ArrayOfJob(soap*, ...) allocate, set all public members
/// - ns1__ArrayOfJob::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ArrayOfJob(soap*, ns1__ArrayOfJob*) deserialize from a stream
/// - int soap_write_ns1__ArrayOfJob(soap*, ns1__ArrayOfJob*) serialize to a stream
/// - ns1__ArrayOfJob* ns1__ArrayOfJob::soap_dup(soap*) returns deep copy of ns1__ArrayOfJob, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ArrayOfJob::soap_del() deep deletes ns1__ArrayOfJob data members, use only after ns1__ArrayOfJob::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ArrayOfJob
{ public:
/// Vector of ns1__Job* of length 0..unbounded.
    std::vector<ns1__Job*              > Job                            0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://roblox.com/":LuaValue is a complexType.
///
/// class ns1__LuaValue operations:
/// - ns1__LuaValue* soap_new_ns1__LuaValue(soap*) allocate and default initialize
/// - ns1__LuaValue* soap_new_ns1__LuaValue(soap*, int num) allocate array and default initialize values
/// - ns1__LuaValue* soap_new_req_ns1__LuaValue(soap*, ...) allocate, set required members
/// - ns1__LuaValue* soap_new_set_ns1__LuaValue(soap*, ...) allocate, set all public members
/// - ns1__LuaValue::soap_default(soap*) default initialize members
/// - int soap_read_ns1__LuaValue(soap*, ns1__LuaValue*) deserialize from a stream
/// - int soap_write_ns1__LuaValue(soap*, ns1__LuaValue*) serialize to a stream
/// - ns1__LuaValue* ns1__LuaValue::soap_dup(soap*) returns deep copy of ns1__LuaValue, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__LuaValue::soap_del() deep deletes ns1__LuaValue data members, use only after ns1__LuaValue::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__LuaValue
{ public:
/// Element "type" of XSD type "http://roblox.com/":LuaType.
    enum ns1__LuaType                    type                           1;	///< Required element.
/// Element "value" of XSD type xs:string.
    std::string*                         value                          0;	///< Optional element.
/// Element "table" of XSD type "http://roblox.com/":ArrayOfLuaValue.
    ns1__ArrayOfLuaValue*                table                          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":HelloWorld
/// @brief "http://roblox.com/":HelloWorld is a complexType.
///
/// class _ns1__HelloWorld operations:
/// - _ns1__HelloWorld* soap_new__ns1__HelloWorld(soap*) allocate and default initialize
/// - _ns1__HelloWorld* soap_new__ns1__HelloWorld(soap*, int num) allocate array and default initialize values
/// - _ns1__HelloWorld* soap_new_req__ns1__HelloWorld(soap*, ...) allocate, set required members
/// - _ns1__HelloWorld* soap_new_set__ns1__HelloWorld(soap*, ...) allocate, set all public members
/// - _ns1__HelloWorld::soap_default(soap*) default initialize members
/// - int soap_read__ns1__HelloWorld(soap*, _ns1__HelloWorld*) deserialize from a stream
/// - int soap_write__ns1__HelloWorld(soap*, _ns1__HelloWorld*) serialize to a stream
/// - _ns1__HelloWorld* _ns1__HelloWorld::soap_dup(soap*) returns deep copy of _ns1__HelloWorld, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__HelloWorld::soap_del() deep deletes _ns1__HelloWorld data members, use only after _ns1__HelloWorld::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__HelloWorld
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":HelloWorldResponse
/// @brief "http://roblox.com/":HelloWorldResponse is a complexType.
///
/// class _ns1__HelloWorldResponse operations:
/// - _ns1__HelloWorldResponse* soap_new__ns1__HelloWorldResponse(soap*) allocate and default initialize
/// - _ns1__HelloWorldResponse* soap_new__ns1__HelloWorldResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__HelloWorldResponse* soap_new_req__ns1__HelloWorldResponse(soap*, ...) allocate, set required members
/// - _ns1__HelloWorldResponse* soap_new_set__ns1__HelloWorldResponse(soap*, ...) allocate, set all public members
/// - _ns1__HelloWorldResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__HelloWorldResponse(soap*, _ns1__HelloWorldResponse*) deserialize from a stream
/// - int soap_write__ns1__HelloWorldResponse(soap*, _ns1__HelloWorldResponse*) serialize to a stream
/// - _ns1__HelloWorldResponse* _ns1__HelloWorldResponse::soap_dup(soap*) returns deep copy of _ns1__HelloWorldResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__HelloWorldResponse::soap_del() deep deletes _ns1__HelloWorldResponse data members, use only after _ns1__HelloWorldResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__HelloWorldResponse
{ public:
/// Element "HelloWorldResult" of XSD type xs:string.
    std::string*                         HelloWorldResult               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":GetVersion
/// @brief "http://roblox.com/":GetVersion is a complexType.
///
/// class _ns1__GetVersion operations:
/// - _ns1__GetVersion* soap_new__ns1__GetVersion(soap*) allocate and default initialize
/// - _ns1__GetVersion* soap_new__ns1__GetVersion(soap*, int num) allocate array and default initialize values
/// - _ns1__GetVersion* soap_new_req__ns1__GetVersion(soap*, ...) allocate, set required members
/// - _ns1__GetVersion* soap_new_set__ns1__GetVersion(soap*, ...) allocate, set all public members
/// - _ns1__GetVersion::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetVersion(soap*, _ns1__GetVersion*) deserialize from a stream
/// - int soap_write__ns1__GetVersion(soap*, _ns1__GetVersion*) serialize to a stream
/// - _ns1__GetVersion* _ns1__GetVersion::soap_dup(soap*) returns deep copy of _ns1__GetVersion, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetVersion::soap_del() deep deletes _ns1__GetVersion data members, use only after _ns1__GetVersion::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetVersion
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":GetVersionResponse
/// @brief "http://roblox.com/":GetVersionResponse is a complexType.
///
/// class _ns1__GetVersionResponse operations:
/// - _ns1__GetVersionResponse* soap_new__ns1__GetVersionResponse(soap*) allocate and default initialize
/// - _ns1__GetVersionResponse* soap_new__ns1__GetVersionResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetVersionResponse* soap_new_req__ns1__GetVersionResponse(soap*, ...) allocate, set required members
/// - _ns1__GetVersionResponse* soap_new_set__ns1__GetVersionResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetVersionResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetVersionResponse(soap*, _ns1__GetVersionResponse*) deserialize from a stream
/// - int soap_write__ns1__GetVersionResponse(soap*, _ns1__GetVersionResponse*) serialize to a stream
/// - _ns1__GetVersionResponse* _ns1__GetVersionResponse::soap_dup(soap*) returns deep copy of _ns1__GetVersionResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetVersionResponse::soap_del() deep deletes _ns1__GetVersionResponse data members, use only after _ns1__GetVersionResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetVersionResponse
{ public:
/// Element "GetVersionResult" of XSD type xs:string.
    std::string                          GetVersionResult               1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":GetStatus
/// @brief "http://roblox.com/":GetStatus is a complexType.
///
/// class _ns1__GetStatus operations:
/// - _ns1__GetStatus* soap_new__ns1__GetStatus(soap*) allocate and default initialize
/// - _ns1__GetStatus* soap_new__ns1__GetStatus(soap*, int num) allocate array and default initialize values
/// - _ns1__GetStatus* soap_new_req__ns1__GetStatus(soap*, ...) allocate, set required members
/// - _ns1__GetStatus* soap_new_set__ns1__GetStatus(soap*, ...) allocate, set all public members
/// - _ns1__GetStatus::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetStatus(soap*, _ns1__GetStatus*) deserialize from a stream
/// - int soap_write__ns1__GetStatus(soap*, _ns1__GetStatus*) serialize to a stream
/// - _ns1__GetStatus* _ns1__GetStatus::soap_dup(soap*) returns deep copy of _ns1__GetStatus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetStatus::soap_del() deep deletes _ns1__GetStatus data members, use only after _ns1__GetStatus::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetStatus
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":GetStatusResponse
/// @brief "http://roblox.com/":GetStatusResponse is a complexType.
///
/// class _ns1__GetStatusResponse operations:
/// - _ns1__GetStatusResponse* soap_new__ns1__GetStatusResponse(soap*) allocate and default initialize
/// - _ns1__GetStatusResponse* soap_new__ns1__GetStatusResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetStatusResponse* soap_new_req__ns1__GetStatusResponse(soap*, ...) allocate, set required members
/// - _ns1__GetStatusResponse* soap_new_set__ns1__GetStatusResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetStatusResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetStatusResponse(soap*, _ns1__GetStatusResponse*) deserialize from a stream
/// - int soap_write__ns1__GetStatusResponse(soap*, _ns1__GetStatusResponse*) serialize to a stream
/// - _ns1__GetStatusResponse* _ns1__GetStatusResponse::soap_dup(soap*) returns deep copy of _ns1__GetStatusResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetStatusResponse::soap_del() deep deletes _ns1__GetStatusResponse data members, use only after _ns1__GetStatusResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetStatusResponse
{ public:
/// Element "GetStatusResult" of XSD type "http://roblox.com/":Status.
    ns1__Status*                         GetStatusResult                1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":OpenJob
/// @brief "http://roblox.com/":OpenJob is a complexType.
///
/// class _ns1__OpenJob operations:
/// - _ns1__OpenJob* soap_new__ns1__OpenJob(soap*) allocate and default initialize
/// - _ns1__OpenJob* soap_new__ns1__OpenJob(soap*, int num) allocate array and default initialize values
/// - _ns1__OpenJob* soap_new_req__ns1__OpenJob(soap*, ...) allocate, set required members
/// - _ns1__OpenJob* soap_new_set__ns1__OpenJob(soap*, ...) allocate, set all public members
/// - _ns1__OpenJob::soap_default(soap*) default initialize members
/// - int soap_read__ns1__OpenJob(soap*, _ns1__OpenJob*) deserialize from a stream
/// - int soap_write__ns1__OpenJob(soap*, _ns1__OpenJob*) serialize to a stream
/// - _ns1__OpenJob* _ns1__OpenJob::soap_dup(soap*) returns deep copy of _ns1__OpenJob, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__OpenJob::soap_del() deep deletes _ns1__OpenJob data members, use only after _ns1__OpenJob::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__OpenJob
{ public:
/// Element "job" of XSD type "http://roblox.com/":Job.
    ns1__Job*                            job                            1;	///< Required element.
/// Element "script" of XSD type "http://roblox.com/":ScriptExecution.
    ns1__ScriptExecution*                script                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":OpenJobEx
/// @brief "http://roblox.com/":OpenJobEx is a complexType.
///
/// class _ns1__OpenJobEx operations:
/// - _ns1__OpenJobEx* soap_new__ns1__OpenJobEx(soap*) allocate and default initialize
/// - _ns1__OpenJobEx* soap_new__ns1__OpenJobEx(soap*, int num) allocate array and default initialize values
/// - _ns1__OpenJobEx* soap_new_req__ns1__OpenJobEx(soap*, ...) allocate, set required members
/// - _ns1__OpenJobEx* soap_new_set__ns1__OpenJobEx(soap*, ...) allocate, set all public members
/// - _ns1__OpenJobEx::soap_default(soap*) default initialize members
/// - int soap_read__ns1__OpenJobEx(soap*, _ns1__OpenJobEx*) deserialize from a stream
/// - int soap_write__ns1__OpenJobEx(soap*, _ns1__OpenJobEx*) serialize to a stream
/// - _ns1__OpenJobEx* _ns1__OpenJobEx::soap_dup(soap*) returns deep copy of _ns1__OpenJobEx, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__OpenJobEx::soap_del() deep deletes _ns1__OpenJobEx data members, use only after _ns1__OpenJobEx::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__OpenJobEx
{ public:
/// Element "job" of XSD type "http://roblox.com/":Job.
    ns1__Job*                            job                            1;	///< Required element.
/// Element "script" of XSD type "http://roblox.com/":ScriptExecution.
    ns1__ScriptExecution*                script                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":OpenJobResponse
/// @brief "http://roblox.com/":OpenJobResponse is a complexType.
///
/// class _ns1__OpenJobResponse operations:
/// - _ns1__OpenJobResponse* soap_new__ns1__OpenJobResponse(soap*) allocate and default initialize
/// - _ns1__OpenJobResponse* soap_new__ns1__OpenJobResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__OpenJobResponse* soap_new_req__ns1__OpenJobResponse(soap*, ...) allocate, set required members
/// - _ns1__OpenJobResponse* soap_new_set__ns1__OpenJobResponse(soap*, ...) allocate, set all public members
/// - _ns1__OpenJobResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__OpenJobResponse(soap*, _ns1__OpenJobResponse*) deserialize from a stream
/// - int soap_write__ns1__OpenJobResponse(soap*, _ns1__OpenJobResponse*) serialize to a stream
/// - _ns1__OpenJobResponse* _ns1__OpenJobResponse::soap_dup(soap*) returns deep copy of _ns1__OpenJobResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__OpenJobResponse::soap_del() deep deletes _ns1__OpenJobResponse data members, use only after _ns1__OpenJobResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__OpenJobResponse
{ public:
/// Vector of ns1__LuaValue* of length 0..unbounded.
    std::vector<ns1__LuaValue*         > OpenJobResult                  0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":OpenJobExResponse
/// @brief "http://roblox.com/":OpenJobExResponse is a complexType.
///
/// class _ns1__OpenJobExResponse operations:
/// - _ns1__OpenJobExResponse* soap_new__ns1__OpenJobExResponse(soap*) allocate and default initialize
/// - _ns1__OpenJobExResponse* soap_new__ns1__OpenJobExResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__OpenJobExResponse* soap_new_req__ns1__OpenJobExResponse(soap*, ...) allocate, set required members
/// - _ns1__OpenJobExResponse* soap_new_set__ns1__OpenJobExResponse(soap*, ...) allocate, set all public members
/// - _ns1__OpenJobExResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__OpenJobExResponse(soap*, _ns1__OpenJobExResponse*) deserialize from a stream
/// - int soap_write__ns1__OpenJobExResponse(soap*, _ns1__OpenJobExResponse*) serialize to a stream
/// - _ns1__OpenJobExResponse* _ns1__OpenJobExResponse::soap_dup(soap*) returns deep copy of _ns1__OpenJobExResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__OpenJobExResponse::soap_del() deep deletes _ns1__OpenJobExResponse data members, use only after _ns1__OpenJobExResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__OpenJobExResponse
{ public:
/// Element "OpenJobExResult" of XSD type "http://roblox.com/":ArrayOfLuaValue.
    ns1__ArrayOfLuaValue*                OpenJobExResult                1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":RenewLease
/// @brief "http://roblox.com/":RenewLease is a complexType.
///
/// class _ns1__RenewLease operations:
/// - _ns1__RenewLease* soap_new__ns1__RenewLease(soap*) allocate and default initialize
/// - _ns1__RenewLease* soap_new__ns1__RenewLease(soap*, int num) allocate array and default initialize values
/// - _ns1__RenewLease* soap_new_req__ns1__RenewLease(soap*, ...) allocate, set required members
/// - _ns1__RenewLease* soap_new_set__ns1__RenewLease(soap*, ...) allocate, set all public members
/// - _ns1__RenewLease::soap_default(soap*) default initialize members
/// - int soap_read__ns1__RenewLease(soap*, _ns1__RenewLease*) deserialize from a stream
/// - int soap_write__ns1__RenewLease(soap*, _ns1__RenewLease*) serialize to a stream
/// - _ns1__RenewLease* _ns1__RenewLease::soap_dup(soap*) returns deep copy of _ns1__RenewLease, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RenewLease::soap_del() deep deletes _ns1__RenewLease data members, use only after _ns1__RenewLease::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RenewLease
{ public:
/// Element "jobID" of XSD type xs:string.
    std::string                          jobID                          1;	///< Required element.
/// Element "expirationInSeconds" of XSD type xs:double.
    double                               expirationInSeconds            1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":RenewLeaseResponse
/// @brief "http://roblox.com/":RenewLeaseResponse is a complexType.
///
/// class _ns1__RenewLeaseResponse operations:
/// - _ns1__RenewLeaseResponse* soap_new__ns1__RenewLeaseResponse(soap*) allocate and default initialize
/// - _ns1__RenewLeaseResponse* soap_new__ns1__RenewLeaseResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__RenewLeaseResponse* soap_new_req__ns1__RenewLeaseResponse(soap*, ...) allocate, set required members
/// - _ns1__RenewLeaseResponse* soap_new_set__ns1__RenewLeaseResponse(soap*, ...) allocate, set all public members
/// - _ns1__RenewLeaseResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__RenewLeaseResponse(soap*, _ns1__RenewLeaseResponse*) deserialize from a stream
/// - int soap_write__ns1__RenewLeaseResponse(soap*, _ns1__RenewLeaseResponse*) serialize to a stream
/// - _ns1__RenewLeaseResponse* _ns1__RenewLeaseResponse::soap_dup(soap*) returns deep copy of _ns1__RenewLeaseResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RenewLeaseResponse::soap_del() deep deletes _ns1__RenewLeaseResponse data members, use only after _ns1__RenewLeaseResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RenewLeaseResponse
{ public:
/// Element "RenewLeaseResult" of XSD type xs:double.
    double                               RenewLeaseResult               1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":Execute
/// @brief "http://roblox.com/":Execute is a complexType.
///
/// class _ns1__Execute operations:
/// - _ns1__Execute* soap_new__ns1__Execute(soap*) allocate and default initialize
/// - _ns1__Execute* soap_new__ns1__Execute(soap*, int num) allocate array and default initialize values
/// - _ns1__Execute* soap_new_req__ns1__Execute(soap*, ...) allocate, set required members
/// - _ns1__Execute* soap_new_set__ns1__Execute(soap*, ...) allocate, set all public members
/// - _ns1__Execute::soap_default(soap*) default initialize members
/// - int soap_read__ns1__Execute(soap*, _ns1__Execute*) deserialize from a stream
/// - int soap_write__ns1__Execute(soap*, _ns1__Execute*) serialize to a stream
/// - _ns1__Execute* _ns1__Execute::soap_dup(soap*) returns deep copy of _ns1__Execute, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__Execute::soap_del() deep deletes _ns1__Execute data members, use only after _ns1__Execute::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__Execute
{ public:
/// Element "jobID" of XSD type xs:string.
    std::string                          jobID                          1;	///< Required element.
/// Element "script" of XSD type "http://roblox.com/":ScriptExecution.
    ns1__ScriptExecution*                script                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":ExecuteResponse
/// @brief "http://roblox.com/":ExecuteResponse is a complexType.
///
/// class _ns1__ExecuteResponse operations:
/// - _ns1__ExecuteResponse* soap_new__ns1__ExecuteResponse(soap*) allocate and default initialize
/// - _ns1__ExecuteResponse* soap_new__ns1__ExecuteResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__ExecuteResponse* soap_new_req__ns1__ExecuteResponse(soap*, ...) allocate, set required members
/// - _ns1__ExecuteResponse* soap_new_set__ns1__ExecuteResponse(soap*, ...) allocate, set all public members
/// - _ns1__ExecuteResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ExecuteResponse(soap*, _ns1__ExecuteResponse*) deserialize from a stream
/// - int soap_write__ns1__ExecuteResponse(soap*, _ns1__ExecuteResponse*) serialize to a stream
/// - _ns1__ExecuteResponse* _ns1__ExecuteResponse::soap_dup(soap*) returns deep copy of _ns1__ExecuteResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ExecuteResponse::soap_del() deep deletes _ns1__ExecuteResponse data members, use only after _ns1__ExecuteResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ExecuteResponse
{ public:
/// Vector of ns1__LuaValue* of length 1..unbounded.
    std::vector<ns1__LuaValue*         > ExecuteResult                  1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":ExecuteEx
/// @brief "http://roblox.com/":ExecuteEx is a complexType.
///
/// class _ns1__ExecuteEx operations:
/// - _ns1__ExecuteEx* soap_new__ns1__ExecuteEx(soap*) allocate and default initialize
/// - _ns1__ExecuteEx* soap_new__ns1__ExecuteEx(soap*, int num) allocate array and default initialize values
/// - _ns1__ExecuteEx* soap_new_req__ns1__ExecuteEx(soap*, ...) allocate, set required members
/// - _ns1__ExecuteEx* soap_new_set__ns1__ExecuteEx(soap*, ...) allocate, set all public members
/// - _ns1__ExecuteEx::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ExecuteEx(soap*, _ns1__ExecuteEx*) deserialize from a stream
/// - int soap_write__ns1__ExecuteEx(soap*, _ns1__ExecuteEx*) serialize to a stream
/// - _ns1__ExecuteEx* _ns1__ExecuteEx::soap_dup(soap*) returns deep copy of _ns1__ExecuteEx, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ExecuteEx::soap_del() deep deletes _ns1__ExecuteEx data members, use only after _ns1__ExecuteEx::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ExecuteEx
{ public:
/// Element "jobID" of XSD type xs:string.
    std::string                          jobID                          1;	///< Required element.
/// Element "script" of XSD type "http://roblox.com/":ScriptExecution.
    ns1__ScriptExecution*                script                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":ExecuteExResponse
/// @brief "http://roblox.com/":ExecuteExResponse is a complexType.
///
/// class _ns1__ExecuteExResponse operations:
/// - _ns1__ExecuteExResponse* soap_new__ns1__ExecuteExResponse(soap*) allocate and default initialize
/// - _ns1__ExecuteExResponse* soap_new__ns1__ExecuteExResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__ExecuteExResponse* soap_new_req__ns1__ExecuteExResponse(soap*, ...) allocate, set required members
/// - _ns1__ExecuteExResponse* soap_new_set__ns1__ExecuteExResponse(soap*, ...) allocate, set all public members
/// - _ns1__ExecuteExResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ExecuteExResponse(soap*, _ns1__ExecuteExResponse*) deserialize from a stream
/// - int soap_write__ns1__ExecuteExResponse(soap*, _ns1__ExecuteExResponse*) serialize to a stream
/// - _ns1__ExecuteExResponse* _ns1__ExecuteExResponse::soap_dup(soap*) returns deep copy of _ns1__ExecuteExResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ExecuteExResponse::soap_del() deep deletes _ns1__ExecuteExResponse data members, use only after _ns1__ExecuteExResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ExecuteExResponse
{ public:
/// Element "ExecuteExResult" of XSD type "http://roblox.com/":ArrayOfLuaValue.
    ns1__ArrayOfLuaValue*                ExecuteExResult                1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":CloseJob
/// @brief "http://roblox.com/":CloseJob is a complexType.
///
/// class _ns1__CloseJob operations:
/// - _ns1__CloseJob* soap_new__ns1__CloseJob(soap*) allocate and default initialize
/// - _ns1__CloseJob* soap_new__ns1__CloseJob(soap*, int num) allocate array and default initialize values
/// - _ns1__CloseJob* soap_new_req__ns1__CloseJob(soap*, ...) allocate, set required members
/// - _ns1__CloseJob* soap_new_set__ns1__CloseJob(soap*, ...) allocate, set all public members
/// - _ns1__CloseJob::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CloseJob(soap*, _ns1__CloseJob*) deserialize from a stream
/// - int soap_write__ns1__CloseJob(soap*, _ns1__CloseJob*) serialize to a stream
/// - _ns1__CloseJob* _ns1__CloseJob::soap_dup(soap*) returns deep copy of _ns1__CloseJob, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CloseJob::soap_del() deep deletes _ns1__CloseJob data members, use only after _ns1__CloseJob::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CloseJob
{ public:
/// Element "jobID" of XSD type xs:string.
    std::string                          jobID                          1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":CloseJobResponse
/// @brief "http://roblox.com/":CloseJobResponse is a complexType.
///
/// class _ns1__CloseJobResponse operations:
/// - _ns1__CloseJobResponse* soap_new__ns1__CloseJobResponse(soap*) allocate and default initialize
/// - _ns1__CloseJobResponse* soap_new__ns1__CloseJobResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__CloseJobResponse* soap_new_req__ns1__CloseJobResponse(soap*, ...) allocate, set required members
/// - _ns1__CloseJobResponse* soap_new_set__ns1__CloseJobResponse(soap*, ...) allocate, set all public members
/// - _ns1__CloseJobResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CloseJobResponse(soap*, _ns1__CloseJobResponse*) deserialize from a stream
/// - int soap_write__ns1__CloseJobResponse(soap*, _ns1__CloseJobResponse*) serialize to a stream
/// - _ns1__CloseJobResponse* _ns1__CloseJobResponse::soap_dup(soap*) returns deep copy of _ns1__CloseJobResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CloseJobResponse::soap_del() deep deletes _ns1__CloseJobResponse data members, use only after _ns1__CloseJobResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CloseJobResponse
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":BatchJob
/// @brief "http://roblox.com/":BatchJob is a complexType.
///
/// class _ns1__BatchJob operations:
/// - _ns1__BatchJob* soap_new__ns1__BatchJob(soap*) allocate and default initialize
/// - _ns1__BatchJob* soap_new__ns1__BatchJob(soap*, int num) allocate array and default initialize values
/// - _ns1__BatchJob* soap_new_req__ns1__BatchJob(soap*, ...) allocate, set required members
/// - _ns1__BatchJob* soap_new_set__ns1__BatchJob(soap*, ...) allocate, set all public members
/// - _ns1__BatchJob::soap_default(soap*) default initialize members
/// - int soap_read__ns1__BatchJob(soap*, _ns1__BatchJob*) deserialize from a stream
/// - int soap_write__ns1__BatchJob(soap*, _ns1__BatchJob*) serialize to a stream
/// - _ns1__BatchJob* _ns1__BatchJob::soap_dup(soap*) returns deep copy of _ns1__BatchJob, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__BatchJob::soap_del() deep deletes _ns1__BatchJob data members, use only after _ns1__BatchJob::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__BatchJob
{ public:
/// Element "job" of XSD type "http://roblox.com/":Job.
    ns1__Job*                            job                            1;	///< Required element.
/// Element "script" of XSD type "http://roblox.com/":ScriptExecution.
    ns1__ScriptExecution*                script                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":BatchJobResponse
/// @brief "http://roblox.com/":BatchJobResponse is a complexType.
///
/// class _ns1__BatchJobResponse operations:
/// - _ns1__BatchJobResponse* soap_new__ns1__BatchJobResponse(soap*) allocate and default initialize
/// - _ns1__BatchJobResponse* soap_new__ns1__BatchJobResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__BatchJobResponse* soap_new_req__ns1__BatchJobResponse(soap*, ...) allocate, set required members
/// - _ns1__BatchJobResponse* soap_new_set__ns1__BatchJobResponse(soap*, ...) allocate, set all public members
/// - _ns1__BatchJobResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__BatchJobResponse(soap*, _ns1__BatchJobResponse*) deserialize from a stream
/// - int soap_write__ns1__BatchJobResponse(soap*, _ns1__BatchJobResponse*) serialize to a stream
/// - _ns1__BatchJobResponse* _ns1__BatchJobResponse::soap_dup(soap*) returns deep copy of _ns1__BatchJobResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__BatchJobResponse::soap_del() deep deletes _ns1__BatchJobResponse data members, use only after _ns1__BatchJobResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__BatchJobResponse
{ public:
/// Vector of ns1__LuaValue* of length 1..unbounded.
    std::vector<ns1__LuaValue*         > BatchJobResult                 1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":BatchJobEx
/// @brief "http://roblox.com/":BatchJobEx is a complexType.
///
/// class _ns1__BatchJobEx operations:
/// - _ns1__BatchJobEx* soap_new__ns1__BatchJobEx(soap*) allocate and default initialize
/// - _ns1__BatchJobEx* soap_new__ns1__BatchJobEx(soap*, int num) allocate array and default initialize values
/// - _ns1__BatchJobEx* soap_new_req__ns1__BatchJobEx(soap*, ...) allocate, set required members
/// - _ns1__BatchJobEx* soap_new_set__ns1__BatchJobEx(soap*, ...) allocate, set all public members
/// - _ns1__BatchJobEx::soap_default(soap*) default initialize members
/// - int soap_read__ns1__BatchJobEx(soap*, _ns1__BatchJobEx*) deserialize from a stream
/// - int soap_write__ns1__BatchJobEx(soap*, _ns1__BatchJobEx*) serialize to a stream
/// - _ns1__BatchJobEx* _ns1__BatchJobEx::soap_dup(soap*) returns deep copy of _ns1__BatchJobEx, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__BatchJobEx::soap_del() deep deletes _ns1__BatchJobEx data members, use only after _ns1__BatchJobEx::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__BatchJobEx
{ public:
/// Element "job" of XSD type "http://roblox.com/":Job.
    ns1__Job*                            job                            1;	///< Required element.
/// Element "script" of XSD type "http://roblox.com/":ScriptExecution.
    ns1__ScriptExecution*                script                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":BatchJobExResponse
/// @brief "http://roblox.com/":BatchJobExResponse is a complexType.
///
/// class _ns1__BatchJobExResponse operations:
/// - _ns1__BatchJobExResponse* soap_new__ns1__BatchJobExResponse(soap*) allocate and default initialize
/// - _ns1__BatchJobExResponse* soap_new__ns1__BatchJobExResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__BatchJobExResponse* soap_new_req__ns1__BatchJobExResponse(soap*, ...) allocate, set required members
/// - _ns1__BatchJobExResponse* soap_new_set__ns1__BatchJobExResponse(soap*, ...) allocate, set all public members
/// - _ns1__BatchJobExResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__BatchJobExResponse(soap*, _ns1__BatchJobExResponse*) deserialize from a stream
/// - int soap_write__ns1__BatchJobExResponse(soap*, _ns1__BatchJobExResponse*) serialize to a stream
/// - _ns1__BatchJobExResponse* _ns1__BatchJobExResponse::soap_dup(soap*) returns deep copy of _ns1__BatchJobExResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__BatchJobExResponse::soap_del() deep deletes _ns1__BatchJobExResponse data members, use only after _ns1__BatchJobExResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__BatchJobExResponse
{ public:
/// Element "BatchJobExResult" of XSD type "http://roblox.com/":ArrayOfLuaValue.
    ns1__ArrayOfLuaValue*                BatchJobExResult               1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":GetExpiration
/// @brief "http://roblox.com/":GetExpiration is a complexType.
///
/// class _ns1__GetExpiration operations:
/// - _ns1__GetExpiration* soap_new__ns1__GetExpiration(soap*) allocate and default initialize
/// - _ns1__GetExpiration* soap_new__ns1__GetExpiration(soap*, int num) allocate array and default initialize values
/// - _ns1__GetExpiration* soap_new_req__ns1__GetExpiration(soap*, ...) allocate, set required members
/// - _ns1__GetExpiration* soap_new_set__ns1__GetExpiration(soap*, ...) allocate, set all public members
/// - _ns1__GetExpiration::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetExpiration(soap*, _ns1__GetExpiration*) deserialize from a stream
/// - int soap_write__ns1__GetExpiration(soap*, _ns1__GetExpiration*) serialize to a stream
/// - _ns1__GetExpiration* _ns1__GetExpiration::soap_dup(soap*) returns deep copy of _ns1__GetExpiration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetExpiration::soap_del() deep deletes _ns1__GetExpiration data members, use only after _ns1__GetExpiration::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetExpiration
{ public:
/// Element "jobID" of XSD type xs:string.
    std::string                          jobID                          1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":GetExpirationResponse
/// @brief "http://roblox.com/":GetExpirationResponse is a complexType.
///
/// class _ns1__GetExpirationResponse operations:
/// - _ns1__GetExpirationResponse* soap_new__ns1__GetExpirationResponse(soap*) allocate and default initialize
/// - _ns1__GetExpirationResponse* soap_new__ns1__GetExpirationResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetExpirationResponse* soap_new_req__ns1__GetExpirationResponse(soap*, ...) allocate, set required members
/// - _ns1__GetExpirationResponse* soap_new_set__ns1__GetExpirationResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetExpirationResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetExpirationResponse(soap*, _ns1__GetExpirationResponse*) deserialize from a stream
/// - int soap_write__ns1__GetExpirationResponse(soap*, _ns1__GetExpirationResponse*) serialize to a stream
/// - _ns1__GetExpirationResponse* _ns1__GetExpirationResponse::soap_dup(soap*) returns deep copy of _ns1__GetExpirationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetExpirationResponse::soap_del() deep deletes _ns1__GetExpirationResponse data members, use only after _ns1__GetExpirationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetExpirationResponse
{ public:
/// Element "GetExpirationResult" of XSD type xs:double.
    double                               GetExpirationResult            1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":GetAllJobs
/// @brief "http://roblox.com/":GetAllJobs is a complexType.
///
/// class _ns1__GetAllJobs operations:
/// - _ns1__GetAllJobs* soap_new__ns1__GetAllJobs(soap*) allocate and default initialize
/// - _ns1__GetAllJobs* soap_new__ns1__GetAllJobs(soap*, int num) allocate array and default initialize values
/// - _ns1__GetAllJobs* soap_new_req__ns1__GetAllJobs(soap*, ...) allocate, set required members
/// - _ns1__GetAllJobs* soap_new_set__ns1__GetAllJobs(soap*, ...) allocate, set all public members
/// - _ns1__GetAllJobs::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAllJobs(soap*, _ns1__GetAllJobs*) deserialize from a stream
/// - int soap_write__ns1__GetAllJobs(soap*, _ns1__GetAllJobs*) serialize to a stream
/// - _ns1__GetAllJobs* _ns1__GetAllJobs::soap_dup(soap*) returns deep copy of _ns1__GetAllJobs, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAllJobs::soap_del() deep deletes _ns1__GetAllJobs data members, use only after _ns1__GetAllJobs::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetAllJobs
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":GetAllJobsResponse
/// @brief "http://roblox.com/":GetAllJobsResponse is a complexType.
///
/// class _ns1__GetAllJobsResponse operations:
/// - _ns1__GetAllJobsResponse* soap_new__ns1__GetAllJobsResponse(soap*) allocate and default initialize
/// - _ns1__GetAllJobsResponse* soap_new__ns1__GetAllJobsResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetAllJobsResponse* soap_new_req__ns1__GetAllJobsResponse(soap*, ...) allocate, set required members
/// - _ns1__GetAllJobsResponse* soap_new_set__ns1__GetAllJobsResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetAllJobsResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAllJobsResponse(soap*, _ns1__GetAllJobsResponse*) deserialize from a stream
/// - int soap_write__ns1__GetAllJobsResponse(soap*, _ns1__GetAllJobsResponse*) serialize to a stream
/// - _ns1__GetAllJobsResponse* _ns1__GetAllJobsResponse::soap_dup(soap*) returns deep copy of _ns1__GetAllJobsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAllJobsResponse::soap_del() deep deletes _ns1__GetAllJobsResponse data members, use only after _ns1__GetAllJobsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetAllJobsResponse
{ public:
/// Vector of ns1__Job* of length 1..unbounded.
    std::vector<ns1__Job*              > GetAllJobsResult               1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":GetAllJobsEx
/// @brief "http://roblox.com/":GetAllJobsEx is a complexType.
///
/// class _ns1__GetAllJobsEx operations:
/// - _ns1__GetAllJobsEx* soap_new__ns1__GetAllJobsEx(soap*) allocate and default initialize
/// - _ns1__GetAllJobsEx* soap_new__ns1__GetAllJobsEx(soap*, int num) allocate array and default initialize values
/// - _ns1__GetAllJobsEx* soap_new_req__ns1__GetAllJobsEx(soap*, ...) allocate, set required members
/// - _ns1__GetAllJobsEx* soap_new_set__ns1__GetAllJobsEx(soap*, ...) allocate, set all public members
/// - _ns1__GetAllJobsEx::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAllJobsEx(soap*, _ns1__GetAllJobsEx*) deserialize from a stream
/// - int soap_write__ns1__GetAllJobsEx(soap*, _ns1__GetAllJobsEx*) serialize to a stream
/// - _ns1__GetAllJobsEx* _ns1__GetAllJobsEx::soap_dup(soap*) returns deep copy of _ns1__GetAllJobsEx, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAllJobsEx::soap_del() deep deletes _ns1__GetAllJobsEx data members, use only after _ns1__GetAllJobsEx::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetAllJobsEx
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":GetAllJobsExResponse
/// @brief "http://roblox.com/":GetAllJobsExResponse is a complexType.
///
/// class _ns1__GetAllJobsExResponse operations:
/// - _ns1__GetAllJobsExResponse* soap_new__ns1__GetAllJobsExResponse(soap*) allocate and default initialize
/// - _ns1__GetAllJobsExResponse* soap_new__ns1__GetAllJobsExResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetAllJobsExResponse* soap_new_req__ns1__GetAllJobsExResponse(soap*, ...) allocate, set required members
/// - _ns1__GetAllJobsExResponse* soap_new_set__ns1__GetAllJobsExResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetAllJobsExResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetAllJobsExResponse(soap*, _ns1__GetAllJobsExResponse*) deserialize from a stream
/// - int soap_write__ns1__GetAllJobsExResponse(soap*, _ns1__GetAllJobsExResponse*) serialize to a stream
/// - _ns1__GetAllJobsExResponse* _ns1__GetAllJobsExResponse::soap_dup(soap*) returns deep copy of _ns1__GetAllJobsExResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAllJobsExResponse::soap_del() deep deletes _ns1__GetAllJobsExResponse data members, use only after _ns1__GetAllJobsExResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetAllJobsExResponse
{ public:
/// Element "GetAllJobsExResult" of XSD type "http://roblox.com/":ArrayOfJob.
    ns1__ArrayOfJob*                     GetAllJobsExResult             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":CloseExpiredJobs
/// @brief "http://roblox.com/":CloseExpiredJobs is a complexType.
///
/// class _ns1__CloseExpiredJobs operations:
/// - _ns1__CloseExpiredJobs* soap_new__ns1__CloseExpiredJobs(soap*) allocate and default initialize
/// - _ns1__CloseExpiredJobs* soap_new__ns1__CloseExpiredJobs(soap*, int num) allocate array and default initialize values
/// - _ns1__CloseExpiredJobs* soap_new_req__ns1__CloseExpiredJobs(soap*, ...) allocate, set required members
/// - _ns1__CloseExpiredJobs* soap_new_set__ns1__CloseExpiredJobs(soap*, ...) allocate, set all public members
/// - _ns1__CloseExpiredJobs::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CloseExpiredJobs(soap*, _ns1__CloseExpiredJobs*) deserialize from a stream
/// - int soap_write__ns1__CloseExpiredJobs(soap*, _ns1__CloseExpiredJobs*) serialize to a stream
/// - _ns1__CloseExpiredJobs* _ns1__CloseExpiredJobs::soap_dup(soap*) returns deep copy of _ns1__CloseExpiredJobs, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CloseExpiredJobs::soap_del() deep deletes _ns1__CloseExpiredJobs data members, use only after _ns1__CloseExpiredJobs::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CloseExpiredJobs
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":CloseExpiredJobsResponse
/// @brief "http://roblox.com/":CloseExpiredJobsResponse is a complexType.
///
/// class _ns1__CloseExpiredJobsResponse operations:
/// - _ns1__CloseExpiredJobsResponse* soap_new__ns1__CloseExpiredJobsResponse(soap*) allocate and default initialize
/// - _ns1__CloseExpiredJobsResponse* soap_new__ns1__CloseExpiredJobsResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__CloseExpiredJobsResponse* soap_new_req__ns1__CloseExpiredJobsResponse(soap*, ...) allocate, set required members
/// - _ns1__CloseExpiredJobsResponse* soap_new_set__ns1__CloseExpiredJobsResponse(soap*, ...) allocate, set all public members
/// - _ns1__CloseExpiredJobsResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CloseExpiredJobsResponse(soap*, _ns1__CloseExpiredJobsResponse*) deserialize from a stream
/// - int soap_write__ns1__CloseExpiredJobsResponse(soap*, _ns1__CloseExpiredJobsResponse*) serialize to a stream
/// - _ns1__CloseExpiredJobsResponse* _ns1__CloseExpiredJobsResponse::soap_dup(soap*) returns deep copy of _ns1__CloseExpiredJobsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CloseExpiredJobsResponse::soap_del() deep deletes _ns1__CloseExpiredJobsResponse data members, use only after _ns1__CloseExpiredJobsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CloseExpiredJobsResponse
{ public:
/// Element "CloseExpiredJobsResult" of XSD type xs:int.
    int                                  CloseExpiredJobsResult         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":CloseAllJobs
/// @brief "http://roblox.com/":CloseAllJobs is a complexType.
///
/// class _ns1__CloseAllJobs operations:
/// - _ns1__CloseAllJobs* soap_new__ns1__CloseAllJobs(soap*) allocate and default initialize
/// - _ns1__CloseAllJobs* soap_new__ns1__CloseAllJobs(soap*, int num) allocate array and default initialize values
/// - _ns1__CloseAllJobs* soap_new_req__ns1__CloseAllJobs(soap*, ...) allocate, set required members
/// - _ns1__CloseAllJobs* soap_new_set__ns1__CloseAllJobs(soap*, ...) allocate, set all public members
/// - _ns1__CloseAllJobs::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CloseAllJobs(soap*, _ns1__CloseAllJobs*) deserialize from a stream
/// - int soap_write__ns1__CloseAllJobs(soap*, _ns1__CloseAllJobs*) serialize to a stream
/// - _ns1__CloseAllJobs* _ns1__CloseAllJobs::soap_dup(soap*) returns deep copy of _ns1__CloseAllJobs, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CloseAllJobs::soap_del() deep deletes _ns1__CloseAllJobs data members, use only after _ns1__CloseAllJobs::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CloseAllJobs
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":CloseAllJobsResponse
/// @brief "http://roblox.com/":CloseAllJobsResponse is a complexType.
///
/// class _ns1__CloseAllJobsResponse operations:
/// - _ns1__CloseAllJobsResponse* soap_new__ns1__CloseAllJobsResponse(soap*) allocate and default initialize
/// - _ns1__CloseAllJobsResponse* soap_new__ns1__CloseAllJobsResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__CloseAllJobsResponse* soap_new_req__ns1__CloseAllJobsResponse(soap*, ...) allocate, set required members
/// - _ns1__CloseAllJobsResponse* soap_new_set__ns1__CloseAllJobsResponse(soap*, ...) allocate, set all public members
/// - _ns1__CloseAllJobsResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CloseAllJobsResponse(soap*, _ns1__CloseAllJobsResponse*) deserialize from a stream
/// - int soap_write__ns1__CloseAllJobsResponse(soap*, _ns1__CloseAllJobsResponse*) serialize to a stream
/// - _ns1__CloseAllJobsResponse* _ns1__CloseAllJobsResponse::soap_dup(soap*) returns deep copy of _ns1__CloseAllJobsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CloseAllJobsResponse::soap_del() deep deletes _ns1__CloseAllJobsResponse data members, use only after _ns1__CloseAllJobsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CloseAllJobsResponse
{ public:
/// Element "CloseAllJobsResult" of XSD type xs:int.
    int                                  CloseAllJobsResult             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":Diag
/// @brief "http://roblox.com/":Diag is a complexType.
///
/// class _ns1__Diag operations:
/// - _ns1__Diag* soap_new__ns1__Diag(soap*) allocate and default initialize
/// - _ns1__Diag* soap_new__ns1__Diag(soap*, int num) allocate array and default initialize values
/// - _ns1__Diag* soap_new_req__ns1__Diag(soap*, ...) allocate, set required members
/// - _ns1__Diag* soap_new_set__ns1__Diag(soap*, ...) allocate, set all public members
/// - _ns1__Diag::soap_default(soap*) default initialize members
/// - int soap_read__ns1__Diag(soap*, _ns1__Diag*) deserialize from a stream
/// - int soap_write__ns1__Diag(soap*, _ns1__Diag*) serialize to a stream
/// - _ns1__Diag* _ns1__Diag::soap_dup(soap*) returns deep copy of _ns1__Diag, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__Diag::soap_del() deep deletes _ns1__Diag data members, use only after _ns1__Diag::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__Diag
{ public:
/// Element "type" of XSD type xs:int.
    int                                  type                           1;	///< Required element.
/// Element "jobID" of XSD type xs:string.
    std::string*                         jobID                          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":DiagResponse
/// @brief "http://roblox.com/":DiagResponse is a complexType.
///
/// class _ns1__DiagResponse operations:
/// - _ns1__DiagResponse* soap_new__ns1__DiagResponse(soap*) allocate and default initialize
/// - _ns1__DiagResponse* soap_new__ns1__DiagResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__DiagResponse* soap_new_req__ns1__DiagResponse(soap*, ...) allocate, set required members
/// - _ns1__DiagResponse* soap_new_set__ns1__DiagResponse(soap*, ...) allocate, set all public members
/// - _ns1__DiagResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DiagResponse(soap*, _ns1__DiagResponse*) deserialize from a stream
/// - int soap_write__ns1__DiagResponse(soap*, _ns1__DiagResponse*) serialize to a stream
/// - _ns1__DiagResponse* _ns1__DiagResponse::soap_dup(soap*) returns deep copy of _ns1__DiagResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DiagResponse::soap_del() deep deletes _ns1__DiagResponse data members, use only after _ns1__DiagResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DiagResponse
{ public:
/// Vector of ns1__LuaValue* of length 1..unbounded.
    std::vector<ns1__LuaValue*         > DiagResult                     1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":DiagEx
/// @brief "http://roblox.com/":DiagEx is a complexType.
///
/// class _ns1__DiagEx operations:
/// - _ns1__DiagEx* soap_new__ns1__DiagEx(soap*) allocate and default initialize
/// - _ns1__DiagEx* soap_new__ns1__DiagEx(soap*, int num) allocate array and default initialize values
/// - _ns1__DiagEx* soap_new_req__ns1__DiagEx(soap*, ...) allocate, set required members
/// - _ns1__DiagEx* soap_new_set__ns1__DiagEx(soap*, ...) allocate, set all public members
/// - _ns1__DiagEx::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DiagEx(soap*, _ns1__DiagEx*) deserialize from a stream
/// - int soap_write__ns1__DiagEx(soap*, _ns1__DiagEx*) serialize to a stream
/// - _ns1__DiagEx* _ns1__DiagEx::soap_dup(soap*) returns deep copy of _ns1__DiagEx, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DiagEx::soap_del() deep deletes _ns1__DiagEx data members, use only after _ns1__DiagEx::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DiagEx
{ public:
/// Element "type" of XSD type xs:int.
    int                                  type                           1;	///< Required element.
/// Element "jobID" of XSD type xs:string.
    std::string*                         jobID                          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://roblox.com/":DiagExResponse
/// @brief "http://roblox.com/":DiagExResponse is a complexType.
///
/// class _ns1__DiagExResponse operations:
/// - _ns1__DiagExResponse* soap_new__ns1__DiagExResponse(soap*) allocate and default initialize
/// - _ns1__DiagExResponse* soap_new__ns1__DiagExResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__DiagExResponse* soap_new_req__ns1__DiagExResponse(soap*, ...) allocate, set required members
/// - _ns1__DiagExResponse* soap_new_set__ns1__DiagExResponse(soap*, ...) allocate, set all public members
/// - _ns1__DiagExResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DiagExResponse(soap*, _ns1__DiagExResponse*) deserialize from a stream
/// - int soap_write__ns1__DiagExResponse(soap*, _ns1__DiagExResponse*) serialize to a stream
/// - _ns1__DiagExResponse* _ns1__DiagExResponse::soap_dup(soap*) returns deep copy of _ns1__DiagExResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DiagExResponse::soap_del() deep deletes _ns1__DiagExResponse data members, use only after _ns1__DiagExResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DiagExResponse
{ public:
/// Element "DiagExResult" of XSD type "http://roblox.com/":ArrayOfLuaValue.
    ns1__ArrayOfLuaValue*                DiagExResult                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://roblox.com/                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://roblox.com/                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	RCCServiceSoap 
//gsoap ns1  service type:	RCCServiceSoap 
//gsoap ns1  service namespace:	http://roblox.com/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref RCCServiceSoap

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page RCCServiceSoap Binding "RCCServiceSoap"

@section RCCServiceSoap_operations Operations of Binding "RCCServiceSoap"

  - @ref __ns1__HelloWorld

  - @ref __ns1__GetVersion

  - @ref __ns1__GetStatus

  - @ref __ns1__OpenJob

  - @ref __ns1__OpenJobEx

  - @ref __ns1__RenewLease

  - @ref __ns1__Execute

  - @ref __ns1__ExecuteEx

  - @ref __ns1__CloseJob

  - @ref __ns1__BatchJob

  - @ref __ns1__BatchJobEx

  - @ref __ns1__GetExpiration

  - @ref __ns1__GetAllJobs

  - @ref __ns1__GetAllJobsEx

  - @ref __ns1__CloseExpiredJobs

  - @ref __ns1__CloseAllJobs

  - @ref __ns1__Diag

  - @ref __ns1__DiagEx

  - @ref __ns1__HelloWorld_

  - @ref __ns1__GetVersion_

  - @ref __ns1__GetStatus_

  - @ref __ns1__OpenJob_

  - @ref __ns1__OpenJobEx_

  - @ref __ns1__RenewLease_

  - @ref __ns1__Execute_

  - @ref __ns1__ExecuteEx_

  - @ref __ns1__CloseJob_

  - @ref __ns1__BatchJob_

  - @ref __ns1__BatchJobEx_

  - @ref __ns1__GetExpiration_

  - @ref __ns1__GetAllJobs_

  - @ref __ns1__GetAllJobsEx_

  - @ref __ns1__CloseExpiredJobs_

  - @ref __ns1__CloseAllJobs_

  - @ref __ns1__Diag_

  - @ref __ns1__DiagEx_

@section RCCServiceSoap_ports Default endpoints of Binding "RCCServiceSoap"

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   RCCServiceSoap                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__HelloWorld                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__HelloWorld" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/HelloWorld"

  - Addressing input action: "http://roblox.com/HelloWorld"

  - Addressing output action: "http://roblox.com/HelloWorldResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__HelloWorld(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__HelloWorld*                   ns1__HelloWorld,
    // output parameters:
    _ns1__HelloWorldResponse           &ns1__HelloWorldResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__HelloWorld(
    struct soap *soap,
    // input parameters:
    _ns1__HelloWorld*                   ns1__HelloWorld,
    // output parameters:
    _ns1__HelloWorldResponse           &ns1__HelloWorldResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	HelloWorld SOAP
//gsoap ns1  service method-style:	HelloWorld document
//gsoap ns1  service method-encoding:	HelloWorld literal
//gsoap ns1  service method-input-action:	HelloWorld http://roblox.com/HelloWorld
//gsoap ns1  service method-output-action:	HelloWorld http://roblox.com/HelloWorldResponse
int __ns1__HelloWorld(
    _ns1__HelloWorld*                   ns1__HelloWorld,	///< Input parameter
    _ns1__HelloWorldResponse           &ns1__HelloWorldResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetVersion                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetVersion" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/GetVersion"

  - Addressing input action: "http://roblox.com/GetVersion"

  - Addressing output action: "http://roblox.com/GetVersionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetVersion(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetVersion*                   ns1__GetVersion,
    // output parameters:
    _ns1__GetVersionResponse           &ns1__GetVersionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetVersion(
    struct soap *soap,
    // input parameters:
    _ns1__GetVersion*                   ns1__GetVersion,
    // output parameters:
    _ns1__GetVersionResponse           &ns1__GetVersionResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetVersion SOAP
//gsoap ns1  service method-style:	GetVersion document
//gsoap ns1  service method-encoding:	GetVersion literal
//gsoap ns1  service method-input-action:	GetVersion http://roblox.com/GetVersion
//gsoap ns1  service method-output-action:	GetVersion http://roblox.com/GetVersionResponse
int __ns1__GetVersion(
    _ns1__GetVersion*                   ns1__GetVersion,	///< Input parameter
    _ns1__GetVersionResponse           &ns1__GetVersionResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetStatus                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetStatus" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/GetStatus"

  - Addressing input action: "http://roblox.com/GetStatus"

  - Addressing output action: "http://roblox.com/GetStatusResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetStatus*                    ns1__GetStatus,
    // output parameters:
    _ns1__GetStatusResponse            &ns1__GetStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetStatus(
    struct soap *soap,
    // input parameters:
    _ns1__GetStatus*                    ns1__GetStatus,
    // output parameters:
    _ns1__GetStatusResponse            &ns1__GetStatusResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetStatus SOAP
//gsoap ns1  service method-style:	GetStatus document
//gsoap ns1  service method-encoding:	GetStatus literal
//gsoap ns1  service method-input-action:	GetStatus http://roblox.com/GetStatus
//gsoap ns1  service method-output-action:	GetStatus http://roblox.com/GetStatusResponse
int __ns1__GetStatus(
    _ns1__GetStatus*                    ns1__GetStatus,	///< Input parameter
    _ns1__GetStatusResponse            &ns1__GetStatusResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__OpenJob                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__OpenJob" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/OpenJob"

  - Addressing input action: "http://roblox.com/OpenJob"

  - Addressing output action: "http://roblox.com/OpenJobResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__OpenJob(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__OpenJob*                      ns1__OpenJob,
    // output parameters:
    _ns1__OpenJobResponse              &ns1__OpenJobResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__OpenJob(
    struct soap *soap,
    // input parameters:
    _ns1__OpenJob*                      ns1__OpenJob,
    // output parameters:
    _ns1__OpenJobResponse              &ns1__OpenJobResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	OpenJob SOAP
//gsoap ns1  service method-style:	OpenJob document
//gsoap ns1  service method-encoding:	OpenJob literal
//gsoap ns1  service method-input-action:	OpenJob http://roblox.com/OpenJob
//gsoap ns1  service method-output-action:	OpenJob http://roblox.com/OpenJobResponse
int __ns1__OpenJob(
    _ns1__OpenJob*                      ns1__OpenJob,	///< Input parameter
    _ns1__OpenJobResponse              &ns1__OpenJobResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__OpenJobEx                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__OpenJobEx" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/OpenJobEx"

  - Addressing input action: "http://roblox.com/OpenJobEx"

  - Addressing output action: "http://roblox.com/OpenJobExResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__OpenJobEx(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__OpenJobEx*                    ns1__OpenJobEx,
    // output parameters:
    _ns1__OpenJobExResponse            &ns1__OpenJobExResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__OpenJobEx(
    struct soap *soap,
    // input parameters:
    _ns1__OpenJobEx*                    ns1__OpenJobEx,
    // output parameters:
    _ns1__OpenJobExResponse            &ns1__OpenJobExResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	OpenJobEx SOAP
//gsoap ns1  service method-style:	OpenJobEx document
//gsoap ns1  service method-encoding:	OpenJobEx literal
//gsoap ns1  service method-input-action:	OpenJobEx http://roblox.com/OpenJobEx
//gsoap ns1  service method-output-action:	OpenJobEx http://roblox.com/OpenJobExResponse
int __ns1__OpenJobEx(
    _ns1__OpenJobEx*                    ns1__OpenJobEx,	///< Input parameter
    _ns1__OpenJobExResponse            &ns1__OpenJobExResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__RenewLease                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__RenewLease" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/RenewLease"

  - Addressing input action: "http://roblox.com/RenewLease"

  - Addressing output action: "http://roblox.com/RenewLeaseResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__RenewLease(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__RenewLease*                   ns1__RenewLease,
    // output parameters:
    _ns1__RenewLeaseResponse           &ns1__RenewLeaseResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__RenewLease(
    struct soap *soap,
    // input parameters:
    _ns1__RenewLease*                   ns1__RenewLease,
    // output parameters:
    _ns1__RenewLeaseResponse           &ns1__RenewLeaseResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	RenewLease SOAP
//gsoap ns1  service method-style:	RenewLease document
//gsoap ns1  service method-encoding:	RenewLease literal
//gsoap ns1  service method-input-action:	RenewLease http://roblox.com/RenewLease
//gsoap ns1  service method-output-action:	RenewLease http://roblox.com/RenewLeaseResponse
int __ns1__RenewLease(
    _ns1__RenewLease*                   ns1__RenewLease,	///< Input parameter
    _ns1__RenewLeaseResponse           &ns1__RenewLeaseResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Execute                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Execute" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/Execute"

  - Addressing input action: "http://roblox.com/Execute"

  - Addressing output action: "http://roblox.com/ExecuteResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Execute(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Execute*                      ns1__Execute,
    // output parameters:
    _ns1__ExecuteResponse              &ns1__ExecuteResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Execute(
    struct soap *soap,
    // input parameters:
    _ns1__Execute*                      ns1__Execute,
    // output parameters:
    _ns1__ExecuteResponse              &ns1__ExecuteResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Execute SOAP
//gsoap ns1  service method-style:	Execute document
//gsoap ns1  service method-encoding:	Execute literal
//gsoap ns1  service method-input-action:	Execute http://roblox.com/Execute
//gsoap ns1  service method-output-action:	Execute http://roblox.com/ExecuteResponse
int __ns1__Execute(
    _ns1__Execute*                      ns1__Execute,	///< Input parameter
    _ns1__ExecuteResponse              &ns1__ExecuteResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ExecuteEx                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ExecuteEx" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/ExecuteEx"

  - Addressing input action: "http://roblox.com/ExecuteEx"

  - Addressing output action: "http://roblox.com/ExecuteExResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ExecuteEx(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ExecuteEx*                    ns1__ExecuteEx,
    // output parameters:
    _ns1__ExecuteExResponse            &ns1__ExecuteExResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ExecuteEx(
    struct soap *soap,
    // input parameters:
    _ns1__ExecuteEx*                    ns1__ExecuteEx,
    // output parameters:
    _ns1__ExecuteExResponse            &ns1__ExecuteExResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExecuteEx SOAP
//gsoap ns1  service method-style:	ExecuteEx document
//gsoap ns1  service method-encoding:	ExecuteEx literal
//gsoap ns1  service method-input-action:	ExecuteEx http://roblox.com/ExecuteEx
//gsoap ns1  service method-output-action:	ExecuteEx http://roblox.com/ExecuteExResponse
int __ns1__ExecuteEx(
    _ns1__ExecuteEx*                    ns1__ExecuteEx,	///< Input parameter
    _ns1__ExecuteExResponse            &ns1__ExecuteExResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CloseJob                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CloseJob" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/CloseJob"

  - Addressing input action: "http://roblox.com/CloseJob"

  - Addressing output action: "http://roblox.com/CloseJobResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CloseJob(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CloseJob*                     ns1__CloseJob,
    // output parameters:
    _ns1__CloseJobResponse             &ns1__CloseJobResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CloseJob(
    struct soap *soap,
    // input parameters:
    _ns1__CloseJob*                     ns1__CloseJob,
    // output parameters:
    _ns1__CloseJobResponse             &ns1__CloseJobResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CloseJob SOAP
//gsoap ns1  service method-style:	CloseJob document
//gsoap ns1  service method-encoding:	CloseJob literal
//gsoap ns1  service method-input-action:	CloseJob http://roblox.com/CloseJob
//gsoap ns1  service method-output-action:	CloseJob http://roblox.com/CloseJobResponse
int __ns1__CloseJob(
    _ns1__CloseJob*                     ns1__CloseJob,	///< Input parameter
    _ns1__CloseJobResponse             &ns1__CloseJobResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BatchJob                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BatchJob" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/BatchJob"

  - Addressing input action: "http://roblox.com/BatchJob"

  - Addressing output action: "http://roblox.com/BatchJobResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BatchJob(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BatchJob*                     ns1__BatchJob,
    // output parameters:
    _ns1__BatchJobResponse             &ns1__BatchJobResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BatchJob(
    struct soap *soap,
    // input parameters:
    _ns1__BatchJob*                     ns1__BatchJob,
    // output parameters:
    _ns1__BatchJobResponse             &ns1__BatchJobResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BatchJob SOAP
//gsoap ns1  service method-style:	BatchJob document
//gsoap ns1  service method-encoding:	BatchJob literal
//gsoap ns1  service method-input-action:	BatchJob http://roblox.com/BatchJob
//gsoap ns1  service method-output-action:	BatchJob http://roblox.com/BatchJobResponse
int __ns1__BatchJob(
    _ns1__BatchJob*                     ns1__BatchJob,	///< Input parameter
    _ns1__BatchJobResponse             &ns1__BatchJobResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BatchJobEx                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BatchJobEx" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/BatchJobEx"

  - Addressing input action: "http://roblox.com/BatchJobEx"

  - Addressing output action: "http://roblox.com/BatchJobExResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BatchJobEx(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BatchJobEx*                   ns1__BatchJobEx,
    // output parameters:
    _ns1__BatchJobExResponse           &ns1__BatchJobExResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BatchJobEx(
    struct soap *soap,
    // input parameters:
    _ns1__BatchJobEx*                   ns1__BatchJobEx,
    // output parameters:
    _ns1__BatchJobExResponse           &ns1__BatchJobExResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BatchJobEx SOAP
//gsoap ns1  service method-style:	BatchJobEx document
//gsoap ns1  service method-encoding:	BatchJobEx literal
//gsoap ns1  service method-input-action:	BatchJobEx http://roblox.com/BatchJobEx
//gsoap ns1  service method-output-action:	BatchJobEx http://roblox.com/BatchJobExResponse
int __ns1__BatchJobEx(
    _ns1__BatchJobEx*                   ns1__BatchJobEx,	///< Input parameter
    _ns1__BatchJobExResponse           &ns1__BatchJobExResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetExpiration                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetExpiration" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/GetExpiration"

  - Addressing input action: "http://roblox.com/GetExpiration"

  - Addressing output action: "http://roblox.com/GetExpirationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetExpiration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetExpiration*                ns1__GetExpiration,
    // output parameters:
    _ns1__GetExpirationResponse        &ns1__GetExpirationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetExpiration(
    struct soap *soap,
    // input parameters:
    _ns1__GetExpiration*                ns1__GetExpiration,
    // output parameters:
    _ns1__GetExpirationResponse        &ns1__GetExpirationResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetExpiration SOAP
//gsoap ns1  service method-style:	GetExpiration document
//gsoap ns1  service method-encoding:	GetExpiration literal
//gsoap ns1  service method-input-action:	GetExpiration http://roblox.com/GetExpiration
//gsoap ns1  service method-output-action:	GetExpiration http://roblox.com/GetExpirationResponse
int __ns1__GetExpiration(
    _ns1__GetExpiration*                ns1__GetExpiration,	///< Input parameter
    _ns1__GetExpirationResponse        &ns1__GetExpirationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAllJobs                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAllJobs" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/GetAllJobs"

  - Addressing input action: "http://roblox.com/GetAllJobs"

  - Addressing output action: "http://roblox.com/GetAllJobsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAllJobs(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAllJobs*                   ns1__GetAllJobs,
    // output parameters:
    _ns1__GetAllJobsResponse           &ns1__GetAllJobsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAllJobs(
    struct soap *soap,
    // input parameters:
    _ns1__GetAllJobs*                   ns1__GetAllJobs,
    // output parameters:
    _ns1__GetAllJobsResponse           &ns1__GetAllJobsResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAllJobs SOAP
//gsoap ns1  service method-style:	GetAllJobs document
//gsoap ns1  service method-encoding:	GetAllJobs literal
//gsoap ns1  service method-input-action:	GetAllJobs http://roblox.com/GetAllJobs
//gsoap ns1  service method-output-action:	GetAllJobs http://roblox.com/GetAllJobsResponse
int __ns1__GetAllJobs(
    _ns1__GetAllJobs*                   ns1__GetAllJobs,	///< Input parameter
    _ns1__GetAllJobsResponse           &ns1__GetAllJobsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAllJobsEx                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAllJobsEx" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/GetAllJobsEx"

  - Addressing input action: "http://roblox.com/GetAllJobsEx"

  - Addressing output action: "http://roblox.com/GetAllJobsExResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAllJobsEx(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAllJobsEx*                 ns1__GetAllJobsEx,
    // output parameters:
    _ns1__GetAllJobsExResponse         &ns1__GetAllJobsExResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAllJobsEx(
    struct soap *soap,
    // input parameters:
    _ns1__GetAllJobsEx*                 ns1__GetAllJobsEx,
    // output parameters:
    _ns1__GetAllJobsExResponse         &ns1__GetAllJobsExResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAllJobsEx SOAP
//gsoap ns1  service method-style:	GetAllJobsEx document
//gsoap ns1  service method-encoding:	GetAllJobsEx literal
//gsoap ns1  service method-input-action:	GetAllJobsEx http://roblox.com/GetAllJobsEx
//gsoap ns1  service method-output-action:	GetAllJobsEx http://roblox.com/GetAllJobsExResponse
int __ns1__GetAllJobsEx(
    _ns1__GetAllJobsEx*                 ns1__GetAllJobsEx,	///< Input parameter
    _ns1__GetAllJobsExResponse         &ns1__GetAllJobsExResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CloseExpiredJobs                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CloseExpiredJobs" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/CloseExpiredJobs"

  - Addressing input action: "http://roblox.com/CloseExpiredJobs"

  - Addressing output action: "http://roblox.com/CloseExpiredJobsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CloseExpiredJobs(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CloseExpiredJobs*             ns1__CloseExpiredJobs,
    // output parameters:
    _ns1__CloseExpiredJobsResponse     &ns1__CloseExpiredJobsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CloseExpiredJobs(
    struct soap *soap,
    // input parameters:
    _ns1__CloseExpiredJobs*             ns1__CloseExpiredJobs,
    // output parameters:
    _ns1__CloseExpiredJobsResponse     &ns1__CloseExpiredJobsResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CloseExpiredJobs SOAP
//gsoap ns1  service method-style:	CloseExpiredJobs document
//gsoap ns1  service method-encoding:	CloseExpiredJobs literal
//gsoap ns1  service method-input-action:	CloseExpiredJobs http://roblox.com/CloseExpiredJobs
//gsoap ns1  service method-output-action:	CloseExpiredJobs http://roblox.com/CloseExpiredJobsResponse
int __ns1__CloseExpiredJobs(
    _ns1__CloseExpiredJobs*             ns1__CloseExpiredJobs,	///< Input parameter
    _ns1__CloseExpiredJobsResponse     &ns1__CloseExpiredJobsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CloseAllJobs                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CloseAllJobs" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/CloseAllJobs"

  - Addressing input action: "http://roblox.com/CloseAllJobs"

  - Addressing output action: "http://roblox.com/CloseAllJobsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CloseAllJobs(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CloseAllJobs*                 ns1__CloseAllJobs,
    // output parameters:
    _ns1__CloseAllJobsResponse         &ns1__CloseAllJobsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CloseAllJobs(
    struct soap *soap,
    // input parameters:
    _ns1__CloseAllJobs*                 ns1__CloseAllJobs,
    // output parameters:
    _ns1__CloseAllJobsResponse         &ns1__CloseAllJobsResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CloseAllJobs SOAP
//gsoap ns1  service method-style:	CloseAllJobs document
//gsoap ns1  service method-encoding:	CloseAllJobs literal
//gsoap ns1  service method-input-action:	CloseAllJobs http://roblox.com/CloseAllJobs
//gsoap ns1  service method-output-action:	CloseAllJobs http://roblox.com/CloseAllJobsResponse
int __ns1__CloseAllJobs(
    _ns1__CloseAllJobs*                 ns1__CloseAllJobs,	///< Input parameter
    _ns1__CloseAllJobsResponse         &ns1__CloseAllJobsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Diag                                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Diag" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/Diag"

  - Addressing input action: "http://roblox.com/Diag"

  - Addressing output action: "http://roblox.com/DiagResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Diag(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Diag*                         ns1__Diag,
    // output parameters:
    _ns1__DiagResponse                 &ns1__DiagResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Diag(
    struct soap *soap,
    // input parameters:
    _ns1__Diag*                         ns1__Diag,
    // output parameters:
    _ns1__DiagResponse                 &ns1__DiagResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Diag SOAP
//gsoap ns1  service method-style:	Diag document
//gsoap ns1  service method-encoding:	Diag literal
//gsoap ns1  service method-input-action:	Diag http://roblox.com/Diag
//gsoap ns1  service method-output-action:	Diag http://roblox.com/DiagResponse
int __ns1__Diag(
    _ns1__Diag*                         ns1__Diag,	///< Input parameter
    _ns1__DiagResponse                 &ns1__DiagResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DiagEx                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DiagEx" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/DiagEx"

  - Addressing input action: "http://roblox.com/DiagEx"

  - Addressing output action: "http://roblox.com/DiagExResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DiagEx(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DiagEx*                       ns1__DiagEx,
    // output parameters:
    _ns1__DiagExResponse               &ns1__DiagExResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DiagEx(
    struct soap *soap,
    // input parameters:
    _ns1__DiagEx*                       ns1__DiagEx,
    // output parameters:
    _ns1__DiagExResponse               &ns1__DiagExResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DiagEx SOAP
//gsoap ns1  service method-style:	DiagEx document
//gsoap ns1  service method-encoding:	DiagEx literal
//gsoap ns1  service method-input-action:	DiagEx http://roblox.com/DiagEx
//gsoap ns1  service method-output-action:	DiagEx http://roblox.com/DiagExResponse
int __ns1__DiagEx(
    _ns1__DiagEx*                       ns1__DiagEx,	///< Input parameter
    _ns1__DiagExResponse               &ns1__DiagExResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__HelloWorld_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__HelloWorld_" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/HelloWorld"

  - Addressing input action: "http://roblox.com/HelloWorld"

  - Addressing output action: "http://roblox.com/HelloWorldResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__HelloWorld_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__HelloWorld*                   ns1__HelloWorld,
    // output parameters:
    _ns1__HelloWorldResponse           &ns1__HelloWorldResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__HelloWorld_(
    struct soap *soap,
    // input parameters:
    _ns1__HelloWorld*                   ns1__HelloWorld,
    // output parameters:
    _ns1__HelloWorldResponse           &ns1__HelloWorldResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	HelloWorld_ SOAP
//gsoap ns1  service method-style:	HelloWorld_ document
//gsoap ns1  service method-encoding:	HelloWorld_ literal
//gsoap ns1  service method-input-action:	HelloWorld_ http://roblox.com/HelloWorld
//gsoap ns1  service method-output-action:	HelloWorld_ http://roblox.com/HelloWorldResponse
int __ns1__HelloWorld_(
    _ns1__HelloWorld*                   ns1__HelloWorld,	///< Input parameter
    _ns1__HelloWorldResponse           &ns1__HelloWorldResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetVersion_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetVersion_" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/GetVersion"

  - Addressing input action: "http://roblox.com/GetVersion"

  - Addressing output action: "http://roblox.com/GetVersionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetVersion_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetVersion*                   ns1__GetVersion,
    // output parameters:
    _ns1__GetVersionResponse           &ns1__GetVersionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetVersion_(
    struct soap *soap,
    // input parameters:
    _ns1__GetVersion*                   ns1__GetVersion,
    // output parameters:
    _ns1__GetVersionResponse           &ns1__GetVersionResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetVersion_ SOAP
//gsoap ns1  service method-style:	GetVersion_ document
//gsoap ns1  service method-encoding:	GetVersion_ literal
//gsoap ns1  service method-input-action:	GetVersion_ http://roblox.com/GetVersion
//gsoap ns1  service method-output-action:	GetVersion_ http://roblox.com/GetVersionResponse
int __ns1__GetVersion_(
    _ns1__GetVersion*                   ns1__GetVersion,	///< Input parameter
    _ns1__GetVersionResponse           &ns1__GetVersionResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetStatus_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetStatus_" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/GetStatus"

  - Addressing input action: "http://roblox.com/GetStatus"

  - Addressing output action: "http://roblox.com/GetStatusResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetStatus_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetStatus*                    ns1__GetStatus,
    // output parameters:
    _ns1__GetStatusResponse            &ns1__GetStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetStatus_(
    struct soap *soap,
    // input parameters:
    _ns1__GetStatus*                    ns1__GetStatus,
    // output parameters:
    _ns1__GetStatusResponse            &ns1__GetStatusResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetStatus_ SOAP
//gsoap ns1  service method-style:	GetStatus_ document
//gsoap ns1  service method-encoding:	GetStatus_ literal
//gsoap ns1  service method-input-action:	GetStatus_ http://roblox.com/GetStatus
//gsoap ns1  service method-output-action:	GetStatus_ http://roblox.com/GetStatusResponse
int __ns1__GetStatus_(
    _ns1__GetStatus*                    ns1__GetStatus,	///< Input parameter
    _ns1__GetStatusResponse            &ns1__GetStatusResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__OpenJob_                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__OpenJob_" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/OpenJob"

  - Addressing input action: "http://roblox.com/OpenJob"

  - Addressing output action: "http://roblox.com/OpenJobResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__OpenJob_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__OpenJob*                      ns1__OpenJob,
    // output parameters:
    _ns1__OpenJobResponse              &ns1__OpenJobResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__OpenJob_(
    struct soap *soap,
    // input parameters:
    _ns1__OpenJob*                      ns1__OpenJob,
    // output parameters:
    _ns1__OpenJobResponse              &ns1__OpenJobResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	OpenJob_ SOAP
//gsoap ns1  service method-style:	OpenJob_ document
//gsoap ns1  service method-encoding:	OpenJob_ literal
//gsoap ns1  service method-input-action:	OpenJob_ http://roblox.com/OpenJob
//gsoap ns1  service method-output-action:	OpenJob_ http://roblox.com/OpenJobResponse
int __ns1__OpenJob_(
    _ns1__OpenJob*                      ns1__OpenJob,	///< Input parameter
    _ns1__OpenJobResponse              &ns1__OpenJobResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__OpenJobEx_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__OpenJobEx_" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/OpenJobEx"

  - Addressing input action: "http://roblox.com/OpenJobEx"

  - Addressing output action: "http://roblox.com/OpenJobExResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__OpenJobEx_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__OpenJobEx*                    ns1__OpenJobEx,
    // output parameters:
    _ns1__OpenJobExResponse            &ns1__OpenJobExResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__OpenJobEx_(
    struct soap *soap,
    // input parameters:
    _ns1__OpenJobEx*                    ns1__OpenJobEx,
    // output parameters:
    _ns1__OpenJobExResponse            &ns1__OpenJobExResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	OpenJobEx_ SOAP
//gsoap ns1  service method-style:	OpenJobEx_ document
//gsoap ns1  service method-encoding:	OpenJobEx_ literal
//gsoap ns1  service method-input-action:	OpenJobEx_ http://roblox.com/OpenJobEx
//gsoap ns1  service method-output-action:	OpenJobEx_ http://roblox.com/OpenJobExResponse
int __ns1__OpenJobEx_(
    _ns1__OpenJobEx*                    ns1__OpenJobEx,	///< Input parameter
    _ns1__OpenJobExResponse            &ns1__OpenJobExResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__RenewLease_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__RenewLease_" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/RenewLease"

  - Addressing input action: "http://roblox.com/RenewLease"

  - Addressing output action: "http://roblox.com/RenewLeaseResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__RenewLease_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__RenewLease*                   ns1__RenewLease,
    // output parameters:
    _ns1__RenewLeaseResponse           &ns1__RenewLeaseResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__RenewLease_(
    struct soap *soap,
    // input parameters:
    _ns1__RenewLease*                   ns1__RenewLease,
    // output parameters:
    _ns1__RenewLeaseResponse           &ns1__RenewLeaseResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	RenewLease_ SOAP
//gsoap ns1  service method-style:	RenewLease_ document
//gsoap ns1  service method-encoding:	RenewLease_ literal
//gsoap ns1  service method-input-action:	RenewLease_ http://roblox.com/RenewLease
//gsoap ns1  service method-output-action:	RenewLease_ http://roblox.com/RenewLeaseResponse
int __ns1__RenewLease_(
    _ns1__RenewLease*                   ns1__RenewLease,	///< Input parameter
    _ns1__RenewLeaseResponse           &ns1__RenewLeaseResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Execute_                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Execute_" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/Execute"

  - Addressing input action: "http://roblox.com/Execute"

  - Addressing output action: "http://roblox.com/ExecuteResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Execute_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Execute*                      ns1__Execute,
    // output parameters:
    _ns1__ExecuteResponse              &ns1__ExecuteResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Execute_(
    struct soap *soap,
    // input parameters:
    _ns1__Execute*                      ns1__Execute,
    // output parameters:
    _ns1__ExecuteResponse              &ns1__ExecuteResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Execute_ SOAP
//gsoap ns1  service method-style:	Execute_ document
//gsoap ns1  service method-encoding:	Execute_ literal
//gsoap ns1  service method-input-action:	Execute_ http://roblox.com/Execute
//gsoap ns1  service method-output-action:	Execute_ http://roblox.com/ExecuteResponse
int __ns1__Execute_(
    _ns1__Execute*                      ns1__Execute,	///< Input parameter
    _ns1__ExecuteResponse              &ns1__ExecuteResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ExecuteEx_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ExecuteEx_" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/ExecuteEx"

  - Addressing input action: "http://roblox.com/ExecuteEx"

  - Addressing output action: "http://roblox.com/ExecuteExResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ExecuteEx_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ExecuteEx*                    ns1__ExecuteEx,
    // output parameters:
    _ns1__ExecuteExResponse            &ns1__ExecuteExResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ExecuteEx_(
    struct soap *soap,
    // input parameters:
    _ns1__ExecuteEx*                    ns1__ExecuteEx,
    // output parameters:
    _ns1__ExecuteExResponse            &ns1__ExecuteExResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExecuteEx_ SOAP
//gsoap ns1  service method-style:	ExecuteEx_ document
//gsoap ns1  service method-encoding:	ExecuteEx_ literal
//gsoap ns1  service method-input-action:	ExecuteEx_ http://roblox.com/ExecuteEx
//gsoap ns1  service method-output-action:	ExecuteEx_ http://roblox.com/ExecuteExResponse
int __ns1__ExecuteEx_(
    _ns1__ExecuteEx*                    ns1__ExecuteEx,	///< Input parameter
    _ns1__ExecuteExResponse            &ns1__ExecuteExResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CloseJob_                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CloseJob_" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/CloseJob"

  - Addressing input action: "http://roblox.com/CloseJob"

  - Addressing output action: "http://roblox.com/CloseJobResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CloseJob_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CloseJob*                     ns1__CloseJob,
    // output parameters:
    _ns1__CloseJobResponse             &ns1__CloseJobResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CloseJob_(
    struct soap *soap,
    // input parameters:
    _ns1__CloseJob*                     ns1__CloseJob,
    // output parameters:
    _ns1__CloseJobResponse             &ns1__CloseJobResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CloseJob_ SOAP
//gsoap ns1  service method-style:	CloseJob_ document
//gsoap ns1  service method-encoding:	CloseJob_ literal
//gsoap ns1  service method-input-action:	CloseJob_ http://roblox.com/CloseJob
//gsoap ns1  service method-output-action:	CloseJob_ http://roblox.com/CloseJobResponse
int __ns1__CloseJob_(
    _ns1__CloseJob*                     ns1__CloseJob,	///< Input parameter
    _ns1__CloseJobResponse             &ns1__CloseJobResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BatchJob_                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BatchJob_" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/BatchJob"

  - Addressing input action: "http://roblox.com/BatchJob"

  - Addressing output action: "http://roblox.com/BatchJobResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BatchJob_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BatchJob*                     ns1__BatchJob,
    // output parameters:
    _ns1__BatchJobResponse             &ns1__BatchJobResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BatchJob_(
    struct soap *soap,
    // input parameters:
    _ns1__BatchJob*                     ns1__BatchJob,
    // output parameters:
    _ns1__BatchJobResponse             &ns1__BatchJobResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BatchJob_ SOAP
//gsoap ns1  service method-style:	BatchJob_ document
//gsoap ns1  service method-encoding:	BatchJob_ literal
//gsoap ns1  service method-input-action:	BatchJob_ http://roblox.com/BatchJob
//gsoap ns1  service method-output-action:	BatchJob_ http://roblox.com/BatchJobResponse
int __ns1__BatchJob_(
    _ns1__BatchJob*                     ns1__BatchJob,	///< Input parameter
    _ns1__BatchJobResponse             &ns1__BatchJobResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BatchJobEx_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BatchJobEx_" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/BatchJobEx"

  - Addressing input action: "http://roblox.com/BatchJobEx"

  - Addressing output action: "http://roblox.com/BatchJobExResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BatchJobEx_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BatchJobEx*                   ns1__BatchJobEx,
    // output parameters:
    _ns1__BatchJobExResponse           &ns1__BatchJobExResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BatchJobEx_(
    struct soap *soap,
    // input parameters:
    _ns1__BatchJobEx*                   ns1__BatchJobEx,
    // output parameters:
    _ns1__BatchJobExResponse           &ns1__BatchJobExResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BatchJobEx_ SOAP
//gsoap ns1  service method-style:	BatchJobEx_ document
//gsoap ns1  service method-encoding:	BatchJobEx_ literal
//gsoap ns1  service method-input-action:	BatchJobEx_ http://roblox.com/BatchJobEx
//gsoap ns1  service method-output-action:	BatchJobEx_ http://roblox.com/BatchJobExResponse
int __ns1__BatchJobEx_(
    _ns1__BatchJobEx*                   ns1__BatchJobEx,	///< Input parameter
    _ns1__BatchJobExResponse           &ns1__BatchJobExResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetExpiration_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetExpiration_" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/GetExpiration"

  - Addressing input action: "http://roblox.com/GetExpiration"

  - Addressing output action: "http://roblox.com/GetExpirationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetExpiration_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetExpiration*                ns1__GetExpiration,
    // output parameters:
    _ns1__GetExpirationResponse        &ns1__GetExpirationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetExpiration_(
    struct soap *soap,
    // input parameters:
    _ns1__GetExpiration*                ns1__GetExpiration,
    // output parameters:
    _ns1__GetExpirationResponse        &ns1__GetExpirationResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetExpiration_ SOAP
//gsoap ns1  service method-style:	GetExpiration_ document
//gsoap ns1  service method-encoding:	GetExpiration_ literal
//gsoap ns1  service method-input-action:	GetExpiration_ http://roblox.com/GetExpiration
//gsoap ns1  service method-output-action:	GetExpiration_ http://roblox.com/GetExpirationResponse
int __ns1__GetExpiration_(
    _ns1__GetExpiration*                ns1__GetExpiration,	///< Input parameter
    _ns1__GetExpirationResponse        &ns1__GetExpirationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAllJobs_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAllJobs_" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/GetAllJobs"

  - Addressing input action: "http://roblox.com/GetAllJobs"

  - Addressing output action: "http://roblox.com/GetAllJobsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAllJobs_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAllJobs*                   ns1__GetAllJobs,
    // output parameters:
    _ns1__GetAllJobsResponse           &ns1__GetAllJobsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAllJobs_(
    struct soap *soap,
    // input parameters:
    _ns1__GetAllJobs*                   ns1__GetAllJobs,
    // output parameters:
    _ns1__GetAllJobsResponse           &ns1__GetAllJobsResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAllJobs_ SOAP
//gsoap ns1  service method-style:	GetAllJobs_ document
//gsoap ns1  service method-encoding:	GetAllJobs_ literal
//gsoap ns1  service method-input-action:	GetAllJobs_ http://roblox.com/GetAllJobs
//gsoap ns1  service method-output-action:	GetAllJobs_ http://roblox.com/GetAllJobsResponse
int __ns1__GetAllJobs_(
    _ns1__GetAllJobs*                   ns1__GetAllJobs,	///< Input parameter
    _ns1__GetAllJobsResponse           &ns1__GetAllJobsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAllJobsEx_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAllJobsEx_" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/GetAllJobsEx"

  - Addressing input action: "http://roblox.com/GetAllJobsEx"

  - Addressing output action: "http://roblox.com/GetAllJobsExResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAllJobsEx_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAllJobsEx*                 ns1__GetAllJobsEx,
    // output parameters:
    _ns1__GetAllJobsExResponse         &ns1__GetAllJobsExResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAllJobsEx_(
    struct soap *soap,
    // input parameters:
    _ns1__GetAllJobsEx*                 ns1__GetAllJobsEx,
    // output parameters:
    _ns1__GetAllJobsExResponse         &ns1__GetAllJobsExResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAllJobsEx_ SOAP
//gsoap ns1  service method-style:	GetAllJobsEx_ document
//gsoap ns1  service method-encoding:	GetAllJobsEx_ literal
//gsoap ns1  service method-input-action:	GetAllJobsEx_ http://roblox.com/GetAllJobsEx
//gsoap ns1  service method-output-action:	GetAllJobsEx_ http://roblox.com/GetAllJobsExResponse
int __ns1__GetAllJobsEx_(
    _ns1__GetAllJobsEx*                 ns1__GetAllJobsEx,	///< Input parameter
    _ns1__GetAllJobsExResponse         &ns1__GetAllJobsExResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CloseExpiredJobs_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CloseExpiredJobs_" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/CloseExpiredJobs"

  - Addressing input action: "http://roblox.com/CloseExpiredJobs"

  - Addressing output action: "http://roblox.com/CloseExpiredJobsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CloseExpiredJobs_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CloseExpiredJobs*             ns1__CloseExpiredJobs,
    // output parameters:
    _ns1__CloseExpiredJobsResponse     &ns1__CloseExpiredJobsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CloseExpiredJobs_(
    struct soap *soap,
    // input parameters:
    _ns1__CloseExpiredJobs*             ns1__CloseExpiredJobs,
    // output parameters:
    _ns1__CloseExpiredJobsResponse     &ns1__CloseExpiredJobsResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CloseExpiredJobs_ SOAP
//gsoap ns1  service method-style:	CloseExpiredJobs_ document
//gsoap ns1  service method-encoding:	CloseExpiredJobs_ literal
//gsoap ns1  service method-input-action:	CloseExpiredJobs_ http://roblox.com/CloseExpiredJobs
//gsoap ns1  service method-output-action:	CloseExpiredJobs_ http://roblox.com/CloseExpiredJobsResponse
int __ns1__CloseExpiredJobs_(
    _ns1__CloseExpiredJobs*             ns1__CloseExpiredJobs,	///< Input parameter
    _ns1__CloseExpiredJobsResponse     &ns1__CloseExpiredJobsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CloseAllJobs_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CloseAllJobs_" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/CloseAllJobs"

  - Addressing input action: "http://roblox.com/CloseAllJobs"

  - Addressing output action: "http://roblox.com/CloseAllJobsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CloseAllJobs_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CloseAllJobs*                 ns1__CloseAllJobs,
    // output parameters:
    _ns1__CloseAllJobsResponse         &ns1__CloseAllJobsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CloseAllJobs_(
    struct soap *soap,
    // input parameters:
    _ns1__CloseAllJobs*                 ns1__CloseAllJobs,
    // output parameters:
    _ns1__CloseAllJobsResponse         &ns1__CloseAllJobsResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CloseAllJobs_ SOAP
//gsoap ns1  service method-style:	CloseAllJobs_ document
//gsoap ns1  service method-encoding:	CloseAllJobs_ literal
//gsoap ns1  service method-input-action:	CloseAllJobs_ http://roblox.com/CloseAllJobs
//gsoap ns1  service method-output-action:	CloseAllJobs_ http://roblox.com/CloseAllJobsResponse
int __ns1__CloseAllJobs_(
    _ns1__CloseAllJobs*                 ns1__CloseAllJobs,	///< Input parameter
    _ns1__CloseAllJobsResponse         &ns1__CloseAllJobsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Diag_                                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Diag_" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/Diag"

  - Addressing input action: "http://roblox.com/Diag"

  - Addressing output action: "http://roblox.com/DiagResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Diag_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Diag*                         ns1__Diag,
    // output parameters:
    _ns1__DiagResponse                 &ns1__DiagResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Diag_(
    struct soap *soap,
    // input parameters:
    _ns1__Diag*                         ns1__Diag,
    // output parameters:
    _ns1__DiagResponse                 &ns1__DiagResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Diag_ SOAP
//gsoap ns1  service method-style:	Diag_ document
//gsoap ns1  service method-encoding:	Diag_ literal
//gsoap ns1  service method-input-action:	Diag_ http://roblox.com/Diag
//gsoap ns1  service method-output-action:	Diag_ http://roblox.com/DiagResponse
int __ns1__Diag_(
    _ns1__Diag*                         ns1__Diag,	///< Input parameter
    _ns1__DiagResponse                 &ns1__DiagResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DiagEx_                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DiagEx_" of service binding "RCCServiceSoap".

  - SOAP document/literal style messaging

  - Default SOAP action or REST location path:
    - "http://roblox.com/DiagEx"

  - Addressing input action: "http://roblox.com/DiagEx"

  - Addressing output action: "http://roblox.com/DiagExResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DiagEx_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DiagEx*                       ns1__DiagEx,
    // output parameters:
    _ns1__DiagExResponse               &ns1__DiagExResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DiagEx_(
    struct soap *soap,
    // input parameters:
    _ns1__DiagEx*                       ns1__DiagEx,
    // output parameters:
    _ns1__DiagExResponse               &ns1__DiagExResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h generated with soapcpp2):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h generated with soapcpp2):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DiagEx_ SOAP
//gsoap ns1  service method-style:	DiagEx_ document
//gsoap ns1  service method-encoding:	DiagEx_ literal
//gsoap ns1  service method-input-action:	DiagEx_ http://roblox.com/DiagEx
//gsoap ns1  service method-output-action:	DiagEx_ http://roblox.com/DiagExResponse
int __ns1__DiagEx_(
    _ns1__DiagEx*                       ns1__DiagEx,	///< Input parameter
    _ns1__DiagExResponse               &ns1__DiagExResponse	///< Output parameter
);

/**

@page RCCServiceSoap Binding "RCCServiceSoap"

@section RCCServiceSoap_policy_enablers Policy Enablers of Binding "RCCServiceSoap"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://roblox.com/"

  - <ns1:HelloWorld> @ref _ns1__HelloWorld
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__HelloWorld(struct soap*, _ns1__HelloWorld*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__HelloWorld(struct soap*, _ns1__HelloWorld*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__HelloWorld(struct soap*, const char *URL, _ns1__HelloWorld*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__HelloWorld(struct soap*, const char *URL, _ns1__HelloWorld*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__HelloWorld(struct soap*, const char *URL, _ns1__HelloWorld*);
    soap_POST_recv__ns1__HelloWorld(struct soap*, _ns1__HelloWorld*);
    @endcode

  - <ns1:HelloWorldResponse> @ref _ns1__HelloWorldResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__HelloWorldResponse(struct soap*, _ns1__HelloWorldResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__HelloWorldResponse(struct soap*, _ns1__HelloWorldResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__HelloWorldResponse(struct soap*, const char *URL, _ns1__HelloWorldResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__HelloWorldResponse(struct soap*, const char *URL, _ns1__HelloWorldResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__HelloWorldResponse(struct soap*, const char *URL, _ns1__HelloWorldResponse*);
    soap_POST_recv__ns1__HelloWorldResponse(struct soap*, _ns1__HelloWorldResponse*);
    @endcode

  - <ns1:GetVersion> @ref _ns1__GetVersion
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetVersion(struct soap*, _ns1__GetVersion*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetVersion(struct soap*, _ns1__GetVersion*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetVersion(struct soap*, const char *URL, _ns1__GetVersion*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetVersion(struct soap*, const char *URL, _ns1__GetVersion*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetVersion(struct soap*, const char *URL, _ns1__GetVersion*);
    soap_POST_recv__ns1__GetVersion(struct soap*, _ns1__GetVersion*);
    @endcode

  - <ns1:GetVersionResponse> @ref _ns1__GetVersionResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetVersionResponse(struct soap*, _ns1__GetVersionResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetVersionResponse(struct soap*, _ns1__GetVersionResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetVersionResponse(struct soap*, const char *URL, _ns1__GetVersionResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetVersionResponse(struct soap*, const char *URL, _ns1__GetVersionResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetVersionResponse(struct soap*, const char *URL, _ns1__GetVersionResponse*);
    soap_POST_recv__ns1__GetVersionResponse(struct soap*, _ns1__GetVersionResponse*);
    @endcode

  - <ns1:GetStatus> @ref _ns1__GetStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetStatus(struct soap*, _ns1__GetStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetStatus(struct soap*, _ns1__GetStatus*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetStatus(struct soap*, const char *URL, _ns1__GetStatus*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetStatus(struct soap*, const char *URL, _ns1__GetStatus*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetStatus(struct soap*, const char *URL, _ns1__GetStatus*);
    soap_POST_recv__ns1__GetStatus(struct soap*, _ns1__GetStatus*);
    @endcode

  - <ns1:GetStatusResponse> @ref _ns1__GetStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetStatusResponse(struct soap*, _ns1__GetStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetStatusResponse(struct soap*, _ns1__GetStatusResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetStatusResponse(struct soap*, const char *URL, _ns1__GetStatusResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetStatusResponse(struct soap*, const char *URL, _ns1__GetStatusResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetStatusResponse(struct soap*, const char *URL, _ns1__GetStatusResponse*);
    soap_POST_recv__ns1__GetStatusResponse(struct soap*, _ns1__GetStatusResponse*);
    @endcode

  - <ns1:OpenJob> @ref _ns1__OpenJob
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OpenJob(struct soap*, _ns1__OpenJob*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OpenJob(struct soap*, _ns1__OpenJob*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__OpenJob(struct soap*, const char *URL, _ns1__OpenJob*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__OpenJob(struct soap*, const char *URL, _ns1__OpenJob*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__OpenJob(struct soap*, const char *URL, _ns1__OpenJob*);
    soap_POST_recv__ns1__OpenJob(struct soap*, _ns1__OpenJob*);
    @endcode

  - <ns1:OpenJobEx> @ref _ns1__OpenJobEx
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OpenJobEx(struct soap*, _ns1__OpenJobEx*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OpenJobEx(struct soap*, _ns1__OpenJobEx*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__OpenJobEx(struct soap*, const char *URL, _ns1__OpenJobEx*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__OpenJobEx(struct soap*, const char *URL, _ns1__OpenJobEx*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__OpenJobEx(struct soap*, const char *URL, _ns1__OpenJobEx*);
    soap_POST_recv__ns1__OpenJobEx(struct soap*, _ns1__OpenJobEx*);
    @endcode

  - <ns1:OpenJobResponse> @ref _ns1__OpenJobResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OpenJobResponse(struct soap*, _ns1__OpenJobResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OpenJobResponse(struct soap*, _ns1__OpenJobResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__OpenJobResponse(struct soap*, const char *URL, _ns1__OpenJobResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__OpenJobResponse(struct soap*, const char *URL, _ns1__OpenJobResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__OpenJobResponse(struct soap*, const char *URL, _ns1__OpenJobResponse*);
    soap_POST_recv__ns1__OpenJobResponse(struct soap*, _ns1__OpenJobResponse*);
    @endcode

  - <ns1:OpenJobExResponse> @ref _ns1__OpenJobExResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OpenJobExResponse(struct soap*, _ns1__OpenJobExResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OpenJobExResponse(struct soap*, _ns1__OpenJobExResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__OpenJobExResponse(struct soap*, const char *URL, _ns1__OpenJobExResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__OpenJobExResponse(struct soap*, const char *URL, _ns1__OpenJobExResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__OpenJobExResponse(struct soap*, const char *URL, _ns1__OpenJobExResponse*);
    soap_POST_recv__ns1__OpenJobExResponse(struct soap*, _ns1__OpenJobExResponse*);
    @endcode

  - <ns1:RenewLease> @ref _ns1__RenewLease
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RenewLease(struct soap*, _ns1__RenewLease*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RenewLease(struct soap*, _ns1__RenewLease*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__RenewLease(struct soap*, const char *URL, _ns1__RenewLease*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__RenewLease(struct soap*, const char *URL, _ns1__RenewLease*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__RenewLease(struct soap*, const char *URL, _ns1__RenewLease*);
    soap_POST_recv__ns1__RenewLease(struct soap*, _ns1__RenewLease*);
    @endcode

  - <ns1:RenewLeaseResponse> @ref _ns1__RenewLeaseResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RenewLeaseResponse(struct soap*, _ns1__RenewLeaseResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RenewLeaseResponse(struct soap*, _ns1__RenewLeaseResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__RenewLeaseResponse(struct soap*, const char *URL, _ns1__RenewLeaseResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__RenewLeaseResponse(struct soap*, const char *URL, _ns1__RenewLeaseResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__RenewLeaseResponse(struct soap*, const char *URL, _ns1__RenewLeaseResponse*);
    soap_POST_recv__ns1__RenewLeaseResponse(struct soap*, _ns1__RenewLeaseResponse*);
    @endcode

  - <ns1:Execute> @ref _ns1__Execute
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Execute(struct soap*, _ns1__Execute*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Execute(struct soap*, _ns1__Execute*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__Execute(struct soap*, const char *URL, _ns1__Execute*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__Execute(struct soap*, const char *URL, _ns1__Execute*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__Execute(struct soap*, const char *URL, _ns1__Execute*);
    soap_POST_recv__ns1__Execute(struct soap*, _ns1__Execute*);
    @endcode

  - <ns1:ExecuteResponse> @ref _ns1__ExecuteResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ExecuteResponse(struct soap*, _ns1__ExecuteResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ExecuteResponse(struct soap*, _ns1__ExecuteResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__ExecuteResponse(struct soap*, const char *URL, _ns1__ExecuteResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__ExecuteResponse(struct soap*, const char *URL, _ns1__ExecuteResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__ExecuteResponse(struct soap*, const char *URL, _ns1__ExecuteResponse*);
    soap_POST_recv__ns1__ExecuteResponse(struct soap*, _ns1__ExecuteResponse*);
    @endcode

  - <ns1:ExecuteEx> @ref _ns1__ExecuteEx
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ExecuteEx(struct soap*, _ns1__ExecuteEx*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ExecuteEx(struct soap*, _ns1__ExecuteEx*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__ExecuteEx(struct soap*, const char *URL, _ns1__ExecuteEx*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__ExecuteEx(struct soap*, const char *URL, _ns1__ExecuteEx*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__ExecuteEx(struct soap*, const char *URL, _ns1__ExecuteEx*);
    soap_POST_recv__ns1__ExecuteEx(struct soap*, _ns1__ExecuteEx*);
    @endcode

  - <ns1:ExecuteExResponse> @ref _ns1__ExecuteExResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ExecuteExResponse(struct soap*, _ns1__ExecuteExResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ExecuteExResponse(struct soap*, _ns1__ExecuteExResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__ExecuteExResponse(struct soap*, const char *URL, _ns1__ExecuteExResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__ExecuteExResponse(struct soap*, const char *URL, _ns1__ExecuteExResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__ExecuteExResponse(struct soap*, const char *URL, _ns1__ExecuteExResponse*);
    soap_POST_recv__ns1__ExecuteExResponse(struct soap*, _ns1__ExecuteExResponse*);
    @endcode

  - <ns1:CloseJob> @ref _ns1__CloseJob
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CloseJob(struct soap*, _ns1__CloseJob*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CloseJob(struct soap*, _ns1__CloseJob*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CloseJob(struct soap*, const char *URL, _ns1__CloseJob*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CloseJob(struct soap*, const char *URL, _ns1__CloseJob*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CloseJob(struct soap*, const char *URL, _ns1__CloseJob*);
    soap_POST_recv__ns1__CloseJob(struct soap*, _ns1__CloseJob*);
    @endcode

  - <ns1:CloseJobResponse> @ref _ns1__CloseJobResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CloseJobResponse(struct soap*, _ns1__CloseJobResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CloseJobResponse(struct soap*, _ns1__CloseJobResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CloseJobResponse(struct soap*, const char *URL, _ns1__CloseJobResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CloseJobResponse(struct soap*, const char *URL, _ns1__CloseJobResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CloseJobResponse(struct soap*, const char *URL, _ns1__CloseJobResponse*);
    soap_POST_recv__ns1__CloseJobResponse(struct soap*, _ns1__CloseJobResponse*);
    @endcode

  - <ns1:BatchJob> @ref _ns1__BatchJob
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BatchJob(struct soap*, _ns1__BatchJob*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BatchJob(struct soap*, _ns1__BatchJob*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__BatchJob(struct soap*, const char *URL, _ns1__BatchJob*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__BatchJob(struct soap*, const char *URL, _ns1__BatchJob*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__BatchJob(struct soap*, const char *URL, _ns1__BatchJob*);
    soap_POST_recv__ns1__BatchJob(struct soap*, _ns1__BatchJob*);
    @endcode

  - <ns1:BatchJobResponse> @ref _ns1__BatchJobResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BatchJobResponse(struct soap*, _ns1__BatchJobResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BatchJobResponse(struct soap*, _ns1__BatchJobResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__BatchJobResponse(struct soap*, const char *URL, _ns1__BatchJobResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__BatchJobResponse(struct soap*, const char *URL, _ns1__BatchJobResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__BatchJobResponse(struct soap*, const char *URL, _ns1__BatchJobResponse*);
    soap_POST_recv__ns1__BatchJobResponse(struct soap*, _ns1__BatchJobResponse*);
    @endcode

  - <ns1:BatchJobEx> @ref _ns1__BatchJobEx
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BatchJobEx(struct soap*, _ns1__BatchJobEx*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BatchJobEx(struct soap*, _ns1__BatchJobEx*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__BatchJobEx(struct soap*, const char *URL, _ns1__BatchJobEx*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__BatchJobEx(struct soap*, const char *URL, _ns1__BatchJobEx*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__BatchJobEx(struct soap*, const char *URL, _ns1__BatchJobEx*);
    soap_POST_recv__ns1__BatchJobEx(struct soap*, _ns1__BatchJobEx*);
    @endcode

  - <ns1:BatchJobExResponse> @ref _ns1__BatchJobExResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BatchJobExResponse(struct soap*, _ns1__BatchJobExResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BatchJobExResponse(struct soap*, _ns1__BatchJobExResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__BatchJobExResponse(struct soap*, const char *URL, _ns1__BatchJobExResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__BatchJobExResponse(struct soap*, const char *URL, _ns1__BatchJobExResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__BatchJobExResponse(struct soap*, const char *URL, _ns1__BatchJobExResponse*);
    soap_POST_recv__ns1__BatchJobExResponse(struct soap*, _ns1__BatchJobExResponse*);
    @endcode

  - <ns1:GetExpiration> @ref _ns1__GetExpiration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetExpiration(struct soap*, _ns1__GetExpiration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetExpiration(struct soap*, _ns1__GetExpiration*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetExpiration(struct soap*, const char *URL, _ns1__GetExpiration*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetExpiration(struct soap*, const char *URL, _ns1__GetExpiration*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetExpiration(struct soap*, const char *URL, _ns1__GetExpiration*);
    soap_POST_recv__ns1__GetExpiration(struct soap*, _ns1__GetExpiration*);
    @endcode

  - <ns1:GetExpirationResponse> @ref _ns1__GetExpirationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetExpirationResponse(struct soap*, _ns1__GetExpirationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetExpirationResponse(struct soap*, _ns1__GetExpirationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetExpirationResponse(struct soap*, const char *URL, _ns1__GetExpirationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetExpirationResponse(struct soap*, const char *URL, _ns1__GetExpirationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetExpirationResponse(struct soap*, const char *URL, _ns1__GetExpirationResponse*);
    soap_POST_recv__ns1__GetExpirationResponse(struct soap*, _ns1__GetExpirationResponse*);
    @endcode

  - <ns1:GetAllJobs> @ref _ns1__GetAllJobs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllJobs(struct soap*, _ns1__GetAllJobs*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllJobs(struct soap*, _ns1__GetAllJobs*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAllJobs(struct soap*, const char *URL, _ns1__GetAllJobs*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAllJobs(struct soap*, const char *URL, _ns1__GetAllJobs*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAllJobs(struct soap*, const char *URL, _ns1__GetAllJobs*);
    soap_POST_recv__ns1__GetAllJobs(struct soap*, _ns1__GetAllJobs*);
    @endcode

  - <ns1:GetAllJobsResponse> @ref _ns1__GetAllJobsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllJobsResponse(struct soap*, _ns1__GetAllJobsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllJobsResponse(struct soap*, _ns1__GetAllJobsResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAllJobsResponse(struct soap*, const char *URL, _ns1__GetAllJobsResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAllJobsResponse(struct soap*, const char *URL, _ns1__GetAllJobsResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAllJobsResponse(struct soap*, const char *URL, _ns1__GetAllJobsResponse*);
    soap_POST_recv__ns1__GetAllJobsResponse(struct soap*, _ns1__GetAllJobsResponse*);
    @endcode

  - <ns1:GetAllJobsEx> @ref _ns1__GetAllJobsEx
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllJobsEx(struct soap*, _ns1__GetAllJobsEx*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllJobsEx(struct soap*, _ns1__GetAllJobsEx*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAllJobsEx(struct soap*, const char *URL, _ns1__GetAllJobsEx*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAllJobsEx(struct soap*, const char *URL, _ns1__GetAllJobsEx*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAllJobsEx(struct soap*, const char *URL, _ns1__GetAllJobsEx*);
    soap_POST_recv__ns1__GetAllJobsEx(struct soap*, _ns1__GetAllJobsEx*);
    @endcode

  - <ns1:GetAllJobsExResponse> @ref _ns1__GetAllJobsExResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllJobsExResponse(struct soap*, _ns1__GetAllJobsExResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllJobsExResponse(struct soap*, _ns1__GetAllJobsExResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetAllJobsExResponse(struct soap*, const char *URL, _ns1__GetAllJobsExResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetAllJobsExResponse(struct soap*, const char *URL, _ns1__GetAllJobsExResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetAllJobsExResponse(struct soap*, const char *URL, _ns1__GetAllJobsExResponse*);
    soap_POST_recv__ns1__GetAllJobsExResponse(struct soap*, _ns1__GetAllJobsExResponse*);
    @endcode

  - <ns1:CloseExpiredJobs> @ref _ns1__CloseExpiredJobs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CloseExpiredJobs(struct soap*, _ns1__CloseExpiredJobs*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CloseExpiredJobs(struct soap*, _ns1__CloseExpiredJobs*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CloseExpiredJobs(struct soap*, const char *URL, _ns1__CloseExpiredJobs*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CloseExpiredJobs(struct soap*, const char *URL, _ns1__CloseExpiredJobs*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CloseExpiredJobs(struct soap*, const char *URL, _ns1__CloseExpiredJobs*);
    soap_POST_recv__ns1__CloseExpiredJobs(struct soap*, _ns1__CloseExpiredJobs*);
    @endcode

  - <ns1:CloseExpiredJobsResponse> @ref _ns1__CloseExpiredJobsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CloseExpiredJobsResponse(struct soap*, _ns1__CloseExpiredJobsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CloseExpiredJobsResponse(struct soap*, _ns1__CloseExpiredJobsResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CloseExpiredJobsResponse(struct soap*, const char *URL, _ns1__CloseExpiredJobsResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CloseExpiredJobsResponse(struct soap*, const char *URL, _ns1__CloseExpiredJobsResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CloseExpiredJobsResponse(struct soap*, const char *URL, _ns1__CloseExpiredJobsResponse*);
    soap_POST_recv__ns1__CloseExpiredJobsResponse(struct soap*, _ns1__CloseExpiredJobsResponse*);
    @endcode

  - <ns1:CloseAllJobs> @ref _ns1__CloseAllJobs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CloseAllJobs(struct soap*, _ns1__CloseAllJobs*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CloseAllJobs(struct soap*, _ns1__CloseAllJobs*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CloseAllJobs(struct soap*, const char *URL, _ns1__CloseAllJobs*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CloseAllJobs(struct soap*, const char *URL, _ns1__CloseAllJobs*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CloseAllJobs(struct soap*, const char *URL, _ns1__CloseAllJobs*);
    soap_POST_recv__ns1__CloseAllJobs(struct soap*, _ns1__CloseAllJobs*);
    @endcode

  - <ns1:CloseAllJobsResponse> @ref _ns1__CloseAllJobsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CloseAllJobsResponse(struct soap*, _ns1__CloseAllJobsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CloseAllJobsResponse(struct soap*, _ns1__CloseAllJobsResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CloseAllJobsResponse(struct soap*, const char *URL, _ns1__CloseAllJobsResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CloseAllJobsResponse(struct soap*, const char *URL, _ns1__CloseAllJobsResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CloseAllJobsResponse(struct soap*, const char *URL, _ns1__CloseAllJobsResponse*);
    soap_POST_recv__ns1__CloseAllJobsResponse(struct soap*, _ns1__CloseAllJobsResponse*);
    @endcode

  - <ns1:Diag> @ref _ns1__Diag
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Diag(struct soap*, _ns1__Diag*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Diag(struct soap*, _ns1__Diag*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__Diag(struct soap*, const char *URL, _ns1__Diag*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__Diag(struct soap*, const char *URL, _ns1__Diag*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__Diag(struct soap*, const char *URL, _ns1__Diag*);
    soap_POST_recv__ns1__Diag(struct soap*, _ns1__Diag*);
    @endcode

  - <ns1:DiagResponse> @ref _ns1__DiagResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DiagResponse(struct soap*, _ns1__DiagResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DiagResponse(struct soap*, _ns1__DiagResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DiagResponse(struct soap*, const char *URL, _ns1__DiagResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DiagResponse(struct soap*, const char *URL, _ns1__DiagResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DiagResponse(struct soap*, const char *URL, _ns1__DiagResponse*);
    soap_POST_recv__ns1__DiagResponse(struct soap*, _ns1__DiagResponse*);
    @endcode

  - <ns1:DiagEx> @ref _ns1__DiagEx
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DiagEx(struct soap*, _ns1__DiagEx*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DiagEx(struct soap*, _ns1__DiagEx*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DiagEx(struct soap*, const char *URL, _ns1__DiagEx*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DiagEx(struct soap*, const char *URL, _ns1__DiagEx*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DiagEx(struct soap*, const char *URL, _ns1__DiagEx*);
    soap_POST_recv__ns1__DiagEx(struct soap*, _ns1__DiagEx*);
    @endcode

  - <ns1:DiagExResponse> @ref _ns1__DiagExResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DiagExResponse(struct soap*, _ns1__DiagExResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DiagExResponse(struct soap*, _ns1__DiagExResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DiagExResponse(struct soap*, const char *URL, _ns1__DiagExResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DiagExResponse(struct soap*, const char *URL, _ns1__DiagExResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DiagExResponse(struct soap*, const char *URL, _ns1__DiagExResponse*);
    soap_POST_recv__ns1__DiagExResponse(struct soap*, _ns1__DiagExResponse*);
    @endcode

*/

/* End of generated/prototypes.h */
